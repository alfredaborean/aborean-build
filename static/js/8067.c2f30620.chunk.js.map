{"version":3,"file":"static/js/8067.c2f30620.chunk.js","mappings":"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","sources":["../packages/uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery.ts","../packages/uniswap/src/data/apiClients/tradingApi/useDecreaseLpPositionCalldataQuery.ts","webpack://@uniswap/interface/./src/components/RemoveLiquidity/RemoveLiquidityReview.tsx?5e09","webpack://@uniswap/interface/./src/components/Liquidity/LiquidityModalDetailRows.tsx?2b99","webpack://@uniswap/interface/./src/components/ErrorCallout/index.tsx?5e87","webpack://@uniswap/interface/./src/components/Liquidity/TokenInfo.tsx?c202","webpack://@uniswap/interface/./src/pages/RemoveLiquidity/RemoveLiquidityForm.tsx?4d78","webpack://@uniswap/interface/./src/components/Liquidity/LiquidityModalHeader.tsx?873b","../packages/ui/src/components/icons/RotateLeft.tsx","components/ErrorCallout/index.tsx","components/Liquidity/LiquidityModalDetailRows.tsx","components/Liquidity/LiquidityModalHeader.tsx","components/Liquidity/TokenInfo.tsx","components/PercentInput.tsx","pages/Pool/Positions/create/hooks/useLPSlippageValues.ts","components/RemoveLiquidity/RemoveLiquidityModalContext.tsx","components/RemoveLiquidity/RemoveLiquidityTxContext.tsx","components/RemoveLiquidity/hooks.ts","components/RemoveLiquidity/RemoveLiquidityReview.tsx","pages/RemoveLiquidity/RemoveLiquidityForm.tsx","pages/RemoveLiquidity/RemoveLiquidityModal.tsx"],"sourcesContent":["import { UseQueryResult, useQuery } from '@tanstack/react-query'\r\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\r\nimport { checkLpApproval } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\r\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\r\nimport { CheckApprovalLPRequest, CheckApprovalLPResponse } from 'uniswap/src/data/tradingApi/__generated__'\r\nimport { ReactQueryCacheKey } from 'utilities/src/reactQuery/cache'\r\n\r\nexport function useCheckLpApprovalQuery({\r\n  params,\r\n  headers,\r\n  ...rest\r\n}: UseQueryApiHelperHookArgs<CheckApprovalLPRequest, CheckApprovalLPResponse> & {\r\n  headers?: Record<string, string>\r\n}): UseQueryResult<CheckApprovalLPResponse> {\r\n  const queryKey = [ReactQueryCacheKey.TradingApi, uniswapUrls.tradingApiPaths.lpApproval, params]\r\n\r\n  return useQuery<CheckApprovalLPResponse>({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      if (!params) {\r\n        throw { name: 'Params are required' }\r\n      }\r\n      return await checkLpApproval(params, headers)\r\n    },\r\n    ...rest,\r\n  })\r\n}\r\n","import { UseQueryResult, useQuery } from '@tanstack/react-query'\r\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\r\nimport { decreaseLpPosition } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\r\nimport { getTradeSettingsDeadline } from 'uniswap/src/data/apiClients/tradingApi/utils/getTradeSettingsDeadline'\r\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\r\nimport { DecreaseLPPositionRequest, DecreaseLPPositionResponse } from 'uniswap/src/data/tradingApi/__generated__'\r\nimport { ReactQueryCacheKey } from 'utilities/src/reactQuery/cache'\r\n\r\nexport function useDecreaseLpPositionCalldataQuery({\r\n  params,\r\n  deadlineInMinutes,\r\n  ...rest\r\n}: UseQueryApiHelperHookArgs<DecreaseLPPositionRequest, DecreaseLPPositionResponse> & {\r\n  deadlineInMinutes: number | undefined\r\n}): UseQueryResult<DecreaseLPPositionResponse> {\r\n  const queryKey = [ReactQueryCacheKey.TradingApi, uniswapUrls.tradingApiPaths.decreaseLp, params]\r\n\r\n  const deadline = getTradeSettingsDeadline(deadlineInMinutes)\r\n  const paramsWithDeadline = { ...params, deadline }\r\n\r\n  return useQuery<DecreaseLPPositionResponse>({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      if (!params) {\r\n        throw { name: 'Params are required' }\r\n      }\r\n      return await decreaseLpPosition(paramsWithDeadline)\r\n    },\r\n    ...rest,\r\n  })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { Path, Svg } from \"react-native-svg\";\nimport { createIcon } from \"../factories/createIcon\";\nexport const [RotateLeft, AnimatedRotateLeft] = createIcon({\n  name: \"RotateLeft\",\n  getIcon: (props) => <Svg viewBox=\"0 0 16 16\" fill=\"none\" {...props}>\r\n      <Path\n    d=\"M14.6667 8C14.6667 11.676 11.676 14.6667 8.00004 14.6667C5.45204 14.6667 3.16399 13.248 2.02999 10.9634C1.86599 10.6334 2.00077 10.2333 2.33077 10.07C2.65944 9.90532 3.06067 10.0413 3.224 10.3706C4.13133 12.1986 5.96137 13.334 8.00004 13.334C10.9407 13.334 13.3334 10.9413 13.3334 8.00065C13.3334 5.05998 10.9407 2.66732 8.00004 2.66732C6.07537 2.66732 4.33143 3.71065 3.39343 5.33398H5.33337C5.70204 5.33398 6.00004 5.63265 6.00004 6.00065C6.00004 6.36865 5.70204 6.66732 5.33337 6.66732H2.00004C1.63137 6.66732 1.33337 6.36865 1.33337 6.00065V2.66732C1.33337 2.29932 1.63137 2.00065 2.00004 2.00065C2.36871 2.00065 2.66671 2.29932 2.66671 2.66732V4.00602C3.90204 2.35736 5.86471 1.33398 8.00004 1.33398C11.676 1.33332 14.6667 4.324 14.6667 8Z\"\n    fill=\"currentColor\"\n  />\r\n    </Svg>\n});\n","\"use strict\";\nimport { useTranslation } from \"react-i18next\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { Flex, Text, TouchableArea } from \"ui/src\";\nimport { AlertTriangleFilled } from \"ui/src/components/icons/AlertTriangleFilled\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nexport function ErrorCallout({\n  errorMessage,\n  description,\n  title,\n  isWarning = false,\n  action,\n  pressIcon = <RotateLeft size=\"$icon.16\" color=\"$neutral1\" />,\n  onPress\n}) {\n  const { t } = useTranslation();\n  if (!errorMessage) {\n    return null;\n  }\n  return <Flex row gap=\"$spacing12\" backgroundColor=\"$surface2\" borderRadius=\"$rounded16\" p=\"$padding12\">\r\n      <Flex\n    backgroundColor={isWarning ? \"$statusWarning2\" : \"$statusCritical2\"}\n    p=\"$padding12\"\n    borderRadius=\"$rounded12\"\n    alignSelf=\"flex-start\"\n  >\r\n        <AlertTriangleFilled color={isWarning ? \"$statusWarning\" : \"$statusCritical\"} size=\"$icon.20\" />\r\n      </Flex>\r\n      <Flex alignItems=\"flex-start\" flexWrap=\"wrap\" flexShrink={1} gap=\"$gap4\">\r\n        <Text color={isWarning ? \"$statusWarning\" : \"$statusCritical\"} variant=\"body3\">\r\n          {title || t(\"common.card.error.description\")}\r\n        </Text>\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          {description || t(\"pool.liquidity.data.error.message\")}\r\n        </Text>\r\n        {\n    /* the error message will be of type true or a string. True means there was an error but the message is unknown. */\n  }\r\n        {errorMessage !== true && <Text variant=\"body3\" color=\"$neutral3\">\r\n            {t(\"common.error.label\")}: {errorMessage}\r\n          </Text>}\r\n        {Boolean(onPress) && <TouchableArea {...ClickableTamaguiStyle} onPress={onPress} mt=\"$spacing2\">\r\n            <Flex row gap=\"$gap4\">\r\n              {pressIcon}\r\n              <Text variant=\"buttonLabel3\">{action || t(\"common.button.tryAgain\")}</Text>\r\n            </Flex>\r\n          </TouchableArea>}\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { DetailLineItem } from \"components/swap/DetailLineItem\";\nimport { useCurrencyInfo } from \"hooks/Tokens\";\nimport { Trans } from \"react-i18next\";\nimport { Flex, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { CurrencyLogo } from \"uniswap/src/components/CurrencyLogo/CurrencyLogo\";\nimport { NetworkLogo } from \"uniswap/src/components/CurrencyLogo/NetworkLogo\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { NumberType } from \"utilities/src/format/types\";\nexport function LiquidityModalDetailRows({\n  currency0Amount,\n  currency1Amount,\n  networkCost\n}) {\n  const { formatCurrencyAmount } = useLocalizationContext();\n  const currency0Info = useCurrencyInfo(currency0Amount?.currency);\n  const currency1Info = useCurrencyInfo(currency1Amount?.currency);\n  return <Flex px=\"$padding16\" gap=\"$gap8\">\r\n      <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n              <Trans i18nKey=\"pool.specificPosition\" values={{ symbol: currency0Amount?.currency.symbol }} />\r\n            </Text>,\n      Value: () => <Flex row gap=\"$gap4\" alignItems=\"center\">\r\n              <CurrencyLogo currencyInfo={currency0Info} size={iconSizes.icon16} />\r\n              <Text variant=\"body3\" color=\"$neutral1\">\r\n                {formatCurrencyAmount({ value: currency0Amount, type: NumberType.TokenNonTx })}{\" \"}\r\n                {currency0Amount?.currency.symbol}\r\n              </Text>\r\n            </Flex>\n    }}\n  />\r\n      <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n              <Trans i18nKey=\"pool.specificPosition\" values={{ symbol: currency1Amount?.currency.symbol }} />\r\n            </Text>,\n      Value: () => <Flex row gap=\"$gap4\" alignItems=\"center\">\r\n              <CurrencyLogo currencyInfo={currency1Info} size={iconSizes.icon16} />\r\n              <Text variant=\"body3\" color=\"$neutral1\">\r\n                {formatCurrencyAmount({ value: currency1Amount, type: NumberType.TokenNonTx })}{\" \"}\r\n                {currency1Amount?.currency.symbol}\r\n              </Text>\r\n            </Flex>\n    }}\n  />\r\n      {Boolean(networkCost) && !!currency0Amount && <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                <Trans i18nKey=\"common.networkCost\" />\r\n              </Text>,\n      Value: () => <Flex row gap=\"$gap4\" alignItems=\"center\">\r\n                <NetworkLogo chainId={currency0Amount.currency.chainId} size={iconSizes.icon16} shape=\"square\" />\r\n                <Text variant=\"body3\" color=\"$neutral1\">\r\n                  {formatCurrencyAmount({ value: networkCost, type: NumberType.FiatGasPrice })}\r\n                </Text>\r\n              </Flex>\n    }}\n  />}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, ModalCloseIcon, Text, TouchableArea } from \"ui/src\";\nimport { BackArrow } from \"ui/src/components/icons/BackArrow\";\nimport { SwapFormSettings } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/SwapFormSettings\";\nimport { Deadline } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Deadline/Deadline\";\nimport { Slippage } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Slippage/Slippage\";\nexport function LiquidityModalHeader({\n  title,\n  closeModal,\n  goBack\n}) {\n  const { t } = useTranslation();\n  const CloseIconComponent = useMemo(\n    () => <ModalCloseIcon testId=\"LiquidityModalHeader-close\" onClose={closeModal} />,\n    [closeModal]\n  );\n  return <Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$spacing4\" width=\"100%\">\r\n      {goBack ? <TouchableArea onPress={goBack}>\r\n          <BackArrow color=\"$neutral1\" size=\"$icon.24\" />\r\n        </TouchableArea> : CloseIconComponent}\r\n      <Text variant=\"body2\" flexGrow={1} textAlign=\"center\" pr={24}>\r\n        {title}\r\n      </Text>\r\n      {!goBack ? <SwapFormSettings\n    adjustTopAlignment={false}\n    settings={[Slippage, Deadline]}\n    defaultTitle={t(\"pool.positions.transaction.settings\")}\n  /> : <Flex position=\"absolute\" top=\"0\" right=\"0\" p=\"$spacing4\">\r\n          {CloseIconComponent}\r\n        </Flex>}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport CurrencyLogo from \"components/Logo/CurrencyLogo\";\nimport { getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { Flex, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { getSymbolDisplayText } from \"uniswap/src/utils/currency\";\nimport { NumberType } from \"utilities/src/format/types\";\nexport function TokenInfo({\n  currencyAmount,\n  currencyUSDAmount,\n  isMigrating = false\n}) {\n  const { formatCurrencyAmount } = useLocalizationContext();\n  const currency = isMigrating ? getCurrencyForProtocol(currencyAmount?.currency, ProtocolVersion.V4) : currencyAmount?.currency;\n  return <Flex row alignItems=\"center\">\r\n      <Flex grow>\r\n        <Text variant=\"heading2\">\r\n          {formatCurrencyAmount({\n    value: currencyAmount,\n    type: NumberType.TokenNonTx\n  })}{\" \"}\r\n          {getSymbolDisplayText(currency?.symbol)}\r\n        </Text>\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          {formatCurrencyAmount({\n    value: currencyUSDAmount,\n    type: NumberType.FiatStandard\n  })}\r\n        </Text>\r\n      </Flex>\r\n      <CurrencyLogo currency={currency} size={iconSizes.icon36} />\r\n    </Flex>;\n}\n","\"use strict\";\nimport { StyledInput, localeUsesComma } from \"components/NumericalInput\";\nimport { NumericalInputFontStyle } from \"pages/Swap/common/shared\";\nimport React, { forwardRef } from \"react\";\nimport styled from \"styled-components\";\nimport { useCurrentLocale } from \"uniswap/src/features/language/hooks\";\nconst PercentInput = forwardRef(\n  ({ value, onUserInput, placeholder, testId, maxDecimals = 2, ...rest }, ref) => {\n    const inputRegexStr = `^\\\\d*(\\\\.\\\\d{0,${maxDecimals}})?$`;\n    const noDecimalRegexStr = \"^\\\\d*$\";\n    const inputRegex = RegExp(inputRegexStr);\n    const noDecimalRegex = RegExp(noDecimalRegexStr);\n    const locale = useCurrentLocale();\n    const enforcer = (nextUserInput) => {\n      const sanitizedInput = nextUserInput.replace(/,/g, \".\");\n      if (sanitizedInput === \"\" || (maxDecimals <= 0 ? noDecimalRegex : inputRegex).test(sanitizedInput)) {\n        onUserInput(sanitizedInput);\n      }\n    };\n    const formatValueWithLocale = (value2) => {\n      const [searchValue, replaceValue] = localeUsesComma(locale) ? [/\\./g, \",\"] : [/,/g, \".\"];\n      return value2.toString().replace(searchValue, replaceValue);\n    };\n    const valueFormattedWithLocale = formatValueWithLocale(value);\n    return <StyledInput\n      minLength={1}\n      maxLength={maxDecimals + 2}\n      {...rest}\n      ref={ref}\n      value={valueFormattedWithLocale}\n      data-testid={testId}\n      onChange={(event) => {\n        enforcer(event.target.value);\n      }}\n      inputMode=\"numeric\"\n      autoComplete=\"off\"\n      autoCorrect=\"off\"\n      type=\"text\"\n      pattern={maxDecimals <= 0 ? noDecimalRegexStr : inputRegexStr}\n      placeholder={placeholder || \"0\"}\n      spellCheck=\"false\"\n    />;\n  }\n);\nPercentInput.displayName = \"Input\";\nconst MemoizedInput = React.memo(PercentInput);\nexport const StyledPercentInput = styled(MemoizedInput)`\n  max-height: 84px;\n  max-width: 100%;\n  width: ${({ $width }) => `${$width ?? 43}px`}; // this value is from the size of a 0 which is the default value\n  ${NumericalInputFontStyle}\n\n  ::placeholder {\n    opacity: 1;\n  }\n`;\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { LPConfigKey } from \"uniswap/src/features/gating/configs\";\nimport { DynamicConfigs } from \"uniswap/src/features/gating/configs\";\nimport { useDynamicConfigValue } from \"uniswap/src/features/gating/hooks\";\nexport function useLPSlippageValue(version, currencyA, currencyB) {\n  const defaultSlippage = useDynamicConfigValue(DynamicConfigs.LPConfig, LPConfigKey.DefaultSlippage, 2.5);\n  const v4SlippageOverride = useDynamicConfigValue(DynamicConfigs.LPConfig, LPConfigKey.V4SlippageOverride, 0.05);\n  const isNativePool = currencyA?.isNative || currencyB?.isNative;\n  if (version === ProtocolVersion.V4 && isNativePool) {\n    return v4SlippageOverride;\n  }\n  return defaultSlippage;\n}\n","\"use strict\";\nimport { useModalLiquidityInitialState } from \"components/Liquidity/hooks\";\nimport { createContext, useContext, useMemo, useState } from \"react\";\nexport var DecreaseLiquidityStep = /* @__PURE__ */ ((DecreaseLiquidityStep2) => {\n  DecreaseLiquidityStep2[DecreaseLiquidityStep2[\"Input\"] = 0] = \"Input\";\n  DecreaseLiquidityStep2[DecreaseLiquidityStep2[\"Review\"] = 1] = \"Review\";\n  return DecreaseLiquidityStep2;\n})(DecreaseLiquidityStep || {});\nconst RemoveLiquidityModalContext = createContext({\n  step: 0 /* Input */,\n  setStep: () => null,\n  percent: \"\",\n  setPercent: () => null,\n  percentInvalid: true,\n  unwrapNativeCurrency: true,\n  setUnwrapNativeCurrency: () => null,\n  currentTransactionStep: void 0,\n  setCurrentTransactionStep: () => null\n});\nexport function RemoveLiquidityModalContextProvider({ children }) {\n  const [step, setStep] = useState(0 /* Input */);\n  const [unwrapNativeCurrency, setUnwrapNativeCurrency] = useState(true);\n  const [percent, setPercent] = useState(\"\");\n  const [currentTransactionStep, setCurrentTransactionStep] = useState();\n  const positionInfo = useModalLiquidityInitialState();\n  const percentInvalid = percent === \"0\" || percent === \"\" || !percent;\n  const ctx = useMemo(\n    () => ({\n      percent,\n      setPercent,\n      step,\n      setStep,\n      positionInfo,\n      percentInvalid,\n      unwrapNativeCurrency,\n      setUnwrapNativeCurrency,\n      currentTransactionStep,\n      setCurrentTransactionStep\n    }),\n    [\n      percent,\n      step,\n      positionInfo,\n      percentInvalid,\n      unwrapNativeCurrency,\n      setUnwrapNativeCurrency,\n      currentTransactionStep\n    ]\n  );\n  return <RemoveLiquidityModalContext.Provider value={ctx}>{children}</RemoveLiquidityModalContext.Provider>;\n}\nexport function useRemoveLiquidityModalContext() {\n  const removeModalContext = useContext(RemoveLiquidityModalContext);\n  if (removeModalContext === void 0) {\n    throw new Error(\"`useRemoveLiquidityTxContext` must be used inside of `RemoveLiquidityTxContextProvider`\");\n  }\n  return removeModalContext;\n}\n","\"use strict\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { useRemoveLiquidityModalContext } from \"components/RemoveLiquidity/RemoveLiquidityModalContext\";\nimport { useRemoveLiquidityTxAndGasInfo } from \"components/RemoveLiquidity/hooks\";\nimport { getCurrencyWithOptionalUnwrap } from \"pages/Pool/Positions/create/utils\";\nimport { createContext, useContext, useEffect, useMemo } from \"react\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlag } from \"uniswap/src/features/gating/hooks\";\nimport {\n  LiquidityTransactionType\n} from \"uniswap/src/features/transactions/liquidity/types\";\nimport { validateTransactionRequest } from \"uniswap/src/features/transactions/swap/utils/trade\";\nimport { logContextUpdate } from \"utilities/src/logger/contextEnhancer\";\nconst RemoveLiquidityTxContext = createContext(void 0);\nexport function RemoveLiquidityTxContextProvider({ children }) {\n  const account = useAccountMeta();\n  const { positionInfo, percent, unwrapNativeCurrency } = useRemoveLiquidityModalContext();\n  const removeLiquidityTxInfo = useRemoveLiquidityTxAndGasInfo({ account: account?.address });\n  const { approvalLoading, decreaseCalldataLoading, decreaseCalldata, error, refetch } = removeLiquidityTxInfo;\n  const datadogEnabled = useFeatureFlag(FeatureFlags.Datadog);\n  useEffect(() => {\n    logContextUpdate(\"RemoveLiquidityTxContext\", removeLiquidityTxInfo, datadogEnabled);\n  }, [removeLiquidityTxInfo, datadogEnabled]);\n  const currency0 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency0Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency\n  });\n  const currency1 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency1Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency\n  });\n  const decreaseLiquidityTxContext = useMemo(() => {\n    if (!positionInfo || approvalLoading || decreaseCalldataLoading || !decreaseCalldata || !currency0 || !currency1) {\n      return void 0;\n    }\n    const approvePositionTokenRequest = validateTransactionRequest(\n      removeLiquidityTxInfo.v2LpTokenApproval?.positionTokenApproval\n    );\n    const txRequest = validateTransactionRequest(decreaseCalldata.decrease);\n    if (!txRequest) {\n      return void 0;\n    }\n    const { currency0Amount, currency1Amount } = positionInfo;\n    const token0Amount = CurrencyAmount.fromRawAmount(currency0, currency0Amount.quotient);\n    const token1Amount = CurrencyAmount.fromRawAmount(currency1, currency1Amount.quotient);\n    const currency0AmountToRemove = token0Amount.multiply(percent).divide(100);\n    const currency1AmountToRemove = token1Amount.multiply(percent).divide(100);\n    return {\n      type: LiquidityTransactionType.Decrease,\n      protocolVersion: positionInfo.version,\n      action: {\n        type: LiquidityTransactionType.Decrease,\n        currency0Amount: currency0AmountToRemove,\n        currency1Amount: currency1AmountToRemove,\n        liquidityToken: positionInfo.liquidityToken\n      },\n      approvePositionTokenRequest,\n      txRequest,\n      approveToken0Request: void 0,\n      approveToken1Request: void 0,\n      revokeToken0Request: void 0,\n      revokeToken1Request: void 0,\n      token0PermitTransaction: void 0,\n      token1PermitTransaction: void 0,\n      permit: void 0\n    };\n  }, [\n    positionInfo,\n    approvalLoading,\n    decreaseCalldataLoading,\n    decreaseCalldata,\n    currency0,\n    currency1,\n    removeLiquidityTxInfo.v2LpTokenApproval?.positionTokenApproval,\n    percent\n  ]);\n  return <RemoveLiquidityTxContext.Provider\n    value={{ ...removeLiquidityTxInfo, txContext: decreaseLiquidityTxContext, error, refetch }}\n  >\r\n      {children}\r\n    </RemoveLiquidityTxContext.Provider>;\n}\nexport const useRemoveLiquidityTxContext = () => {\n  const removeContext = useContext(RemoveLiquidityTxContext);\n  if (removeContext === void 0) {\n    throw new Error(\"`useRemoveLiquidityTxContext` must be used inside of `RemoveLiquidityTxContextProvider`\");\n  }\n  return removeContext;\n};\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { usePositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { getProtocolItems } from \"components/Liquidity/utils\";\nimport { useRemoveLiquidityModalContext } from \"components/RemoveLiquidity/RemoveLiquidityModalContext\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport JSBI from \"jsbi\";\nimport { getCurrencyWithOptionalUnwrap } from \"pages/Pool/Positions/create/utils\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { useCheckLpApprovalQuery } from \"uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery\";\nimport { useDecreaseLpPositionCalldataQuery } from \"uniswap/src/data/apiClients/tradingApi/useDecreaseLpPositionCalldataQuery\";\nimport {\n  ProtocolItems\n} from \"uniswap/src/data/tradingApi/__generated__\";\nimport { toSupportedChainId } from \"uniswap/src/features/chains/utils\";\nimport { useTransactionGasFee, useUSDCurrencyAmountOfGasFee } from \"uniswap/src/features/gas/hooks\";\nimport { InterfaceEventNameLocal } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { getErrorMessageToDisplay, parseErrorMessageTitle } from \"uniswap/src/features/transactions/liquidity/utils\";\nimport { useTransactionSettingsContext } from \"uniswap/src/features/transactions/settings/contexts/TransactionSettingsContext\";\nimport { TransactionStepType } from \"uniswap/src/features/transactions/steps/types\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nexport function useRemoveLiquidityTxAndGasInfo({ account }) {\n  const { positionInfo, percent, percentInvalid, unwrapNativeCurrency, currentTransactionStep } = useRemoveLiquidityModalContext();\n  const { customDeadline, customSlippageTolerance } = useTransactionSettingsContext();\n  const [hasDecreaseErrorResponse, setHasDecreaseErrorResponse] = useState(false);\n  const currency0 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency0Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency && positionInfo?.version !== ProtocolVersion.V4\n  });\n  const currency1 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency1Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency && positionInfo?.version !== ProtocolVersion.V4\n  });\n  const v2LpTokenApprovalQueryParams = useMemo(() => {\n    if (!positionInfo || !positionInfo.liquidityToken || percentInvalid || !positionInfo.liquidityAmount) {\n      return void 0;\n    }\n    return {\n      protocol: ProtocolItems.V2,\n      walletAddress: account,\n      chainId: positionInfo.liquidityToken.chainId,\n      positionToken: positionInfo.liquidityToken.address,\n      positionAmount: positionInfo.liquidityAmount.multiply(JSBI.BigInt(percent)).divide(JSBI.BigInt(100)).quotient.toString()\n    };\n  }, [positionInfo, percent, account, percentInvalid]);\n  const {\n    data: v2LpTokenApproval,\n    isLoading: v2ApprovalLoading,\n    error: approvalError,\n    refetch: approvalRefetch\n  } = useCheckLpApprovalQuery({\n    params: v2LpTokenApprovalQueryParams,\n    staleTime: 5 * ONE_SECOND_MS,\n    enabled: Boolean(v2LpTokenApprovalQueryParams)\n  });\n  if (approvalError) {\n    logger.info(\n      \"RemoveLiquidityTxAndGasInfo\",\n      \"RemoveLiquidityTxAndGasInfo\",\n      parseErrorMessageTitle(approvalError, { defaultTitle: \"unkown CheckLpApprovalQuery\" }),\n      {\n        error: JSON.stringify(approvalError),\n        v2LpTokenApprovalQueryParams: JSON.stringify(v2LpTokenApprovalQueryParams)\n      }\n    );\n  }\n  const v2ApprovalGasFeeUSD = useUSDCurrencyAmountOfGasFee(\n    positionInfo?.liquidityToken?.chainId,\n    v2LpTokenApproval?.gasFeePositionTokenApproval\n  ) ?? void 0;\n  const approvalsNeeded = Boolean(v2LpTokenApproval);\n  const { feeValue0, feeValue1 } = usePositionDerivedInfo(positionInfo);\n  const decreaseCalldataQueryParams = useMemo(() => {\n    const apiProtocolItems = getProtocolItems(positionInfo?.version);\n    if (!positionInfo || !apiProtocolItems || !account || percentInvalid || !currency0 || !currency1) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: !approvalsNeeded,\n      protocol: apiProtocolItems,\n      tokenId: positionInfo.tokenId ? Number(positionInfo.tokenId) : void 0,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      walletAddress: account,\n      liquidityPercentageToDecrease: Number(percent),\n      liquidity0: positionInfo.version === ProtocolVersion.V2 ? positionInfo.currency0Amount.quotient.toString() : void 0,\n      liquidity1: positionInfo.version === ProtocolVersion.V2 ? positionInfo.currency1Amount.quotient.toString() : void 0,\n      positionLiquidity: positionInfo.version === ProtocolVersion.V2 ? positionInfo.liquidityAmount?.quotient.toString() : positionInfo.liquidity,\n      expectedTokenOwed0RawAmount: positionInfo.version !== ProtocolVersion.V4 ? feeValue0?.quotient.toString() : void 0,\n      expectedTokenOwed1RawAmount: positionInfo.version !== ProtocolVersion.V4 ? feeValue1?.quotient.toString() : void 0,\n      position: {\n        tickLower: positionInfo.tickLower ? Number(positionInfo.tickLower) : void 0,\n        tickUpper: positionInfo.tickUpper ? Number(positionInfo.tickUpper) : void 0,\n        pool: {\n          token0: currency0.isNative ? ZERO_ADDRESS : currency0.address,\n          token1: currency1.isNative ? ZERO_ADDRESS : currency1.address,\n          fee: positionInfo.feeTier ? Number(positionInfo.feeTier) : void 0,\n          tickSpacing: positionInfo?.tickSpacing ? Number(positionInfo?.tickSpacing) : void 0,\n          hooks: positionInfo.v4hook\n        }\n      },\n      slippageTolerance: customSlippageTolerance\n    };\n  }, [\n    positionInfo,\n    account,\n    percentInvalid,\n    currency0,\n    currency1,\n    approvalsNeeded,\n    percent,\n    feeValue0?.quotient,\n    feeValue1?.quotient,\n    customSlippageTolerance\n  ]);\n  const isUserCommittedToDecrease = currentTransactionStep?.step.type === TransactionStepType.DecreasePositionTransaction;\n  const {\n    data: decreaseCalldata,\n    isLoading: decreaseCalldataLoading,\n    error: calldataError,\n    refetch: calldataRefetch\n  } = useDecreaseLpPositionCalldataQuery({\n    params: decreaseCalldataQueryParams,\n    deadlineInMinutes: customDeadline,\n    refetchInterval: hasDecreaseErrorResponse ? false : 5 * ONE_SECOND_MS,\n    retry: false,\n    enabled: !isUserCommittedToDecrease && !!decreaseCalldataQueryParams && (!percentInvalid && !v2LpTokenApprovalQueryParams || !v2ApprovalLoading && !approvalError && Boolean(v2LpTokenApproval))\n  });\n  useEffect(() => {\n    setHasDecreaseErrorResponse(!!calldataError);\n  }, [calldataError, decreaseCalldataQueryParams]);\n  if (calldataError) {\n    const message = parseErrorMessageTitle(calldataError, { defaultTitle: \"DecreaseLpPositionCalldataQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"RemoveLiquidityTxAndGasInfo\",\n        function: \"useEffect\"\n      }\n    });\n    sendAnalyticsEvent(InterfaceEventNameLocal.DecreaseLiquidityFailed, {\n      message\n    });\n  }\n  const { value: estimatedGasFee } = useTransactionGasFee(decreaseCalldata?.decrease, !!decreaseCalldata?.gasFee);\n  const decreaseGasFeeUsd = useUSDCurrencyAmountOfGasFee(\n    toSupportedChainId(decreaseCalldata?.decrease?.chainId) ?? void 0,\n    decreaseCalldata?.gasFee || estimatedGasFee\n  ) ?? void 0;\n  const totalGasFeeEstimate = v2ApprovalGasFeeUSD ? decreaseGasFeeUsd?.add(v2ApprovalGasFeeUSD) : decreaseGasFeeUsd;\n  return {\n    gasFeeEstimateUSD: totalGasFeeEstimate,\n    decreaseCalldataLoading,\n    decreaseCalldata,\n    v2LpTokenApproval,\n    approvalLoading: v2ApprovalLoading,\n    error: getErrorMessageToDisplay({ approvalError, calldataError }),\n    refetch: approvalError ? approvalRefetch : calldataError ? calldataRefetch : void 0\n  };\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { TokenInfo } from \"components/Liquidity/TokenInfo\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { useGetPoolTokenPercentage, usePositionCurrentPrice, usePositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { useRemoveLiquidityModalContext } from \"components/RemoveLiquidity/RemoveLiquidityModalContext\";\nimport { useRemoveLiquidityTxContext } from \"components/RemoveLiquidity/RemoveLiquidityTxContext\";\nimport { DetailLineItem } from \"components/swap/DetailLineItem\";\nimport { useCurrencyInfo } from \"hooks/Tokens\";\nimport { useAccount } from \"hooks/useAccount\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { getCurrencyWithOptionalUnwrap } from \"pages/Pool/Positions/create/utils\";\nimport { useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { Button, Flex, Separator, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { ProgressIndicator } from \"uniswap/src/components/ConfirmSwapModal/ProgressIndicator\";\nimport { CurrencyLogo } from \"uniswap/src/components/CurrencyLogo/CurrencyLogo\";\nimport { NetworkLogo } from \"uniswap/src/components/CurrencyLogo/NetworkLogo\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/hooks/useUSDCPrice\";\nimport { isValidLiquidityTxContext } from \"uniswap/src/features/transactions/liquidity/types\";\nimport { getSymbolDisplayText } from \"uniswap/src/utils/currency\";\nimport { NumberType } from \"utilities/src/format/types\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nexport function RemoveLiquidityReview({ onClose }) {\n  const { t } = useTranslation();\n  const { percent, positionInfo, unwrapNativeCurrency, currentTransactionStep, setCurrentTransactionStep } = useRemoveLiquidityModalContext();\n  const [steps, setSteps] = useState([]);\n  const removeLiquidityTxContext = useRemoveLiquidityTxContext();\n  const { formatCurrencyAmount, formatPercent } = useLocalizationContext();\n  const currency0FiatAmount = useUSDCValue(positionInfo?.currency0Amount) ?? void 0;\n  const currency1FiatAmount = useUSDCValue(positionInfo?.currency1Amount) ?? void 0;\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const account = useAccountMeta();\n  const dispatch = useDispatch();\n  const trace = useTrace();\n  const { txContext, gasFeeEstimateUSD } = removeLiquidityTxContext;\n  const onSuccess = () => {\n    setSteps([]);\n    setCurrentTransactionStep(void 0);\n    onClose();\n  };\n  const onFailure = () => {\n    setCurrentTransactionStep(void 0);\n  };\n  if (!positionInfo) {\n    throw new Error(\"RemoveLiquidityModal must have an initial state when opening\");\n  }\n  const { feeValue0, feeValue1, fiatFeeValue0, fiatFeeValue1 } = usePositionDerivedInfo(positionInfo);\n  const { currency0Amount, currency1Amount, chainId, feeTier, version, poolId } = positionInfo;\n  const currentPrice = usePositionCurrentPrice(positionInfo);\n  const currency0 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency0Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency\n  });\n  const currency1 = getCurrencyWithOptionalUnwrap({\n    currency: positionInfo?.currency1Amount.currency,\n    shouldUnwrap: unwrapNativeCurrency\n  });\n  const {\n    unwrappedCurrency0AmountToRemove,\n    unwrappedCurrency1AmountToRemove,\n    currency0AmountToRemove,\n    currency1AmountToRemove\n  } = useMemo(() => {\n    const unwrappedCurrency0AmountToRemove2 = CurrencyAmount.fromRawAmount(currency0, currency0Amount.quotient).multiply(percent).divide(100);\n    const unwrappedCurrency1AmountToRemove2 = CurrencyAmount.fromRawAmount(currency1, currency1Amount.quotient).multiply(percent).divide(100);\n    const currency0AmountToRemove2 = currency0Amount.multiply(percent).divide(100);\n    const currency1AmountToRemove2 = currency1Amount.multiply(percent).divide(100);\n    return {\n      unwrappedCurrency0AmountToRemove: unwrappedCurrency0AmountToRemove2,\n      unwrappedCurrency1AmountToRemove: unwrappedCurrency1AmountToRemove2,\n      currency0AmountToRemove: currency0AmountToRemove2,\n      currency1AmountToRemove: currency1AmountToRemove2\n    };\n  }, [currency0Amount, currency0, currency1Amount, currency1, percent]);\n  const currency0AmountToRemoveUSD = useUSDCValue(unwrappedCurrency0AmountToRemove);\n  const currency1AmountToRemoveUSD = useUSDCValue(unwrappedCurrency1AmountToRemove);\n  const newCurrency0Amount = currency0Amount.subtract(currency0AmountToRemove);\n  const newCurrency1Amount = currency1Amount.subtract(currency1AmountToRemove);\n  const newCurrency0AmountUSD = useUSDCValue(newCurrency0Amount);\n  const newCurrency1AmountUSD = useUSDCValue(newCurrency1Amount);\n  const poolTokenPercentage = useGetPoolTokenPercentage(positionInfo);\n  const currency0CurrencyInfo = useCurrencyInfo(currency0Amount.currency);\n  const currency1CurrencyInfo = useCurrencyInfo(currency1Amount.currency);\n  const onDecreaseLiquidity = () => {\n    const isValidTx = isValidLiquidityTxContext(txContext);\n    if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx || !positionInfo) {\n      return;\n    }\n    dispatch(\n      liquiditySaga.actions.trigger({\n        selectChain,\n        startChainId,\n        account,\n        liquidityTxContext: txContext,\n        setCurrentStep: setCurrentTransactionStep,\n        setSteps,\n        onSuccess,\n        onFailure,\n        analytics: {\n          ...getLPBaseAnalyticsProperties({\n            trace,\n            fee: feeTier,\n            poolId,\n            currency0,\n            currency1,\n            currency0AmountUsd: currency0AmountToRemoveUSD,\n            currency1AmountUsd: currency1AmountToRemoveUSD,\n            version\n          }),\n          expectedAmountBaseRaw: unwrappedCurrency0AmountToRemove?.quotient.toString() ?? \"-\",\n          expectedAmountQuoteRaw: unwrappedCurrency1AmountToRemove?.quotient.toString() ?? \"-\",\n          closePosition: percent === \"100\"\n        }\n      })\n    );\n  };\n  return <Flex gap=\"$gap16\">\r\n      <Flex gap=\"$gap16\" px=\"$padding16\">\r\n        <TokenInfo\n    currencyAmount={unwrappedCurrency0AmountToRemove}\n    currencyUSDAmount={currency0FiatAmount?.multiply(percent).divide(100)}\n  />\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          {t(\"common.and\")}\r\n        </Text>\r\n        <TokenInfo\n    currencyAmount={unwrappedCurrency1AmountToRemove}\n    currencyUSDAmount={currency1FiatAmount?.multiply(percent).divide(100)}\n  />\r\n        {positionInfo.version !== ProtocolVersion.V2 && <Flex p=\"$spacing16\" gap=\"$gap12\" background=\"$surface2\" borderRadius=\"$rounded12\">\r\n            <Text variant=\"body4\" color=\"$neutral2\">\r\n              {t(\"fee.uncollected\")}\r\n            </Text>\r\n\r\n            <Flex row alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                <CurrencyLogo currencyInfo={currency0CurrencyInfo} size={24} />\r\n                <Text variant=\"body3\">{currency0Amount.currency.symbol} fees</Text>\r\n              </Flex>\r\n              <Flex row alignItems=\"center\" gap=\"$spacing4\">\r\n                <Text variant=\"body3\">{formatCurrencyAmount({ value: feeValue0 })}</Text>{\" \"}\r\n                <Text variant=\"body3\" color=\"$neutral2\">\r\n                  ({formatCurrencyAmount({ value: fiatFeeValue0, type: NumberType.FiatTokenPrice })})\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n\r\n            <Flex row alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                <CurrencyLogo currencyInfo={currency1CurrencyInfo} size={24} />\r\n                <Text variant=\"body3\">{currency1Amount.currency.symbol} fees</Text>\r\n              </Flex>\r\n              <Flex row alignItems=\"center\" gap=\"$spacing4\">\r\n                <Text variant=\"body3\">{formatCurrencyAmount({ value: feeValue1 })}</Text>{\" \"}\r\n                <Text variant=\"body3\" color=\"$neutral2\">\r\n                  ({formatCurrencyAmount({ value: fiatFeeValue1, type: NumberType.FiatTokenPrice })})\r\n                </Text>\r\n              </Flex>\r\n            </Flex>\r\n          </Flex>}\r\n      </Flex>\r\n      {currentTransactionStep ? <ProgressIndicator steps={steps} currentStep={currentTransactionStep} /> : <>\r\n          <Separator mx=\"$padding16\" />\r\n          <Flex gap=\"$gap8\" px=\"$padding16\">\r\n            <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                    {t(\"common.rate\")}\r\n                  </Text>,\n      Value: () => <Text variant=\"body3\">{`1 ${currentPrice?.baseCurrency.symbol} = ${currentPrice?.toFixed()} ${currentPrice?.quoteCurrency.symbol}`}</Text>\n    }}\n  />\r\n            <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                    <Trans i18nKey=\"pool.newSpecificPosition\" values={{ symbol: currency0Amount.currency.symbol }} />\r\n                  </Text>,\n      Value: () => <Flex row gap=\"$gap4\">\r\n                    <Text variant=\"body3\">\r\n                      {formatCurrencyAmount({ value: newCurrency0Amount, type: NumberType.TokenNonTx })}{\" \"}\r\n                      {getSymbolDisplayText(newCurrency0Amount?.currency.symbol)}\r\n                    </Text>\r\n                    <Text variant=\"body3\" color=\"$neutral2\">\r\n                      {`(${formatCurrencyAmount({ value: newCurrency0AmountUSD, type: NumberType.FiatStandard })})`}\r\n                    </Text>\r\n                  </Flex>\n    }}\n  />\r\n            <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                    <Trans i18nKey=\"pool.newSpecificPosition\" values={{ symbol: currency1Amount.currency.symbol }} />\r\n                  </Text>,\n      Value: () => <Flex row gap=\"$gap4\">\r\n                    <Text variant=\"body3\">\r\n                      {formatCurrencyAmount({ value: newCurrency1Amount, type: NumberType.TokenNonTx })}{\" \"}\r\n                      {getSymbolDisplayText(newCurrency1Amount?.currency.symbol)}\r\n                    </Text>\r\n                    <Text variant=\"body3\" color=\"$neutral2\">\r\n                      {`(${formatCurrencyAmount({ value: newCurrency1AmountUSD, type: NumberType.FiatStandard })})`}\r\n                    </Text>\r\n                  </Flex>\n    }}\n  />\r\n            {poolTokenPercentage ? <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                      {t(\"addLiquidity.shareOfPool\")}\r\n                    </Text>,\n      Value: () => <Text variant=\"body3\">{formatPercent(poolTokenPercentage.toFixed())}</Text>\n    }}\n  /> : null}\r\n            <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                    {t(\"common.networkCost\")}\r\n                  </Text>,\n      Value: () => <Flex row gap=\"$gap4\" alignItems=\"center\">\r\n                    <NetworkLogo chainId={chainId} size={iconSizes.icon16} shape=\"square\" />\r\n                    <Text variant=\"body3\">\r\n                      {formatCurrencyAmount({ value: gasFeeEstimateUSD, type: NumberType.FiatGasPrice })}\r\n                    </Text>\r\n                  </Flex>\n    }}\n  />\r\n          </Flex>\r\n          <Flex row>\r\n            <Button size=\"large\" onPress={onDecreaseLiquidity}>\r\n              {t(\"common.confirm\")}\r\n            </Button>\r\n          </Flex>\r\n        </>}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { LiquidityModalDetailRows } from \"components/Liquidity/LiquidityModalDetailRows\";\nimport { LiquidityPositionInfo } from \"components/Liquidity/LiquidityPositionInfo\";\nimport { StyledPercentInput } from \"components/PercentInput\";\nimport {\n  DecreaseLiquidityStep,\n  useRemoveLiquidityModalContext\n} from \"components/RemoveLiquidity/RemoveLiquidityModalContext\";\nimport { useRemoveLiquidityTxContext } from \"components/RemoveLiquidity/RemoveLiquidityTxContext\";\nimport { canUnwrapCurrency } from \"pages/Pool/Positions/create/utils\";\nimport { ClickablePill } from \"pages/Swap/Buy/PredefinedAmount\";\nimport { NumericalInputMimic, NumericalInputSymbolContainer, NumericalInputWrapper } from \"pages/Swap/common/shared\";\nimport { useMemo } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Button, Flex, Switch, Text, useSporeColors } from \"ui/src\";\nimport { nativeOnChain } from \"uniswap/src/constants/tokens\";\nimport useResizeObserver from \"use-resize-observer\";\nconst isValidPercentageInput = (value) => {\n  const numValue = Number(value);\n  return !isNaN(numValue) && numValue <= 100;\n};\nexport function RemoveLiquidityForm() {\n  const hiddenObserver = useResizeObserver();\n  const { t } = useTranslation();\n  const colors = useSporeColors();\n  const { percent, positionInfo, setPercent, setStep, percentInvalid, unwrapNativeCurrency, setUnwrapNativeCurrency } = useRemoveLiquidityModalContext();\n  const { gasFeeEstimateUSD, txContext, error, refetch } = useRemoveLiquidityTxContext();\n  if (!positionInfo) {\n    throw new Error(\"RemoveLiquidityModal must have an initial state when opening\");\n  }\n  const { currency0Amount, currency1Amount } = positionInfo;\n  const canUnwrap0 = canUnwrapCurrency(currency0Amount.currency, positionInfo.version);\n  const canUnwrap1 = canUnwrapCurrency(currency1Amount.currency, positionInfo.version);\n  const nativeCurrency = nativeOnChain(positionInfo.chainId);\n  const canUnwrap = canUnwrap0 || canUnwrap1;\n  const unwrapUnderCard = useMemo(() => {\n    if (!canUnwrap) {\n      return null;\n    }\n    return <Flex\n      row\n      backgroundColor=\"$surface2\"\n      borderBottomLeftRadius=\"$rounded12\"\n      borderBottomRightRadius=\"$rounded12\"\n      justifyContent=\"space-between\"\n      alignItems=\"center\"\n      py=\"$padding8\"\n      px=\"$padding16\"\n    >\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          <Trans i18nKey=\"pool.withdrawAs\" values={{ nativeWrappedSymbol: nativeCurrency.symbol }} />\r\n        </Text>\r\n        <Switch\n      id=\"add-as-weth\"\n      checked={unwrapNativeCurrency}\n      onCheckedChange={() => setUnwrapNativeCurrency((unwrapNativeCurrency2) => !unwrapNativeCurrency2)}\n      variant=\"branded\"\n    />\r\n      </Flex>;\n  }, [canUnwrap, nativeCurrency, unwrapNativeCurrency, setUnwrapNativeCurrency]);\n  return <Flex gap=\"$gap24\">\r\n      {\n    /* Position info */\n  }\r\n      <Flex width=\"100%\" row justifyContent=\"flex-start\">\r\n        <LiquidityPositionInfo positionInfo={positionInfo} />\r\n      </Flex>\r\n      {\n    /* Percent input panel */\n  }\r\n      <Flex gap=\"$gap4\">\r\n        <Flex\n    backgroundColor=\"$surface2\"\n    borderTopLeftRadius=\"$rounded12\"\n    borderTopRightRadius=\"$rounded12\"\n    borderBottomLeftRadius={canUnwrap ? \"$rounded0\" : \"$rounded12\"}\n    borderBottomRightRadius={canUnwrap ? \"$rounded0\" : \"$rounded12\"}\n    p=\"$padding16\"\n    gap=\"$gap12\"\n  >\r\n          <Text variant=\"body3\" color=\"$neutral2\">\r\n            <Trans i18nKey=\"common.withdrawal.amount\" />\r\n          </Text>\r\n          <Flex row alignItems=\"center\" justifyContent=\"center\" width=\"100%\">\r\n            <NumericalInputWrapper width=\"100%\">\r\n              <StyledPercentInput\n    value={percent}\n    onUserInput={(value) => {\n      if (isValidPercentageInput(value)) {\n        setPercent(value);\n      }\n    }}\n    placeholder=\"0\"\n    $width={percent && hiddenObserver.width ? hiddenObserver.width + 1 : void 0}\n    maxDecimals={0}\n    maxLength={3}\n  />\r\n              <NumericalInputSymbolContainer showPlaceholder={!percent}>%</NumericalInputSymbolContainer>\r\n              <NumericalInputMimic ref={hiddenObserver.ref}>{percent}</NumericalInputMimic>\r\n            </NumericalInputWrapper>\r\n          </Flex>\r\n          <Flex row gap=\"$gap8\" width=\"100%\" justifyContent=\"center\">\r\n            {[25, 50, 75, 100].map((option) => {\n    const active = percent === option.toString();\n    const disabled = false;\n    return <ClickablePill\n      key={option}\n      onPress={() => {\n        setPercent(option.toString());\n      }}\n      $disabled={disabled}\n      $active={active}\n      customBorderColor={colors.surface3.val}\n      foregroundColor={colors[disabled ? \"neutral3\" : active ? \"neutral1\" : \"neutral2\"].val}\n      label={option < 100 ? option + \"%\" : t(\"swap.button.max\")}\n      px=\"$spacing16\"\n      textVariant=\"buttonLabel2\"\n    />;\n  })}\r\n          </Flex>\r\n        </Flex>\r\n        {unwrapUnderCard}\r\n      </Flex>\r\n      {\n    /* Detail rows */\n  }\r\n      <LiquidityModalDetailRows\n    currency0Amount={currency0Amount}\n    currency1Amount={currency1Amount}\n    networkCost={gasFeeEstimateUSD}\n  />\r\n      <ErrorCallout errorMessage={error} onPress={refetch} />\r\n      <Flex row>\r\n        <Button\n    isDisabled={percentInvalid || !txContext?.txRequest}\n    onPress={() => setStep(DecreaseLiquidityStep.Review)}\n    loading={!error && !percentInvalid && !txContext?.txRequest}\n    variant=\"branded\"\n    key=\"LoaderButton-animation-RemoveLiquidity-continue\"\n    size=\"large\"\n  >\r\n          {t(\"common.button.remove\")}\r\n        </Button>\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { LiquidityModalHeader } from \"components/Liquidity/LiquidityModalHeader\";\nimport {\n  DecreaseLiquidityStep,\n  RemoveLiquidityModalContextProvider,\n  useRemoveLiquidityModalContext\n} from \"components/RemoveLiquidity/RemoveLiquidityModalContext\";\nimport { RemoveLiquidityReview } from \"components/RemoveLiquidity/RemoveLiquidityReview\";\nimport { RemoveLiquidityTxContextProvider } from \"components/RemoveLiquidity/RemoveLiquidityTxContext\";\nimport { useModalState } from \"hooks/useModalState\";\nimport { useLPSlippageValue } from \"pages/Pool/Positions/create/hooks/useLPSlippageValues\";\nimport { RemoveLiquidityForm } from \"pages/RemoveLiquidity/RemoveLiquidityForm\";\nimport { useTranslation } from \"react-i18next\";\nimport { HeightAnimator } from \"ui/src\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { TransactionSettingsContextProvider } from \"uniswap/src/features/transactions/settings/contexts/TransactionSettingsContext\";\nimport { TransactionSettingKey } from \"uniswap/src/features/transactions/settings/slice\";\nfunction RemoveLiquidityModalInner() {\n  const { closeModal } = useModalState(ModalName.RemoveLiquidity);\n  const { t } = useTranslation();\n  const { step, setStep, positionInfo } = useRemoveLiquidityModalContext();\n  const autoSlippageTolerance = useLPSlippageValue(\n    positionInfo?.version,\n    positionInfo?.currency0Amount.currency,\n    positionInfo?.currency1Amount.currency\n  );\n  let modalContent;\n  switch (step) {\n    case DecreaseLiquidityStep.Input:\n      modalContent = <RemoveLiquidityForm />;\n      break;\n    case DecreaseLiquidityStep.Review:\n      modalContent = <RemoveLiquidityReview onClose={closeModal} />;\n      break;\n  }\n  return <TransactionSettingsContextProvider\n    settingKey={TransactionSettingKey.LP}\n    autoSlippageTolerance={autoSlippageTolerance}\n  >\r\n      <RemoveLiquidityTxContextProvider>\r\n        <Modal name={ModalName.RemoveLiquidity} onClose={closeModal} isDismissible gap=\"$gap24\" padding=\"$padding16\">\r\n          <LiquidityModalHeader\n    title={t(\"pool.removeLiquidity\")}\n    closeModal={closeModal}\n    goBack={step === DecreaseLiquidityStep.Review ? () => setStep(DecreaseLiquidityStep.Input) : void 0}\n  />\r\n          <HeightAnimator animation=\"fast\">{modalContent}</HeightAnimator>\r\n        </Modal>\r\n      </RemoveLiquidityTxContextProvider>\r\n    </TransactionSettingsContextProvider>;\n}\nexport function RemoveLiquidityModal() {\n  return <RemoveLiquidityModalContextProvider>\r\n      <RemoveLiquidityModalInner />\r\n    </RemoveLiquidityModalContextProvider>;\n}\n"],"names":["_ref","params","headers","rest","_objectWithoutProperties2","default","_excluded","queryKey","ReactQueryCacheKey","TradingApi","uniswapUrls","tradingApiPaths","lpApproval","useQuery","Object","assign","queryFn","_queryFn","_asyncToGenerator2","name","checkLpApproval","apply","arguments","_reactQuery","require","_urls","_TradingApiClient","_cache","deadlineInMinutes","decreaseLp","deadline","getTradeSettingsDeadline","paramsWithDeadline","decreaseLpPosition","_getTradeSettingsDeadline","RotateLeft","AnimatedRotateLeft","createIcon","getIcon","props","Svg","viewBox","fill","Path","d","_cn6","_cn5","_cn4","_cn3","_cn2","_cn","ErrorCallout","errorMessage","description","title","isWarning","action","pressIcon","size","color","onPress","t","useTranslation","div","className","concatClassName","AlertTriangleFilled","Text","variant","Boolean","TouchableArea","ClickableTamaguiStyle","mt","LiquidityModalDetailRows","currency0Amount","currency1Amount","networkCost","formatCurrencyAmount","useLocalizationContext","currency0Info","useCurrencyInfo","currency","currency1Info","DetailLineItem","LineItem","Label","Trans","i18nKey","values","symbol","Value","CurrencyLogo","currencyInfo","iconSizes","icon16","value","type","NumberType","TokenNonTx","NetworkLogo","chainId","shape","FiatGasPrice","LiquidityModalHeader","closeModal","goBack","CloseIconComponent","useMemo","ModalCloseIcon","testId","onClose","BackArrow","flexGrow","textAlign","pr","SwapFormSettings","adjustTopAlignment","settings","Slippage","Deadline","defaultTitle","TokenInfo","currencyAmount","currencyUSDAmount","isMigrating","getCurrencyForProtocol","ProtocolVersion","V4","getSymbolDisplayText","FiatStandard","icon36","PercentInput","forwardRef","onUserInput","placeholder","maxDecimals","ref","inputRegexStr","noDecimalRegexStr","inputRegex","RegExp","noDecimalRegex","locale","useCurrentLocale","valueFormattedWithLocale","value2","searchValue","replaceValue","localeUsesComma","toString","replace","formatValueWithLocale","StyledInput","minLength","maxLength","data-testid","onChange","event","nextUserInput","sanitizedInput","test","enforcer","target","inputMode","autoComplete","autoCorrect","pattern","spellCheck","displayName","MemoizedInput","React","StyledPercentInput","styled","$width","NumericalInputFontStyle","useLPSlippageValue","version","currencyA","currencyB","defaultSlippage","useDynamicConfigValue","DynamicConfigs","LPConfig","LPConfigKey","DefaultSlippage","v4SlippageOverride","V4SlippageOverride","isNativePool","isNative","DecreaseLiquidityStep","DecreaseLiquidityStep2","RemoveLiquidityModalContext","createContext","step","setStep","percent","setPercent","percentInvalid","unwrapNativeCurrency","setUnwrapNativeCurrency","currentTransactionStep","setCurrentTransactionStep","RemoveLiquidityModalContextProvider","children","useState","positionInfo","useModalLiquidityInitialState","ctx","Provider","useRemoveLiquidityModalContext","removeModalContext","useContext","Error","RemoveLiquidityTxContext","RemoveLiquidityTxContextProvider","account","removeLiquidityTxInfo","useAccountMeta","v2LpTokenApproval","feeValue0","feeValue1","decreaseCalldata","decreaseGasFeeUsd","customDeadline","customSlippageTolerance","useTransactionSettingsContext","hasDecreaseErrorResponse","setHasDecreaseErrorResponse","currency0","getCurrencyWithOptionalUnwrap","shouldUnwrap","currency1","v2LpTokenApprovalQueryParams","liquidityToken","liquidityAmount","protocol","ProtocolItems","V2","walletAddress","positionToken","address","positionAmount","multiply","JSBI","divide","quotient","data","isLoading","v2ApprovalLoading","error","approvalError","refetch","approvalRefetch","useCheckLpApprovalQuery","staleTime","ONE_SECOND_MS","enabled","logger","info","parseErrorMessageTitle","JSON","stringify","v2ApprovalGasFeeUSD","useUSDCurrencyAmountOfGasFee","gasFeePositionTokenApproval","approvalsNeeded","usePositionDerivedInfo","decreaseCalldataQueryParams","apiProtocolItems","getProtocolItems","simulateTransaction","tokenId","Number","liquidityPercentageToDecrease","liquidity0","liquidity1","positionLiquidity","liquidity","expectedTokenOwed0RawAmount","expectedTokenOwed1RawAmount","position","tickLower","tickUpper","pool","token0","ZERO_ADDRESS","token1","fee","feeTier","tickSpacing","hooks","v4hook","slippageTolerance","isUserCommittedToDecrease","TransactionStepType","DecreasePositionTransaction","decreaseCalldataLoading","calldataError","calldataRefetch","useDecreaseLpPositionCalldataQuery","refetchInterval","retry","useEffect","message","tags","file","function","sendAnalyticsEvent","InterfaceEventNameLocal","DecreaseLiquidityFailed","estimatedGasFee","useTransactionGasFee","decrease","gasFee","toSupportedChainId","gasFeeEstimateUSD","add","approvalLoading","getErrorMessageToDisplay","useRemoveLiquidityTxAndGasInfo","datadogEnabled","useFeatureFlag","FeatureFlags","Datadog","logContextUpdate","decreaseLiquidityTxContext","approvePositionTokenRequest","validateTransactionRequest","positionTokenApproval","txRequest","token0Amount","CurrencyAmount","fromRawAmount","token1Amount","currency0AmountToRemove","currency1AmountToRemove","LiquidityTransactionType","Decrease","protocolVersion","approveToken0Request","approveToken1Request","revokeToken0Request","revokeToken1Request","token0PermitTransaction","token1PermitTransaction","permit","txContext","useRemoveLiquidityTxContext","removeContext","_cn1","_cn0","_cn9","_cn8","_cn7","RemoveLiquidityReview","currency0FiatAmount","currency1FiatAmount","steps","setSteps","removeLiquidityTxContext","formatPercent","useUSDCValue","selectChain","useSelectChain","startChainId","useAccount","dispatch","useDispatch","trace","useTrace","onSuccess","onFailure","fiatFeeValue0","fiatFeeValue1","poolId","currentPrice","usePositionCurrentPrice","unwrappedCurrency0AmountToRemove","unwrappedCurrency1AmountToRemove","currency0AmountToRemoveUSD","currency1AmountToRemoveUSD","newCurrency0Amount","subtract","newCurrency1Amount","newCurrency0AmountUSD","newCurrency1AmountUSD","poolTokenPercentage","useGetPoolTokenPercentage","currency0CurrencyInfo","currency1CurrencyInfo","FiatTokenPrice","ProgressIndicator","currentStep","baseCurrency","toFixed","quoteCurrency","Button","onDecreaseLiquidity","isValidTx","isValidLiquidityTxContext","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","analytics","getLPBaseAnalyticsProperties","currency0AmountUsd","currency1AmountUsd","expectedAmountBaseRaw","expectedAmountQuoteRaw","closePosition","isValidPercentageInput","numValue","isNaN","RemoveLiquidityForm","hiddenObserver","useResizeObserver","colors","useSporeColors","canUnwrap0","canUnwrapCurrency","canUnwrap1","nativeCurrency","nativeOnChain","canUnwrap","unwrapUnderCard","nativeWrappedSymbol","Switch","id","checked","onCheckedChange","unwrapNativeCurrency2","LiquidityPositionInfo","NumericalInputWrapper","width","NumericalInputSymbolContainer","showPlaceholder","NumericalInputMimic","map","option","active","disabled","ClickablePill","$disabled","$active","customBorderColor","surface3","val","foregroundColor","label","px","textVariant","isDisabled","Review","loading","RemoveLiquidityModalInner","useModalState","ModalName","RemoveLiquidity","autoSlippageTolerance","modalContent","Input","TransactionSettingsContextProvider","settingKey","TransactionSettingKey","LP","Modal","isDismissible","gap","padding","HeightAnimator","animation","RemoveLiquidityModal"],"sourceRoot":""}