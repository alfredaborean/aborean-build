{"version":3,"file":"static/js/3546.41ff5554.chunk.js","mappings":"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","sources":["../packages/uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery.ts","webpack://@uniswap/interface/./src/pages/MigrateV3/index.tsx?56cc","webpack://@uniswap/interface/./src/components/Liquidity/TokenInfo.tsx?c202","webpack://@uniswap/interface/./src/components/Liquidity/LiquidityModalHeader.tsx?873b","../packages/uniswap/src/data/rest/getPosition.ts","components/Liquidity/LiquidityModalHeader.tsx","components/Liquidity/TokenInfo.tsx","pages/MigrateV3/MigrateV3LiquidityTxContext.tsx","pages/MigrateV3/index.tsx","pages/MigrateV3/hooks/useInitialPosition.ts","utils/unwrappedToken.ts"],"sourcesContent":["import { UseQueryResult, useQuery } from '@tanstack/react-query'\r\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\r\nimport { migrateLpPosition } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\r\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\r\nimport { MigrateLPPositionRequest, MigrateLPPositionResponse } from 'uniswap/src/data/tradingApi/__generated__'\r\nimport { ReactQueryCacheKey } from 'utilities/src/reactQuery/cache'\r\n\r\nexport function useMigrateV3LpPositionCalldataQuery({\r\n  params,\r\n  ...rest\r\n}: UseQueryApiHelperHookArgs<\r\n  MigrateLPPositionRequest,\r\n  MigrateLPPositionResponse\r\n>): UseQueryResult<MigrateLPPositionResponse> {\r\n  const queryKey = [ReactQueryCacheKey.TradingApi, uniswapUrls.tradingApiPaths.migrate, params]\r\n\r\n  return useQuery<MigrateLPPositionResponse>({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      if (!params) {\r\n        throw { name: 'Params are required' }\r\n      }\r\n      return await migrateLpPosition(params)\r\n    },\r\n    ...rest,\r\n  })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { useQuery } from \"@connectrpc/connect-query\";\nimport { getPosition } from \"@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery\";\nimport { uniswapGetTransport } from \"uniswap/src/data/rest/base\";\nexport function useGetPositionQuery(input) {\n  return useQuery(getPosition, input, { transport: uniswapGetTransport, enabled: !!input });\n}\n","\"use strict\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, ModalCloseIcon, Text, TouchableArea } from \"ui/src\";\nimport { BackArrow } from \"ui/src/components/icons/BackArrow\";\nimport { SwapFormSettings } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/SwapFormSettings\";\nimport { Deadline } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Deadline/Deadline\";\nimport { Slippage } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Slippage/Slippage\";\nexport function LiquidityModalHeader({\n  title,\n  closeModal,\n  goBack\n}) {\n  const { t } = useTranslation();\n  const CloseIconComponent = useMemo(\n    () => <ModalCloseIcon testId=\"LiquidityModalHeader-close\" onClose={closeModal} />,\n    [closeModal]\n  );\n  return <Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$spacing4\" width=\"100%\">\r\n      {goBack ? <TouchableArea onPress={goBack}>\r\n          <BackArrow color=\"$neutral1\" size=\"$icon.24\" />\r\n        </TouchableArea> : CloseIconComponent}\r\n      <Text variant=\"body2\" flexGrow={1} textAlign=\"center\" pr={24}>\r\n        {title}\r\n      </Text>\r\n      {!goBack ? <SwapFormSettings\n    adjustTopAlignment={false}\n    settings={[Slippage, Deadline]}\n    defaultTitle={t(\"pool.positions.transaction.settings\")}\n  /> : <Flex position=\"absolute\" top=\"0\" right=\"0\" p=\"$spacing4\">\r\n          {CloseIconComponent}\r\n        </Flex>}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport CurrencyLogo from \"components/Logo/CurrencyLogo\";\nimport { getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { Flex, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { getSymbolDisplayText } from \"uniswap/src/utils/currency\";\nimport { NumberType } from \"utilities/src/format/types\";\nexport function TokenInfo({\n  currencyAmount,\n  currencyUSDAmount,\n  isMigrating = false\n}) {\n  const { formatCurrencyAmount } = useLocalizationContext();\n  const currency = isMigrating ? getCurrencyForProtocol(currencyAmount?.currency, ProtocolVersion.V4) : currencyAmount?.currency;\n  return <Flex row alignItems=\"center\">\r\n      <Flex grow>\r\n        <Text variant=\"heading2\">\r\n          {formatCurrencyAmount({\n    value: currencyAmount,\n    type: NumberType.TokenNonTx\n  })}{\" \"}\r\n          {getSymbolDisplayText(currency?.symbol)}\r\n        </Text>\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          {formatCurrencyAmount({\n    value: currencyUSDAmount,\n    type: NumberType.FiatStandard\n  })}\r\n        </Text>\r\n      </Flex>\r\n      <CurrencyLogo currency={currency} size={iconSizes.icon36} />\r\n    </Flex>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { usePositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport { useCreatePositionContext, usePriceRangeContext } from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { getCurrencyAddressForTradingApi, getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { createContext, useContext, useEffect, useMemo, useState } from \"react\";\nimport { useCheckLpApprovalQuery } from \"uniswap/src/data/apiClients/tradingApi/useCheckLpApprovalQuery\";\nimport { useMigrateV3LpPositionCalldataQuery } from \"uniswap/src/data/apiClients/tradingApi/useMigrateV3LpPositionCalldataQuery\";\nimport {\n  ProtocolItems,\n  UniversalRouterVersion\n} from \"uniswap/src/data/tradingApi/__generated__\";\nimport { InterfaceEventNameLocal } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport {\n  LiquidityTransactionType\n} from \"uniswap/src/features/transactions/liquidity/types\";\nimport { getErrorMessageToDisplay, parseErrorMessageTitle } from \"uniswap/src/features/transactions/liquidity/utils\";\nimport { TransactionStepType } from \"uniswap/src/features/transactions/steps/types\";\nimport { PermitMethod } from \"uniswap/src/features/transactions/swap/types/swapTxAndGasInfo\";\nimport { validatePermit, validateTransactionRequest } from \"uniswap/src/features/transactions/swap/utils/trade\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nimport { useAccount } from \"wagmi\";\nconst MigrateV3PositionTxContext = createContext(void 0);\nexport function useMigrateV3TxContext() {\n  const context = useContext(MigrateV3PositionTxContext);\n  if (!context) {\n    throw new Error(\"useMigrateV3TxContext must be used within a MigrateV3PositionTxContextProvider\");\n  }\n  return context;\n}\nexport function MigrateV3PositionTxContextProvider({\n  children,\n  positionInfo\n}) {\n  const account = useAccount();\n  const [hasMigrateErrorResponse, setHasMigrateErrorResponse] = useState(false);\n  const { derivedPositionInfo, positionState, currentTransactionStep } = useCreatePositionContext();\n  const { feeValue0, feeValue1 } = usePositionDerivedInfo(positionInfo);\n  const {\n    derivedPriceRangeInfo,\n    priceRangeState: { fullRange }\n  } = usePriceRangeContext();\n  const increaseLiquidityApprovalParams = useMemo(() => {\n    if (!positionInfo || !account.address) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: true,\n      walletAddress: account.address,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      protocol: ProtocolItems.V3,\n      positionToken: positionInfo.tokenId\n    };\n  }, [positionInfo, account.address]);\n  const {\n    data: migrateTokenApprovals,\n    isLoading: approvalLoading,\n    error: approvalError,\n    refetch: approvalRefetch\n  } = useCheckLpApprovalQuery({\n    params: increaseLiquidityApprovalParams,\n    headers: {\n      \"x-universal-router-version\": UniversalRouterVersion._2_0\n    },\n    staleTime: 5 * ONE_SECOND_MS,\n    enabled: Boolean(increaseLiquidityApprovalParams)\n  });\n  if (approvalError) {\n    const message = parseErrorMessageTitle(approvalError, { defaultTitle: \"unknown CheckLpApprovalQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"MigrateV3LiquidityTxContext\",\n        function: \"useEffect\"\n      }\n    });\n  }\n  const approvalsNeeded = !approvalLoading && Boolean(migrateTokenApprovals?.permitData);\n  const migratePositionRequestArgs = useMemo(() => {\n    if (!derivedPositionInfo || !positionInfo || !positionInfo.tokenId || !account?.address || !derivedPriceRangeInfo || derivedPositionInfo.protocolVersion !== ProtocolVersion.V4 || derivedPriceRangeInfo.protocolVersion !== ProtocolVersion.V4 || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    const destinationPool = derivedPositionInfo.pool ?? derivedPriceRangeInfo.mockPool;\n    if (!destinationPool) {\n      return void 0;\n    }\n    const tickLower = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[0] : derivedPriceRangeInfo.ticks?.[0];\n    const tickUpper = fullRange ? derivedPriceRangeInfo.tickSpaceLimits[1] : derivedPriceRangeInfo.ticks?.[1];\n    if (tickLower === void 0 || tickUpper === void 0 || !positionInfo.pool || !positionInfo.liquidity) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: !approvalsNeeded,\n      inputProtocol: ProtocolItems.V3,\n      tokenId: Number(positionInfo.tokenId),\n      inputPosition: {\n        pool: {\n          token0: positionInfo.currency0Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency0Amount.currency.address,\n          token1: positionInfo.currency1Amount.currency.isNative ? ZERO_ADDRESS : positionInfo.currency1Amount.currency.address,\n          fee: positionInfo.feeTier ? Number(positionInfo.feeTier) : void 0,\n          tickSpacing: positionInfo?.tickSpacing ? Number(positionInfo?.tickSpacing) : void 0\n        },\n        tickLower: positionInfo.tickLower ? Number(positionInfo.tickLower) : void 0,\n        tickUpper: positionInfo.tickUpper ? Number(positionInfo.tickUpper) : void 0\n      },\n      inputPoolLiquidity: positionInfo.pool.liquidity.toString(),\n      inputCurrentTick: positionInfo.pool.tickCurrent,\n      inputSqrtRatioX96: positionInfo.pool.sqrtRatioX96?.toString(),\n      inputPositionLiquidity: positionInfo.liquidity,\n      outputProtocol: ProtocolItems.V4,\n      outputPosition: {\n        pool: {\n          token0: getCurrencyAddressForTradingApi(destinationPool.currency0),\n          token1: getCurrencyAddressForTradingApi(destinationPool.currency1),\n          fee: positionState.fee.feeAmount,\n          hooks: positionState.hook,\n          tickSpacing: destinationPool.tickSpacing\n        },\n        tickLower,\n        tickUpper\n      },\n      outputPoolLiquidity: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.liquidity.toString(),\n      outputSqrtRatioX96: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.sqrtRatioX96.toString(),\n      outputCurrentTick: derivedPositionInfo.creatingPoolOrPair ? void 0 : destinationPool.tickCurrent,\n      initialPrice: derivedPositionInfo.creatingPoolOrPair ? destinationPool.sqrtRatioX96.toString() : void 0,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      walletAddress: account.address,\n      expectedTokenOwed0RawAmount: feeValue0?.quotient.toString() ?? \"0\",\n      expectedTokenOwed1RawAmount: feeValue1?.quotient.toString() ?? \"0\",\n      amount0: positionInfo.currency0Amount.quotient.toString(),\n      amount1: positionInfo.currency1Amount.quotient.toString()\n    };\n  }, [\n    derivedPositionInfo,\n    positionInfo,\n    account,\n    derivedPriceRangeInfo,\n    fullRange,\n    positionState.fee.feeAmount,\n    positionState.hook,\n    feeValue0?.quotient,\n    feeValue1?.quotient,\n    approvalsNeeded\n  ]);\n  const isRangeValid = derivedPriceRangeInfo.protocolVersion !== ProtocolVersion.V2 && !derivedPriceRangeInfo.invalidPrice && !derivedPriceRangeInfo.invalidRange;\n  const isUserCommitedToMigrate = currentTransactionStep?.step.type === TransactionStepType.MigratePositionTransaction || currentTransactionStep?.step.type === TransactionStepType.MigratePositionTransactionAsync;\n  const isQueryEnabled = !isUserCommitedToMigrate && !approvalLoading && !approvalError && Boolean(migratePositionRequestArgs) && isRangeValid;\n  const {\n    data: migrateCalldata,\n    error: migrateError,\n    refetch: migrateRefetch\n  } = useMigrateV3LpPositionCalldataQuery({\n    params: migratePositionRequestArgs,\n    refetchInterval: hasMigrateErrorResponse ? false : 5 * ONE_SECOND_MS,\n    retry: false,\n    enabled: isQueryEnabled\n  });\n  useEffect(() => {\n    setHasMigrateErrorResponse(!!migrateError);\n  }, [migrateError, migratePositionRequestArgs]);\n  if (migrateError) {\n    const message = parseErrorMessageTitle(migrateError, { defaultTitle: \"unknown MigrateLpPositionCalldataQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"MigrateV3LiquidityTxContext\",\n        function: \"useEffect\"\n      }\n    });\n    sendAnalyticsEvent(InterfaceEventNameLocal.MigrateLiquidityFailed, {\n      message\n    });\n  }\n  const validatedValue = useMemo(() => {\n    if (!migrateCalldata) {\n      return void 0;\n    }\n    const validatedPermitRequest = validatePermit(migrateTokenApprovals?.permitData);\n    if (migrateTokenApprovals?.permitData && !validatedPermitRequest) {\n      return void 0;\n    }\n    const txRequest = validateTransactionRequest(migrateCalldata.migrate);\n    if (!txRequest) {\n      return void 0;\n    }\n    const outputAmount0 = CurrencyAmount.fromRawAmount(\n      getCurrencyForProtocol(positionInfo.currency0Amount.currency, ProtocolVersion.V4),\n      positionInfo.currency0Amount.quotient\n    );\n    const outputAmount1 = CurrencyAmount.fromRawAmount(\n      getCurrencyForProtocol(positionInfo.currency1Amount.currency, ProtocolVersion.V4),\n      positionInfo.currency1Amount.quotient\n    );\n    return {\n      type: LiquidityTransactionType.Migrate,\n      unsigned: Boolean(migrateTokenApprovals?.permitData),\n      migratePositionRequestArgs,\n      approveToken0Request: void 0,\n      approveToken1Request: void 0,\n      permit: validatedPermitRequest ? { method: PermitMethod.TypedData, typedData: validatedPermitRequest } : void 0,\n      protocolVersion: ProtocolVersion.V3,\n      approvePositionTokenRequest: void 0,\n      revokeToken0Request: void 0,\n      revokeToken1Request: void 0,\n      token0PermitTransaction: void 0,\n      token1PermitTransaction: void 0,\n      txRequest,\n      action: {\n        type: LiquidityTransactionType.Migrate,\n        currency0Amount: outputAmount0,\n        currency1Amount: outputAmount1\n      }\n    };\n  }, [\n    migrateCalldata,\n    migratePositionRequestArgs,\n    migrateTokenApprovals,\n    positionInfo.currency0Amount,\n    positionInfo.currency1Amount\n  ]);\n  return <MigrateV3PositionTxContext.Provider\n    value={{\n      txInfo: validatedValue,\n      error: getErrorMessageToDisplay({ approvalError, calldataError: migrateError }),\n      refetch: approvalError ? approvalRefetch : migrateError ? migrateRefetch : void 0\n    }}\n  >\r\n      {children}\r\n    </MigrateV3PositionTxContext.Provider>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { BreadcrumbNavContainer, BreadcrumbNavLink } from \"components/BreadcrumbNav\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { LiquidityModalHeader } from \"components/Liquidity/LiquidityModalHeader\";\nimport { LiquidityPositionCard } from \"components/Liquidity/LiquidityPositionCard\";\nimport { TokenInfo } from \"components/Liquidity/TokenInfo\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { parseRestPosition } from \"components/Liquidity/utils\";\nimport { LoadingRows } from \"components/Loader/styled\";\nimport { PoolProgressIndicator } from \"components/PoolProgressIndicator/PoolProgressIndicator\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { MigrateV3PositionTxContextProvider, useMigrateV3TxContext } from \"pages/MigrateV3/MigrateV3LiquidityTxContext\";\nimport useInitialPosition from \"pages/MigrateV3/hooks/useInitialPosition\";\nimport {\n  CreatePositionContextProvider,\n  DepositContextProvider,\n  PriceRangeContextProvider\n} from \"pages/Pool/Positions/create/ContextProviders\";\nimport {\n  DEFAULT_DEPOSIT_STATE,\n  DEFAULT_PRICE_RANGE_STATE,\n  useCreatePositionContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { EditSelectTokensStep } from \"pages/Pool/Positions/create/EditStep\";\nimport { SelectPriceRangeStep } from \"pages/Pool/Positions/create/RangeSelectionStep\";\nimport { SelectTokensStep } from \"pages/Pool/Positions/create/SelectTokenStep\";\nimport { useLPSlippageValue } from \"pages/Pool/Positions/create/hooks/useLPSlippageValues\";\nimport { Container } from \"pages/Pool/Positions/create/shared\";\nimport { DEFAULT_POSITION_STATE, PositionFlowStep } from \"pages/Pool/Positions/create/types\";\nimport { getCurrencyForProtocol } from \"pages/Pool/Positions/create/utils\";\nimport { LoadingRow } from \"pages/Pool/Positions/shared\";\nimport { useMemo, useState } from \"react\";\nimport { ChevronRight } from \"react-feather\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { MultichainContextProvider } from \"state/multichain/MultichainContext\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { PositionField } from \"types/position\";\nimport { Flex, Main, Text, styled, useMedia } from \"ui/src\";\nimport { ArrowDown } from \"ui/src/components/icons/ArrowDown\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nimport { INTERFACE_NAV_HEIGHT } from \"ui/src/theme/heights\";\nimport { ProgressIndicator } from \"uniswap/src/components/ConfirmSwapModal/ProgressIndicator\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { useGetPositionQuery } from \"uniswap/src/data/rest/getPosition\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { useUSDCValue } from \"uniswap/src/features/transactions/hooks/useUSDCPrice\";\nimport { isValidLiquidityTxContext } from \"uniswap/src/features/transactions/liquidity/types\";\nimport { TransactionSettingsContextProvider } from \"uniswap/src/features/transactions/settings/contexts/TransactionSettingsContext\";\nimport { TransactionSettingKey } from \"uniswap/src/features/transactions/settings/slice\";\nimport { currencyId, currencyIdToAddress } from \"uniswap/src/utils/currencyId\";\nimport { isSameAddress } from \"utilities/src/addresses\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nimport { useChainIdFromUrlParam } from \"utils/chainParams\";\nimport { useAccount } from \"wagmi\";\nconst BodyWrapper = styled(Main, {\n  backgroundColor: \"$surface1\",\n  display: \"flex\",\n  flexDirection: \"row\",\n  gap: 60,\n  mt: \"1rem\",\n  mx: \"auto\",\n  width: \"100%\",\n  zIndex: \"$default\",\n  p: 24\n});\nfunction MigrateV3Inner({ positionInfo }) {\n  const { chainName, tokenId } = useParams();\n  const trace = useTrace();\n  const { t } = useTranslation();\n  const { positionState, setPositionState, setStep, step, currentTransactionStep, setCurrentTransactionStep } = useCreatePositionContext();\n  const { protocolVersion } = positionState;\n  const { setPriceRangeState } = usePriceRangeContext();\n  const { setDepositState } = useDepositContext();\n  const [transactionSteps, setTransactionSteps] = useState([]);\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const account = useAccountMeta();\n  const dispatch = useDispatch();\n  const { txInfo, error, refetch } = useMigrateV3TxContext();\n  const media = useMedia();\n  const navigate = useNavigate();\n  const onClose = () => {\n    setCurrentTransactionStep(void 0);\n  };\n  const { currency0Amount, currency1Amount, owner } = positionInfo;\n  const currency0FiatAmount = useUSDCValue(currency0Amount) ?? void 0;\n  const currency1FiatAmount = useUSDCValue(currency1Amount) ?? void 0;\n  if (!isSameAddress(account?.address, owner)) {\n    navigate(\"/positions\");\n  }\n  return <>\r\n      <Flex mt=\"$spacing48\" gap=\"$gap36\">\r\n        <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\r\n          <BreadcrumbNavLink to=\"/positions\">\r\n            <Trans i18nKey=\"pool.positions.title\" /> <ChevronRight size={14} />\r\n          </BreadcrumbNavLink>\r\n          <BreadcrumbNavLink to={`/positions/v3/${chainName}/${tokenId}`}>\r\n            {currency0Amount.currency.symbol} / {currency1Amount.currency.symbol} <ChevronRight size={14} />\r\n          </BreadcrumbNavLink>\r\n        </BreadcrumbNavContainer>\r\n        <Flex row justifyContent=\"space-between\" alignItems=\"center\" gap=\"$gap20\" width=\"100%\">\r\n          <Text width=\"100%\" variant=\"heading2\">\r\n            <Trans i18nKey=\"common.migrate.position\" />\r\n          </Text>\r\n          <Flex\n    row\n    backgroundColor=\"$surface2\"\n    borderRadius=\"$rounded12\"\n    alignItems=\"center\"\n    justifyContent=\"center\"\n    gap=\"$gap4\"\n    py=\"$padding8\"\n    px=\"$padding12\"\n    {...ClickableTamaguiStyle}\n    onPress={() => {\n      setPositionState({\n        ...DEFAULT_POSITION_STATE,\n        protocolVersion,\n        currencyInputs: {\n          [PositionField.TOKEN0]: getCurrencyForProtocol(currency0Amount.currency, protocolVersion),\n          [PositionField.TOKEN1]: getCurrencyForProtocol(currency1Amount.currency, protocolVersion)\n        }\n      });\n      setPriceRangeState(DEFAULT_PRICE_RANGE_STATE);\n      setDepositState(DEFAULT_DEPOSIT_STATE);\n      setStep(PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER);\n    }}\n  >\r\n            <RotateLeft color=\"$neutral1\" size={16} />\r\n            <Text variant=\"buttonLabel4\" color=\"$neutral2\">\r\n              <Trans i18nKey=\"common.button.reset\" /> xxx\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        <Flex row gap={32} width=\"100%\">\r\n          {!media.xl && <Flex\n    width={360}\n    alignSelf=\"flex-start\"\n    $platform-web={{ position: \"sticky\", top: INTERFACE_NAV_HEIGHT + 25 }}\n  >\r\n              <PoolProgressIndicator\n    steps={[\n      { label: t(\"migrate.selectFeeTier\"), active: step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER },\n      { label: t(\"migrate.setRange\"), active: step === PositionFlowStep.PRICE_RANGE }\n    ]}\n  />\r\n            </Flex>}\r\n          <Flex gap=\"$gap16\" maxWidth=\"calc(min(580px, 90vw))\">\r\n            <LiquidityPositionCard liquidityPosition={positionInfo} disabled />\r\n            <Flex justifyContent=\"center\" alignItems=\"center\">\r\n              <Flex shrink backgroundColor=\"$surface2\" borderRadius=\"$rounded12\" p=\"$padding12\">\r\n                <ArrowDown size={20} color=\"$neutral1\" />\r\n              </Flex>\r\n            </Flex>\r\n            {step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER ? <SelectTokensStep\n    width=\"100%\"\n    maxWidth=\"unset\"\n    tokensLocked\n    onContinue={() => {\n      setStep(PositionFlowStep.PRICE_RANGE);\n    }}\n  /> : <EditSelectTokensStep width=\"100%\" maxWidth=\"unset\" />}\r\n            {step === PositionFlowStep.PRICE_RANGE && <>\r\n                <Container width=\"100%\" maxWidth=\"unset\">\r\n                  <SelectPriceRangeStep\n    positionInfo={positionInfo}\n    onDisableContinue={!txInfo || Boolean(error)}\n    onContinue={() => {\n      const isValidTx = isValidLiquidityTxContext(txInfo);\n      if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx) {\n        return;\n      }\n      dispatch(\n        liquiditySaga.actions.trigger({\n          selectChain,\n          startChainId,\n          account,\n          liquidityTxContext: txInfo,\n          setCurrentStep: setCurrentTransactionStep,\n          setSteps: setTransactionSteps,\n          onSuccess: () => {\n            onClose();\n            navigate(\"/positions\");\n          },\n          onFailure: onClose,\n          analytics: {\n            ...getLPBaseAnalyticsProperties({\n              trace,\n              fee: positionInfo.feeTier,\n              currency0: currency0Amount.currency,\n              currency1: currency1Amount.currency,\n              currency0AmountUsd: currency0FiatAmount,\n              currency1AmountUsd: currency1FiatAmount,\n              poolId: positionInfo.poolId,\n              version: ProtocolVersion.V3\n            }),\n            action: \"V3->V4\"\n          }\n        })\n      );\n    }}\n  />\r\n                </Container>\r\n                <Flex mb=\"$spacing20\">\r\n                  <ErrorCallout errorMessage={error} onPress={refetch} />\r\n                </Flex>\r\n              </>}\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n\r\n      <Modal\n    name={ModalName.MigrateLiquidity}\n    onClose={onClose}\n    isDismissible\n    isModalOpen={Boolean(currentTransactionStep)}\n  >\r\n        <LiquidityModalHeader title={t(\"pool.migrateLiquidity\")} closeModal={onClose} />\r\n        <Flex gap=\"$gap16\" px=\"$padding16\" my=\"$spacing8\">\r\n          <TokenInfo currencyAmount={currency0Amount} currencyUSDAmount={currency0FiatAmount} isMigrating />\r\n          <Text variant=\"body3\" color=\"$neutral2\">\r\n            {t(\"common.and\")}\r\n          </Text>\r\n          <TokenInfo currencyAmount={currency1Amount} currencyUSDAmount={currency1FiatAmount} isMigrating />\r\n        </Flex>\r\n        <ProgressIndicator steps={transactionSteps} currentStep={currentTransactionStep} />\r\n      </Modal>\r\n    </>;\n}\nexport default function MigrateV3() {\n  const { tokenId } = useParams();\n  const chainId = useChainIdFromUrlParam();\n  const account = useAccount();\n  const autoSlippageTolerance = useLPSlippageValue(ProtocolVersion.V3);\n  const { data, isLoading: positionLoading } = useGetPositionQuery(\n    account.address ? {\n      owner: account.address,\n      protocolVersion: ProtocolVersion.V3,\n      tokenId,\n      chainId: chainId ?? account.chainId\n    } : void 0\n  );\n  const position = data?.position;\n  const positionInfo = useMemo(() => parseRestPosition(position), [position]);\n  const initialPosition = useInitialPosition(positionInfo);\n  if (positionLoading || !position || !positionInfo || positionInfo.version !== ProtocolVersion.V3) {\n    return <BodyWrapper>\r\n        <LoadingRows>\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n          <LoadingRow />\r\n        </LoadingRows>\r\n      </BodyWrapper>;\n  }\n  const { currency0Amount, currency1Amount, feeTier } = positionInfo;\n  return <Trace\n    logImpression\n    page={InterfacePageNameLocal.MigrateV3}\n    properties={{\n      pool_address: positionInfo.poolId,\n      chain_id: chainId ?? account.chainId,\n      label: [currency0Amount.currency.symbol, currency1Amount.currency.symbol].join(\"/\"),\n      fee_tier: feeTier,\n      token0Address: currencyIdToAddress(currencyId(currency0Amount.currency)),\n      token1Address: currencyIdToAddress(currencyId(currency1Amount.currency))\n    }}\n  >\r\n      <MultichainContextProvider initialChainId={chainId}>\r\n        <TransactionSettingsContextProvider\n    settingKey={TransactionSettingKey.LP}\n    autoSlippageTolerance={autoSlippageTolerance}\n  >\r\n          <CreatePositionContextProvider\n    initialState={{\n      initialPosition,\n      currencyInputs: {\n        [PositionField.TOKEN0]: getCurrencyForProtocol(currency0Amount.currency, ProtocolVersion.V4),\n        [PositionField.TOKEN1]: getCurrencyForProtocol(currency1Amount.currency, ProtocolVersion.V4)\n      }\n    }}\n  >\r\n            <PriceRangeContextProvider>\r\n              <DepositContextProvider>\r\n                <MigrateV3PositionTxContextProvider positionInfo={positionInfo}>\r\n                  <MigrateV3Inner positionInfo={positionInfo} />\r\n                </MigrateV3PositionTxContextProvider>\r\n              </DepositContextProvider>\r\n            </PriceRangeContextProvider>\r\n          </CreatePositionContextProvider>\r\n        </TransactionSettingsContextProvider>\r\n      </MultichainContextProvider>\r\n    </Trace>;\n}\n","\"use strict\";\nimport { PositionStatus, ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { useMemo } from \"react\";\nimport { unwrappedToken } from \"utils/unwrappedToken\";\nexport default function useInitialPosition(positionInfo) {\n  return useMemo(() => {\n    if (!positionInfo) {\n      return void 0;\n    }\n    if (positionInfo.status !== PositionStatus.OUT_OF_RANGE) {\n      return void 0;\n    }\n    if (positionInfo.version !== ProtocolVersion.V3) {\n      return void 0;\n    }\n    if (!positionInfo.pool) {\n      return void 0;\n    }\n    const tickLower = Number(positionInfo.tickLower);\n    const tickUpper = Number(positionInfo.tickUpper);\n    const shouldFlip = unwrappedToken(positionInfo.pool.token1).isNative;\n    return {\n      tickLower: shouldFlip ? -tickUpper : tickLower,\n      tickUpper: shouldFlip ? -tickLower : tickUpper,\n      isOutOfRange: positionInfo.status === PositionStatus.OUT_OF_RANGE\n    };\n  }, [positionInfo]);\n}\n","\"use strict\";\nimport { WRAPPED_NATIVE_CURRENCY, nativeOnChain } from \"uniswap/src/constants/tokens\";\nexport function unwrappedToken(currency) {\n  if (currency.isNative) {\n    return currency;\n  }\n  if (WRAPPED_NATIVE_CURRENCY[currency.chainId]?.equals(currency)) {\n    return nativeOnChain(currency.chainId);\n  }\n  return currency;\n}\n"],"names":["_ref","params","rest","_objectWithoutProperties2","default","_excluded","queryKey","ReactQueryCacheKey","TradingApi","uniswapUrls","tradingApiPaths","migrate","useQuery","Object","assign","queryFn","_queryFn","_asyncToGenerator2","name","migrateLpPosition","apply","arguments","_reactQuery","require","_urls","_TradingApiClient","_cache","useGetPositionQuery","input","getPosition","transport","uniswapGetTransport","enabled","_cn2","_cn","LiquidityModalHeader","title","closeModal","goBack","t","useTranslation","CloseIconComponent","useMemo","ModalCloseIcon","testId","onClose","div","className","TouchableArea","onPress","BackArrow","color","size","Text","variant","flexGrow","textAlign","pr","SwapFormSettings","adjustTopAlignment","settings","Slippage","Deadline","defaultTitle","TokenInfo","currencyAmount","currencyUSDAmount","isMigrating","currency","formatCurrencyAmount","useLocalizationContext","getCurrencyForProtocol","ProtocolVersion","V4","value","type","NumberType","TokenNonTx","getSymbolDisplayText","symbol","FiatStandard","CurrencyLogo","iconSizes","icon36","MigrateV3PositionTxContext","createContext","MigrateV3PositionTxContextProvider","children","positionInfo","migrateTokenApprovals","feeValue0","feeValue1","currentTransactionStep","account","useAccount","hasMigrateErrorResponse","setHasMigrateErrorResponse","useState","derivedPositionInfo","positionState","useCreatePositionContext","usePositionDerivedInfo","derivedPriceRangeInfo","priceRangeState","fullRange","usePriceRangeContext","increaseLiquidityApprovalParams","address","simulateTransaction","walletAddress","chainId","currency0Amount","protocol","ProtocolItems","V3","positionToken","tokenId","data","isLoading","approvalLoading","error","approvalError","refetch","approvalRefetch","useCheckLpApprovalQuery","headers","UniversalRouterVersion","_2_0","staleTime","ONE_SECOND_MS","Boolean","message","parseErrorMessageTitle","logger","tags","file","function","approvalsNeeded","permitData","migratePositionRequestArgs","protocolVersion","pool","liquidity","destinationPool","mockPool","tickLower","tickSpaceLimits","ticks","tickUpper","inputProtocol","Number","inputPosition","token0","isNative","ZERO_ADDRESS","token1","currency1Amount","fee","feeTier","tickSpacing","inputPoolLiquidity","toString","inputCurrentTick","tickCurrent","inputSqrtRatioX96","sqrtRatioX96","inputPositionLiquidity","outputProtocol","outputPosition","getCurrencyAddressForTradingApi","currency0","currency1","feeAmount","hooks","hook","outputPoolLiquidity","creatingPoolOrPair","outputSqrtRatioX96","outputCurrentTick","initialPrice","expectedTokenOwed0RawAmount","quotient","expectedTokenOwed1RawAmount","amount0","amount1","isRangeValid","V2","invalidPrice","invalidRange","isQueryEnabled","step","TransactionStepType","MigratePositionTransaction","MigratePositionTransactionAsync","migrateCalldata","migrateError","migrateRefetch","useMigrateV3LpPositionCalldataQuery","refetchInterval","retry","useEffect","sendAnalyticsEvent","InterfaceEventNameLocal","MigrateLiquidityFailed","validatedValue","validatedPermitRequest","validatePermit","txRequest","validateTransactionRequest","outputAmount0","CurrencyAmount","fromRawAmount","outputAmount1","LiquidityTransactionType","Migrate","unsigned","approveToken0Request","approveToken1Request","permit","method","PermitMethod","TypedData","typedData","approvePositionTokenRequest","revokeToken0Request","revokeToken1Request","token0PermitTransaction","token1PermitTransaction","action","Provider","txInfo","getErrorMessageToDisplay","calldataError","_cn8","_cn7","_cn6","_cn5","_cn4","_cn3","BodyWrapper","styled","Main","backgroundColor","display","flexDirection","gap","mt","mx","width","zIndex","p","MigrateV3Inner","chainName","useParams","trace","useTrace","setPositionState","setStep","setCurrentTransactionStep","setPriceRangeState","setDepositState","useDepositContext","transactionSteps","setTransactionSteps","selectChain","useSelectChain","startChainId","useAccountMeta","dispatch","useDispatch","context","useContext","Error","useMigrateV3TxContext","media","useMedia","navigate","useNavigate","owner","currency0FiatAmount","useUSDCValue","currency1FiatAmount","isSameAddress","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","to","Trans","i18nKey","ChevronRight","Flex","row","borderRadius","alignItems","justifyContent","py","px","ClickableTamaguiStyle","DEFAULT_POSITION_STATE","currencyInputs","PositionField","TOKEN0","TOKEN1","DEFAULT_PRICE_RANGE_STATE","DEFAULT_DEPOSIT_STATE","PositionFlowStep","SELECT_TOKENS_AND_FEE_TIER","RotateLeft","xl","alignSelf","$platform-web","position","top","INTERFACE_NAV_HEIGHT","PoolProgressIndicator","steps","label","active","PRICE_RANGE","LiquidityPositionCard","liquidityPosition","disabled","ArrowDown","SelectTokensStep","maxWidth","tokensLocked","onContinue","EditSelectTokensStep","Container","SelectPriceRangeStep","onDisableContinue","isValidTx","isValidLiquidityTxContext","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","setSteps","onSuccess","onFailure","analytics","getLPBaseAnalyticsProperties","currency0AmountUsd","currency1AmountUsd","poolId","version","ErrorCallout","errorMessage","Modal","ModalName","MigrateLiquidity","isDismissible","isModalOpen","ProgressIndicator","currentStep","MigrateV3","useChainIdFromUrlParam","autoSlippageTolerance","useLPSlippageValue","positionLoading","parseRestPosition","initialPosition","status","PositionStatus","OUT_OF_RANGE","shouldFlip","unwrappedToken","isOutOfRange","useInitialPosition","LoadingRows","LoadingRow","Trace","logImpression","page","InterfacePageNameLocal","properties","pool_address","chain_id","join","fee_tier","token0Address","currencyIdToAddress","currencyId","token1Address","MultichainContextProvider","initialChainId","TransactionSettingsContextProvider","settingKey","TransactionSettingKey","LP","CreatePositionContextProvider","initialState","PriceRangeContextProvider","DepositContextProvider","WRAPPED_NATIVE_CURRENCY","equals","nativeOnChain"],"sourceRoot":""}