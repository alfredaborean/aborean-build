{"version":3,"file":"static/js/7576.db816806.chunk.js","mappings":"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","sources":["../packages/uniswap/src/extension/messagePassing/messageTypes.ts","../packages/uniswap/src/extension/messagePassing/platform.ts","../packages/uniswap/src/extension/messagePassing/types/requests.ts","webpack://@uniswap/interface/./src/pages/ExtensionPasskeyAuthPopUp/index.tsx?9630","pages/ExtensionPasskeyAuthPopUp/index.tsx","pages/ExtensionPasskeyAuthPopUp/useExternallyConnectableExtensionId.ts"],"sourcesContent":["import { z } from 'zod'\r\n\r\n// SCHEMAS\r\nexport const MessageSchema = z.object({})\r\n\r\n// TYPES\r\nexport type Message = z.infer<typeof MessageSchema>\r\n","import { z } from 'zod'\r\n\r\nexport type MessageParsers<T extends string, R extends { [key in T]: { type: key } }> = {\r\n  [key in T]: (message: unknown) => R[key]\r\n}\r\n\r\nexport function parseMessage<TSchema extends z.ZodTypeAny>(\r\n  message: unknown,\r\n  schema: TSchema,\r\n): z.infer<TSchema> | undefined {\r\n  try {\r\n    // The returned value will be properly typed according to the schema,\r\n    // but this type can be `any` if the schema passed in is defined as `any`.\r\n    // eslint-disable-next-line @typescript-eslint/no-unsafe-return\r\n    return schema.parse(message)\r\n  } catch (e) {\r\n    return undefined\r\n  }\r\n}\r\n","import { MessageSchema } from 'uniswap/src/extension/messagePassing/messageTypes'\r\nimport { z } from 'zod'\r\n\r\n// Requests from the Extension to the Interface (Web App) and vice versa\r\nexport enum ExtensionToInterfaceRequestType {\r\n  PasskeyRequest = 'PasskeyRequest',\r\n}\r\n\r\nexport const PasskeyRequestSchema = MessageSchema.extend({\r\n  type: z.literal(ExtensionToInterfaceRequestType.PasskeyRequest),\r\n  requestId: z.string(),\r\n  challengeJson: z.string(),\r\n})\r\nexport type PasskeyRequest = z.infer<typeof PasskeyRequestSchema>\r\n\r\n// Requests from the Interface (Web App) to the Extension\r\nexport enum InterfaceToExtensionRequestType {\r\n  PasskeySignInFlowOpened = 'PasskeySignInFlowOpened',\r\n  PasskeyCredentialRetrieved = 'PasskeyCredentialRetrieved',\r\n  PasskeyCredentialError = 'PasskeyCredentialError',\r\n}\r\nexport const PasskeySignInFlowOpenedSchema = MessageSchema.extend({\r\n  type: z.literal(InterfaceToExtensionRequestType.PasskeySignInFlowOpened),\r\n  requestId: z.string(),\r\n})\r\nexport type PasskeySignInFlowOpened = z.infer<typeof PasskeySignInFlowOpenedSchema>\r\n\r\nexport const PasskeyCredentialRetrievedSchema = MessageSchema.extend({\r\n  type: z.literal(InterfaceToExtensionRequestType.PasskeyCredentialRetrieved),\r\n  requestId: z.string(),\r\n  credential: z.string(),\r\n})\r\nexport type PasskeyCredentialRetrieved = z.infer<typeof PasskeyCredentialRetrievedSchema>\r\n\r\nexport const PasskeyCredentialErrorSchema = MessageSchema.extend({\r\n  type: z.literal(InterfaceToExtensionRequestType.PasskeyCredentialError),\r\n  requestId: z.string(),\r\n  error: z.string(),\r\n})\r\nexport type PasskeyCredentialError = z.infer<typeof PasskeyCredentialErrorSchema>\r\n","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { EnvelopeHeartIcon } from \"components/Icons/EnvelopeHeart\";\nimport { useExternallyConnectableExtensionId } from \"pages/ExtensionPasskeyAuthPopUp/useExternallyConnectableExtensionId\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useSearchParams } from \"react-router-dom\";\nimport { Anchor, Button, Flex, SpinningLoader, Text } from \"ui/src\";\nimport { Passkey } from \"ui/src/components/icons/Passkey\";\nimport { UniswapLogo } from \"ui/src/components/icons/UniswapLogo\";\nimport { uniswapUrls } from \"uniswap/src/constants/urls\";\nimport { parseMessage } from \"uniswap/src/extension/messagePassing/platform\";\nimport {\n  InterfaceToExtensionRequestType,\n  PasskeyRequestSchema\n} from \"uniswap/src/extension/messagePassing/types/requests\";\nimport { authenticatePasskey } from \"uniswap/src/features/passkey/passkey\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { ONE_SECOND_MS } from \"utilities/src/time/time\";\nimport { useTimeout } from \"utilities/src/time/timing\";\nconst EXTENSION_REFERRER_VERIFICATION_TIMEOUT = ONE_SECOND_MS * 3;\nvar ReferrerVerification = /* @__PURE__ */ ((ReferrerVerification2) => {\n  ReferrerVerification2[\"Verifying\"] = \"Verifying\";\n  ReferrerVerification2[\"Allowed\"] = \"Allowed\";\n  ReferrerVerification2[\"Denied\"] = \"Denied\";\n  return ReferrerVerification2;\n})(ReferrerVerification || {});\nexport default function ExtensionPasskeyAuthPopUp() {\n  const { t } = useTranslation();\n  const extensionId = useExternallyConnectableExtensionId();\n  const [signInAttemptStatus, setSignInAttemptStatus] = useState(\"Verifying\" /* Verifying */);\n  const [passkeyRequestData, setPasskeyRequestData] = useState(null);\n  const [searchParams] = useSearchParams();\n  useEffect(() => {\n    if (!chrome?.runtime) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"useEffect\", \"No `chrome.runtime` found\");\n      setSignInAttemptStatus(\"Denied\" /* Denied */);\n      return;\n    }\n    const requestId = searchParams.get(\"request_id\");\n    if (!requestId) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"useEffect\", \"No `request_id` found\");\n      setSignInAttemptStatus(\"Denied\" /* Denied */);\n      return;\n    }\n    const handleMessageRequestPasskey = async (message) => {\n      const parsedMessage = parseMessage(message, PasskeyRequestSchema);\n      if (!parsedMessage) {\n        setSignInAttemptStatus(\"Denied\" /* Denied */);\n        return;\n      }\n      logger.debug(\n        \"ExtensionPasskeySignIn.tsx\",\n        \"handleMessageRequestPasskey\",\n        `Message received: ${parsedMessage.type}`\n      );\n      setSignInAttemptStatus(\"Allowed\" /* Allowed */);\n      setPasskeyRequestData(parsedMessage);\n    };\n    logger.debug(\n      \"ExtensionPasskeySignIn.tsx\",\n      \"useEffect\",\n      `Sending PasskeySignInFlowOpened message to extension ID ${extensionId}`\n    );\n    chrome.runtime.sendMessage(\n      extensionId,\n      {\n        type: InterfaceToExtensionRequestType.PasskeySignInFlowOpened,\n        requestId\n      },\n      handleMessageRequestPasskey\n    );\n  }, []);\n  const onPressSignIn = async () => {\n    if (signInAttemptStatus !== \"Allowed\" /* Allowed */ || !passkeyRequestData) {\n      logger.debug(\"ExtensionPasskeySignIn.tsx\", \"onPressSignIn\", \"Invalid state\", {\n        signInAttemptStatus,\n        passkeyRequestData\n      });\n      return;\n    }\n    try {\n      const credential = await authenticatePasskey(passkeyRequestData.challengeJson);\n      if (!credential) {\n        logger.debug(\n          \"ExtensionPasskeySignIn.tsx\",\n          \"onPressSignIn\",\n          `Sending PasskeyCredentialError message to extension ID ${extensionId}`\n        );\n        chrome.runtime.sendMessage(extensionId, {\n          type: InterfaceToExtensionRequestType.PasskeyCredentialError,\n          requestId: passkeyRequestData.requestId,\n          error: \"No credential returned\"\n        });\n        return;\n      }\n      logger.debug(\n        \"ExtensionPasskeySignIn.tsx\",\n        \"onPressSignIn\",\n        `Sending PasskeyCredentialRetrieved message to extension ID ${extensionId}`\n      );\n      chrome.runtime.sendMessage(extensionId, {\n        type: InterfaceToExtensionRequestType.PasskeyCredentialRetrieved,\n        requestId: passkeyRequestData.requestId,\n        credential\n      });\n    } catch (error) {\n      logger.error(error, {\n        tags: {\n          file: \"ExtensionPasskeySignIn/index.tsx\",\n          function: \"onPressSignIn\"\n        }\n      });\n    }\n  };\n  useTimeout(() => {\n    setSignInAttemptStatus((currentStatus) => {\n      return currentStatus === \"Verifying\" /* Verifying */ ? \"Denied\" /* Denied */ : currentStatus;\n    });\n  }, EXTENSION_REFERRER_VERIFICATION_TIMEOUT);\n  return (\n    // TODO(WALL-6386): add InterfacePageName.EXTENSION_PASSKEY_SIGN_IN_PAGE to @uniswap/analytics-events\n    <Trace logImpression page=\"extension-passkey-sign-in-page\">\r\n      <Flex flexDirection=\"column\" alignItems=\"center\" justifyContent=\"center\" minHeight=\"100vh\">\r\n        <Flex width=\"400px\" padding=\"$spacing16\" flexDirection=\"column\" gap=\"$spacing16\">\r\n          <Flex row justifyContent=\"flex-end\">\r\n            <Flex row width=\"fit-content\">\r\n              <Anchor target=\"_blank\" rel=\"noreferrer\" href={uniswapUrls.helpArticleUrls.passkeysInfo}>\r\n                <Button icon={<EnvelopeHeartIcon />} size=\"xxsmall\" emphasis=\"secondary\">\r\n                  {t(\"common.getHelp.button\")}\r\n                </Button>\r\n              </Anchor>\r\n            </Flex>\r\n          </Flex>\r\n\r\n          <Flex alignItems=\"center\">\r\n            <UniswapLogo size=\"$icon.40\" color=\"$accent1\" />\r\n          </Flex>\r\n\r\n          {signInAttemptStatus === \"Denied\" /* Denied */ ? <Flex alignItems=\"center\" px=\"$spacing60\">\r\n              <Text variant=\"body3\" textAlign=\"center\">\r\n                {\n      /* TODO(6376): confirm what we want this to say */\n    }\r\n                {t(\"extensionPasskeySignInPopUp.invalidReferrer\")}\r\n              </Text>\r\n            </Flex> : <>\r\n              <Flex alignItems=\"center\">\r\n                <Text variant=\"subheading1\">{t(\"nav.signIn.button\")}</Text>\r\n              </Flex>\r\n\r\n              <Flex alignItems=\"center\" px=\"$spacing60\">\r\n                <Text variant=\"body3\" textAlign=\"center\">\r\n                  {t(\"extensionPasskeySignInPopUp.description\")}\r\n                </Text>\r\n              </Flex>\r\n\r\n              <Flex row py=\"$spacing16\">\r\n                <Button\n      icon={signInAttemptStatus === \"Verifying\" /* Verifying */ ? <SpinningLoader /> : <Passkey />}\n      size=\"large\"\n      variant=\"branded\"\n      onPress={onPressSignIn}\n      isDisabled={signInAttemptStatus !== \"Allowed\" /* Allowed */}\n    >\r\n                  {signInAttemptStatus === \"Allowed\" /* Allowed */ ? t(\"nav.signIn.button\") : void 0}\r\n                </Button>\r\n              </Flex>\r\n            </>}\r\n        </Flex>\r\n      </Flex>\r\n    </Trace>\n  );\n}\n","\"use strict\";\nimport { DynamicConfigs, ExternallyConnectableExtensionConfigKey } from \"uniswap/src/features/gating/configs\";\nimport { useDynamicConfigValue } from \"uniswap/src/features/gating/hooks\";\nimport { TRUSTED_CHROME_EXTENSION_IDS } from \"utilities/src/environment/extensionId\";\nexport function useExternallyConnectableExtensionId() {\n  const extensionId = useDynamicConfigValue(\n    DynamicConfigs.ExternallyConnectableExtension,\n    ExternallyConnectableExtensionConfigKey.ExtensionId,\n    TRUSTED_CHROME_EXTENSION_IDS.prod\n  );\n  return extensionId;\n}\n"],"names":["_zod","require","exports","z","object","message","schema","parse","e","_messageTypes","ExtensionToInterfaceRequestType","InterfaceToExtensionRequestType","MessageSchema","extend","type","literal","PasskeyRequest","requestId","string","challengeJson","PasskeySignInFlowOpened","PasskeyCredentialRetrieved","credential","PasskeyCredentialError","error","_cn7","_cn6","_cn5","_cn4","_cn3","_cn2","_cn","EXTENSION_REFERRER_VERIFICATION_TIMEOUT","ONE_SECOND_MS","ExtensionPasskeyAuthPopUp","t","useTranslation","extensionId","useExternallyConnectableExtensionId","signInAttemptStatus","setSignInAttemptStatus","useState","passkeyRequestData","setPasskeyRequestData","searchParams","useSearchParams","useEffect","chrome","runtime","logger","debug","get","handleMessageRequestPasskey","parsedMessage","parseMessage","PasskeyRequestSchema","sendMessage","onPressSignIn","authenticatePasskey","tags","file","function","useTimeout","currentStatus","Trace","logImpression","page","div","className","Anchor","target","rel","href","uniswapUrls","helpArticleUrls","passkeysInfo","Button","icon","EnvelopeHeartIcon","size","emphasis","UniswapLogo","color","Text","variant","textAlign","SpinningLoader","Passkey","onPress","isDisabled","useDynamicConfigValue","DynamicConfigs","ExternallyConnectableExtension","ExternallyConnectableExtensionConfigKey","ExtensionId","TRUSTED_CHROME_EXTENSION_IDS","prod"],"sourceRoot":""}