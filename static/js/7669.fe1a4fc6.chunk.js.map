{"version":3,"file":"static/js/7669.fe1a4fc6.chunk.js","mappings":"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","sources":["../packages/uniswap/src/components/modals/InfoLinkModal.tsx","../packages/uniswap/src/features/testnets/TestnetModeModal.tsx"],"sourcesContent":["import { ReactNode } from 'react'\r\nimport { Button, Flex, Text, TouchableArea, isWeb, useSporeColors } from 'ui/src'\r\nimport { X } from 'ui/src/components/icons/X'\r\nimport { zIndexes } from 'ui/src/theme'\r\nimport { Modal } from 'uniswap/src/components/modals/Modal'\r\nimport { ModalProps } from 'uniswap/src/components/modals/ModalProps'\r\nimport { ModalNameType } from 'uniswap/src/features/telemetry/constants'\r\nimport { openURL } from 'uniswap/src/utils/link'\r\nimport { logger } from 'utilities/src/logger/logger'\r\n\r\ninterface InfoModalProps {\r\n  name: ModalNameType\r\n  isOpen: boolean\r\n  showCloseButton?: boolean\r\n  icon: ReactNode\r\n  title: string\r\n  description: string\r\n  buttonText: string\r\n  linkText?: string\r\n  linkUrl?: string\r\n  onDismiss?: () => void\r\n  onButtonPress?: () => void\r\n  onAnalyticsEvent?: () => void\r\n  height?: ModalProps['height']\r\n}\r\n\r\nexport function InfoLinkModal({\r\n  name,\r\n  isOpen,\r\n  showCloseButton,\r\n  icon,\r\n  title,\r\n  description,\r\n  buttonText,\r\n  linkText,\r\n  linkUrl,\r\n  onDismiss,\r\n  onButtonPress,\r\n  onAnalyticsEvent,\r\n  height,\r\n}: React.PropsWithChildren<InfoModalProps>): JSX.Element {\r\n  const colors = useSporeColors()\r\n\r\n  const openUniswapURL = async (): Promise<void> => {\r\n    if (!linkUrl) {\r\n      return\r\n    }\r\n\r\n    try {\r\n      await openURL(linkUrl)\r\n      onAnalyticsEvent?.()\r\n    } catch (error) {\r\n      logger.error(error, { tags: { file: 'InfoLinkModal.tsx', function: 'openUniswapURL' } })\r\n    }\r\n  }\r\n\r\n  return (\r\n    <Modal backgroundColor={colors.surface1.val} isModalOpen={isOpen} name={name} height={height} onClose={onDismiss}>\r\n      {showCloseButton && (\r\n        <TouchableArea\r\n          p=\"$spacing16\"\r\n          position=\"absolute\"\r\n          right={0}\r\n          top={0}\r\n          zIndex={zIndexes.default}\r\n          onPress={onDismiss}\r\n        >\r\n          {isWeb && <X color=\"$neutral2\" size=\"$icon.16\" />}\r\n        </TouchableArea>\r\n      )}\r\n      <Flex alignItems=\"center\" gap=\"$spacing8\" mx={isWeb ? '$none' : '$spacing36'} pt=\"$spacing16\">\r\n        {icon}\r\n        <Flex centered gap=\"$spacing8\" p=\"$spacing16\">\r\n          <Text color=\"$neutral1\" variant={isWeb ? 'subheading2' : 'subheading1'}>\r\n            {title}\r\n          </Text>\r\n          <Text color=\"$neutral2\" textAlign=\"center\" variant=\"body3\">\r\n            {description}\r\n          </Text>\r\n        </Flex>\r\n        <Flex row width=\"100%\">\r\n          <Button fill emphasis=\"secondary\" size=\"large\" onPress={onButtonPress}>\r\n            {buttonText}\r\n          </Button>\r\n        </Flex>\r\n        {linkText && linkUrl && (\r\n          <Flex row width=\"100%\">\r\n            <Button fill emphasis=\"text-only\" size=\"large\" onPress={openUniswapURL}>\r\n              {linkText}\r\n            </Button>\r\n          </Flex>\r\n        )}\r\n      </Flex>\r\n    </Modal>\r\n  )\r\n}\r\n","import { useTranslation } from 'react-i18next'\r\nimport { Flex } from 'ui/src'\r\nimport { Wrench } from 'ui/src/components/icons/Wrench'\r\nimport { InfoLinkModal } from 'uniswap/src/components/modals/InfoLinkModal'\r\nimport { ModalName } from 'uniswap/src/features/telemetry/constants'\r\n\r\ntype TestnetModeModalProps = {\r\n  isOpen: boolean\r\n  unsupported?: boolean\r\n  descriptionCopy?: string\r\n  showCloseButton?: boolean\r\n  onClose: () => void\r\n}\r\n\r\nexport type TestnetModeModalState = Omit<TestnetModeModalProps, 'onClose' | 'isOpen'>\r\n\r\nexport function TestnetModeModal({\r\n  isOpen,\r\n  descriptionCopy,\r\n  unsupported = false,\r\n  showCloseButton = false,\r\n  onClose,\r\n}: TestnetModeModalProps): JSX.Element {\r\n  const { t } = useTranslation()\r\n  return (\r\n    <InfoLinkModal\r\n      title={unsupported ? t('common.notSupported') : t('settings.setting.wallet.testnetMode.title')}\r\n      description={\r\n        descriptionCopy ?? unsupported ? t('testnet.unsupported') : t('settings.setting.wallet.testnetMode.description')\r\n      }\r\n      isOpen={isOpen}\r\n      buttonText={t('common.button.close')}\r\n      name={ModalName.TestnetMode}\r\n      icon={\r\n        <Flex centered backgroundColor=\"$surface3\" borderRadius=\"$rounded12\" p=\"$spacing12\">\r\n          <Wrench color=\"$neutral1\" size=\"$icon.24\" />\r\n        </Flex>\r\n      }\r\n      showCloseButton={showCloseButton}\r\n      height=\"max-content\"\r\n      onDismiss={onClose}\r\n      onButtonPress={onClose}\r\n    />\r\n  )\r\n}\r\n"],"names":["_ref","name","isOpen","showCloseButton","icon","title","description","buttonText","linkText","linkUrl","onDismiss","onButtonPress","onAnalyticsEvent","height","colors","useSporeColors","openUniswapURL","_ref2","_asyncToGenerator2","default","openURL","error","logger","tags","file","function","apply","arguments","_jsxRuntime","jsxs","_Modal","Modal","backgroundColor","surface1","val","isModalOpen","onClose","children","jsx","_src","TouchableArea","p","position","right","top","zIndex","zIndexes","onPress","isWeb","_X","X","color","size","Flex","alignItems","gap","mx","pt","centered","Text","variant","textAlign","row","width","Button","fill","emphasis","require","_theme","_link","_logger","descriptionCopy","_ref$unsupported","unsupported","_ref$showCloseButton","t","useTranslation","_InfoLinkModal","InfoLinkModal","ModalName","TestnetMode","borderRadius","_Wrench","Wrench","_reactI18next","_constants"],"sourceRoot":""}