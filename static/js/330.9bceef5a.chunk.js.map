{"version":3,"file":"static/js/330.9bceef5a.chunk.js","mappings":"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","sources":["../packages/uniswap/src/features/visibility/hooks/usePositionVisibilityCheck.ts","webpack://@uniswap/interface/./src/pages/Pool/Positions/PositionsHeader.tsx?b7d4","webpack://@uniswap/interface/./src/pages/Pool/Positions/TopPools.tsx?b160","webpack://@uniswap/interface/./src/pages/Pool/Positions/TopPoolsSection.tsx?375f","webpack://@uniswap/interface/./src/pages/Pool/index.tsx?e758","webpack://@uniswap/interface/./src/components/Liquidity/LpIncentiveClaimModal.tsx?513b","webpack://@uniswap/interface/./src/components/Liquidity/LpIncentiveRewardsCard.tsx?b4ae","webpack://@uniswap/interface/./src/pages/Pool/Positions/TopPoolsCard.tsx?1cad","webpack://@uniswap/interface/./src/components/AccountDrawer/MiniPortfolio/ExpandoRow.tsx?4f27","components/AccountDrawer/MiniPortfolio/ExpandoRow.tsx","hooks/useLpIncentivesClaim.ts","hooks/useLpIncentivesClaimData.ts","components/Liquidity/LpIncentiveClaimModal.tsx","components/Liquidity/hooks/LpIncentiveClaim/useFormattedTokenRewards.ts","components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimMutation.ts","components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimButtonConfig.ts","../packages/uniswap/src/data/rest/getPoolsRewards.ts","hooks/useLpIncentives.ts","hooks/useLpIncentivesTransactionState.ts","components/Liquidity/LpIncentiveRewardsCard.tsx","pages/Pool/Positions/PositionsHeader.tsx","pages/Pool/Positions/TopPoolsCard.tsx","pages/Pool/Positions/TopPoolsSection.tsx","pages/Pool/Positions/TopPools.tsx","pages/Pool/index.tsx"],"sourcesContent":["import { useSelector } from 'react-redux'\r\nimport { UniverseChainId } from 'uniswap/src/features/chains/types'\r\nimport { selectPositionsVisibility } from 'uniswap/src/features/visibility/selectors'\r\nimport { getUniquePositionId } from 'uniswap/src/features/visibility/utils'\r\nimport { UniswapRootState } from 'uniswap/src/state'\r\n\r\ntype VisibilityCheckParams = {\r\n  poolId: string\r\n  tokenId: string | undefined\r\n  chainId: UniverseChainId\r\n  isFlaggedSpam?: boolean\r\n}\r\n\r\nexport function usePositionVisibilityCheck(): (params: VisibilityCheckParams) => boolean {\r\n  const positionVisibilities = useSelector((state: UniswapRootState) => selectPositionsVisibility(state))\r\n\r\n  const isPositionVisible = ({ poolId, tokenId, chainId, isFlaggedSpam = false }: VisibilityCheckParams): boolean => {\r\n    const positionId = getUniquePositionId(poolId, tokenId, chainId)\r\n    const positionState = positionVisibilities[positionId]\r\n\r\n    if (positionState === undefined) {\r\n      // If undefined, default to visible unless flagged as spam by the API (i.e. the isHidden property on Position)\r\n      return !isFlaggedSpam\r\n    }\r\n\r\n    // Return the explicitly set visibility\r\n    return positionState.isVisible\r\n  }\r\n\r\n  return isPositionVisible\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Flex, HeightAnimator, Text } from \"ui/src\";\nimport { RotatableChevron } from \"ui/src/components/icons/RotatableChevron\";\nimport { useTimeout } from \"utilities/src/time/timing\";\nexport function ExpandoRow({ title, numItems, isExpanded, toggle, children, enableOverflow = false }) {\n  const { t } = useTranslation();\n  const titleWithFallback = title ?? t(\"common.hidden\");\n  const [allowOverflow, setAllowOverflow] = useState(false);\n  useTimeout(\n    () => {\n      if (enableOverflow && isExpanded) {\n        setAllowOverflow(true);\n      }\n    },\n    enableOverflow && isExpanded ? 300 : void 0\n  );\n  useEffect(() => {\n    if (!isExpanded) {\n      setAllowOverflow(false);\n    }\n  }, [isExpanded]);\n  if (numItems === 0) {\n    return null;\n  }\n  return <>\r\n      <Flex row justifyContent=\"space-between\" alignItems=\"center\" p=\"$spacing16\">\r\n        <Text variant=\"subheading2\" color=\"$neutral2\">{`${titleWithFallback} (${numItems})`}</Text>\r\n        <Button\n    fill={false}\n    icon={<RotatableChevron color=\"$neutral2\" animation=\"200ms\" direction={isExpanded ? \"up\" : \"down\"} />}\n    iconPosition=\"after\"\n    size=\"small\"\n    emphasis=\"secondary\"\n    onPress={toggle}\n  >\r\n          <Button.Text color=\"$neutral2\">{isExpanded ? t(\"common.hide.button\") : t(\"common.show.button\")}</Button.Text>\r\n        </Button>\r\n      </Flex>\r\n      <HeightAnimator open={isExpanded} overflow={allowOverflow ? \"visible\" : \"hidden\"}>\r\n        {children}\r\n      </HeightAnimator>\r\n    </>;\n}\n","\"use strict\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { useCallback } from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { lpIncentivesClaimSaga } from \"state/sagas/lp_incentives/lpIncentivesSaga\";\nexport function useLpIncentivesClaim() {\n  const dispatch = useDispatch();\n  const selectChain = useSelectChain();\n  return useCallback(\n    (params) => {\n      const wrappedSelectChain = async (chainId) => {\n        return selectChain(chainId);\n      };\n      dispatch(\n        lpIncentivesClaimSaga.actions.trigger({\n          ...params,\n          selectChain: wrappedSelectChain\n        })\n      );\n    },\n    [dispatch, selectChain]\n  );\n}\n","\"use strict\";\nimport { useCallback } from \"react\";\nimport { fetchClaimLpIncentiveRewards } from \"uniswap/src/data/apiClients/tradingApi/TradingApiClient\";\nexport function useLpIncentivesClaimData() {\n  return useCallback(\n    async ({\n      walletAddress,\n      chainId,\n      tokens,\n      distributor\n    }) => {\n      try {\n        const response = await fetchClaimLpIncentiveRewards({\n          walletAddress,\n          chainId,\n          tokens,\n          distributor,\n          simulateTransaction: true\n        });\n        return { data: response, error: null };\n      } catch (error) {\n        return { data: null, error: error instanceof Error ? error : new Error(\"Failed to fetch claim data\") };\n      }\n    },\n    []\n  );\n}\n","\"use strict\";\nimport { DialogV2 } from \"components/Dialog/DialogV2\";\nimport { useFormattedTokenRewards } from \"components/Liquidity/hooks/LpIncentiveClaim/useFormattedTokenRewards\";\nimport { useLpIncentiveClaimButtonConfig } from \"components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimButtonConfig\";\nimport { useLpIncentiveClaimMutation } from \"components/Liquidity/hooks/LpIncentiveClaim/useLpIncentiveClaimMutation\";\nimport { LP_INCENTIVES_REWARD_TOKEN } from \"components/LpIncentives/constants\";\nimport { useEffect, useState } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Flex, Image, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { InlineWarningCard } from \"uniswap/src/components/InlineWarningCard/InlineWarningCard\";\nimport { WarningSeverity } from \"uniswap/src/components/modals/WarningModal/types\";\nimport { ModalName, UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { useEvent } from \"utilities/src/react/hooks\";\nimport { didUserReject } from \"utils/swapErrorToUserReadableMessage\";\nexport function LpIncentiveClaimModal({\n  isOpen,\n  onClose,\n  onSuccess,\n  token = LP_INCENTIVES_REWARD_TOKEN,\n  tokenRewards,\n  isPendingTransaction = false,\n  iconUrl\n}) {\n  const [error, setError] = useState(null);\n  const { t } = useTranslation();\n  const formattedTokenRewards = useFormattedTokenRewards({ tokenRewards, token });\n  const { mutate: claim, isPending } = useLpIncentiveClaimMutation({\n    token,\n    onSuccess,\n    onClose,\n    onError: (error2) => {\n      if (didUserReject(error2)) {\n        return;\n      }\n      logger.error(error2, {\n        tags: {\n          file: \"LpIncentiveClaimModal\",\n          function: \"useLpIncentiveClaimMutation\"\n        }\n      });\n      setError(t(\"pool.incentives.collectFailed\"));\n    }\n  });\n  const handleClaim = useEvent(({ skipAnalytics = false } = {}) => {\n    if (!skipAnalytics) {\n      sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsRetry);\n    }\n    setError(null);\n    claim();\n  });\n  useEffect(() => {\n    if (isOpen && !isPendingTransaction) {\n      handleClaim({ skipAnalytics: true });\n    }\n  }, [isOpen, isPendingTransaction, handleClaim]);\n  const buttonConfig = useLpIncentiveClaimButtonConfig({\n    isLoading: isPending,\n    isPendingTransaction,\n    onClaim: () => handleClaim()\n    // Don't skip analytics for manual claim\n  });\n  return <DialogV2\n    isOpen={isOpen}\n    icon={iconUrl ? <Image src={iconUrl} width={iconSizes.icon48} height={iconSizes.icon48} objectFit=\"cover\" /> : void 0}\n    title={t(\"pool.incentives.collectingRewards\")}\n    subtext={<Flex gap=\"$spacing4\">\r\n          <Flex row alignItems=\"center\" justifyContent=\"center\" gap=\"$spacing4\">\r\n            <Text variant=\"body2\">{`${formattedTokenRewards} ${token.symbol}`}</Text>\r\n          </Flex>\r\n          {error && <Flex mt=\"$spacing6\">\r\n              <InlineWarningCard\n      severity={WarningSeverity.Medium}\n      description={t(\"pool.incentives.collectFailed\")}\n      hideCtaIcon\n    />\r\n            </Flex>}\r\n        </Flex>}\n    displayHelpCTA\n    onClose={onClose}\n    primaryButtonOnClick={buttonConfig.onClick}\n    isPrimaryButtonLoading={buttonConfig.isLoading}\n    modalName={ModalName.LpIncentiveClaimModal}\n    primaryButtonText={buttonConfig.title}\n  />;\n}\n","\"use strict\";\nimport { formatTokenAmount } from \"components/Liquidity/utils\";\nimport { useMemo } from \"react\";\nexport function useFormattedTokenRewards({ tokenRewards, token }) {\n  return useMemo(() => {\n    return formatTokenAmount(tokenRewards, token.decimals);\n  }, [tokenRewards, token.decimals]);\n}\n","\"use strict\";\nimport { useMutation } from \"@tanstack/react-query\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentivesClaim } from \"hooks/useLpIncentivesClaim\";\nimport { useLpIncentivesClaimData } from \"hooks/useLpIncentivesClaimData\";\nimport { Distributor } from \"uniswap/src/data/tradingApi/__generated__\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nexport function useLpIncentiveClaimMutation({ token, onSuccess, onClose, onError }) {\n  const account = useAccount();\n  const { address, chainId } = account;\n  const lpIncentivesClaim = useLpIncentivesClaim();\n  const lpIncentivesClaimData = useLpIncentivesClaimData();\n  return useMutation({\n    mutationFn: async () => {\n      if (!address || !chainId) {\n        throw new Error(\"No wallet address available\");\n      }\n      const { data, error } = await lpIncentivesClaimData({\n        walletAddress: address,\n        chainId: token.chainId,\n        tokens: [token.address],\n        distributor: Distributor.MERKL\n      });\n      if (error) {\n        sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsErrorThrown, {\n          error: error.message ?? \"Lp Incentive claim rewards error\"\n        });\n        throw error;\n      }\n      if (!data) {\n        throw new Error(\"No claim data available\");\n      }\n      return new Promise((resolve, reject) => {\n        lpIncentivesClaim({\n          account: { type: AccountType.SignerMnemonic, address },\n          claimData: data,\n          chainId,\n          tokenAddress: token.address,\n          onSuccess: () => {\n            resolve();\n          },\n          onFailure: (error2) => {\n            reject(error2);\n          },\n          setCurrentStep: () => {\n          }\n          // Optional: Add step tracking if needed\n        });\n      });\n    },\n    onSuccess: () => {\n      onSuccess?.();\n      onClose?.();\n    },\n    onError: (error) => {\n      onError?.(error);\n    }\n  });\n}\n","\"use strict\";\nimport { DialogButtonType } from \"components/Dialog/Dialog\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nexport function useLpIncentiveClaimButtonConfig({\n  isLoading,\n  isPendingTransaction,\n  onClaim\n}) {\n  const { t } = useTranslation();\n  return useMemo(() => {\n    if (isLoading) {\n      return {\n        title: t(\"common.confirmWallet\"),\n        onClick: () => {\n        },\n        isLoading: true\n      };\n    }\n    if (isPendingTransaction) {\n      return {\n        title: t(\"common.transactionPending\"),\n        onClick: () => {\n        },\n        isLoading: true\n      };\n    }\n    return {\n      title: t(\"pool.incentives.collect\"),\n      type: DialogButtonType.Accent,\n      onClick: onClaim,\n      isLoading\n    };\n  }, [onClaim, isLoading, isPendingTransaction, t]);\n}\n","\"use strict\";\nimport { useQuery } from \"@connectrpc/connect-query\";\nimport { getRewards } from \"@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery\";\nimport { uniswapGetTransport } from \"uniswap/src/data/rest/base\";\nexport function useGetPoolsRewards(input, enabled = true) {\n  return useQuery(getRewards, input, { transport: uniswapGetTransport, enabled });\n}\n","\"use strict\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentivesTransactionState } from \"hooks/useLpIncentivesTransactionState\";\nimport { useAtom } from \"jotai\";\nimport { atomWithStorage } from \"jotai/utils\";\nimport { useCallback, useState } from \"react\";\nimport { useGetPoolsRewards } from \"uniswap/src/data/rest/getPoolsRewards\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nexport const lpIncentivesLastClaimedAtom = atomWithStorage(\n  \"lpIncentivesLastClaimed\",\n  null\n);\nexport function useLpIncentives() {\n  const isPendingTransaction = useLpIncentivesTransactionState();\n  const [isModalOpen, setIsModalOpen] = useState(false);\n  const [tokenRewards, setTokenRewards] = useState(\"0\");\n  const [hasCollectedRewards, setHasCollectedRewards] = useState(false);\n  const account = useAccount();\n  const [, setLastClaimed] = useAtom(lpIncentivesLastClaimedAtom);\n  const { refetch } = useGetPoolsRewards(\n    { walletAddress: account?.address, chainIds: [UniverseChainId.Mainnet], reload: true },\n    false\n  );\n  const onTransactionSuccess = useCallback(async () => {\n    setIsModalOpen(false);\n    setHasCollectedRewards(true);\n    if (account?.address) {\n      try {\n        const { data: rewardsData } = await refetch();\n        const rewardsAmount = rewardsData?.totalUnclaimedAmountUni;\n        if (rewardsAmount && rewardsAmount !== \"0\") {\n          setLastClaimed({ timestamp: Date.now(), amount: rewardsAmount });\n        } else {\n          setLastClaimed(null);\n        }\n      } catch (error) {\n        setLastClaimed(null);\n      }\n    }\n  }, [refetch, account?.address, setLastClaimed]);\n  const openModal = useCallback(() => {\n    setIsModalOpen(true);\n  }, []);\n  const closeModal = useCallback(() => {\n    setIsModalOpen(false);\n  }, []);\n  return {\n    isPendingTransaction,\n    isModalOpen,\n    tokenRewards,\n    openModal,\n    closeModal,\n    setTokenRewards,\n    onTransactionSuccess,\n    hasCollectedRewards\n  };\n}\n","\"use strict\";\nimport { useEffect, useState } from \"react\";\nimport { usePendingTransactions } from \"state/transactions/hooks\";\nimport { TransactionType } from \"state/transactions/types\";\nexport function useLpIncentivesTransactionState() {\n  const [isPendingTransaction, setIsPendingTransaction] = useState(false);\n  const pendingTransactions = usePendingTransactions();\n  useEffect(() => {\n    const hasPendingClaim = pendingTransactions.some(\n      (tx) => tx.info.type === TransactionType.LP_INCENTIVES_CLAIM_REWARDS\n    );\n    setIsPendingTransaction(hasPendingClaim);\n  }, [pendingTransactions]);\n  return isPendingTransaction;\n}\n","\"use strict\";\nimport dottedBackgroundDark from \"assets/images/dotted-grid-dark.png\";\nimport dottedBackground from \"assets/images/dotted-grid.png\";\nimport tokenLogo from \"assets/images/token-logo.png\";\nimport { formatTokenAmount } from \"components/Liquidity/utils\";\nimport { LP_INCENTIVES_REWARD_TOKEN } from \"components/LpIncentives/constants\";\nimport { lpIncentivesLastClaimedAtom } from \"hooks/useLpIncentives\";\nimport { useAtom } from \"jotai\";\nimport ms from \"ms\";\nimport { useEffect, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport {\n  Button,\n  Flex,\n  FlexLoader,\n  Image,\n  Skeleton,\n  Text,\n  TouchableArea,\n  useIsDarkMode,\n  useMedia,\n  useShadowPropsMedium,\n  useShadowPropsShort\n} from \"ui/src\";\nimport { ArrowRight } from \"ui/src/components/icons/ArrowRight\";\nimport { InfoCircleFilled } from \"ui/src/components/icons/InfoCircleFilled\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { LearnMoreLink } from \"uniswap/src/components/text/LearnMoreLink\";\nimport { InfoTooltip } from \"uniswap/src/components/tooltip/InfoTooltip\";\nimport { uniswapUrls } from \"uniswap/src/constants/urls\";\nimport { useGetPoolsRewards } from \"uniswap/src/data/rest/getPoolsRewards\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nimport { Trace } from \"uniswap/src/features/telemetry/Trace\";\nimport { UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { isMobileWeb } from \"utilities/src/platform\";\nconst FIVE_MINUTES_MS = ms(\"5m\");\nfunction LpIncentiveRewardsCard({\n  onCollectRewards,\n  token = LP_INCENTIVES_REWARD_TOKEN,\n  walletAddress,\n  chainIds = [UniverseChainId.Mainnet],\n  setTokenRewards,\n  initialHasCollectedRewards\n}) {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const shadowPropsShort = useShadowPropsShort();\n  const shadowPropsMedium = useShadowPropsMedium();\n  const isDarkMode = useIsDarkMode();\n  const media = useMedia();\n  const isSmallScreen = media.sm;\n  const {\n    data: rewardsData,\n    isLoading,\n    error\n  } = useGetPoolsRewards({ walletAddress, chainIds }, Boolean(walletAddress));\n  const [lastClaimed, setLastClaimed] = useAtom(lpIncentivesLastClaimedAtom);\n  const effectivelyClaimed = useMemo(() => {\n    if (initialHasCollectedRewards) {\n      return true;\n    }\n    if (!lastClaimed || !rewardsData?.totalUnclaimedAmountUni) {\n      return false;\n    }\n    const timeDiff = Date.now() - lastClaimed.timestamp;\n    return timeDiff < FIVE_MINUTES_MS && rewardsData.totalUnclaimedAmountUni === lastClaimed.amount;\n  }, [initialHasCollectedRewards, lastClaimed, rewardsData?.totalUnclaimedAmountUni]);\n  const { lpIncentiveRewards, userHasRewards } = useMemo(() => {\n    if (effectivelyClaimed) {\n      return {\n        lpIncentiveRewards: \"0\",\n        userHasRewards: false\n      };\n    }\n    const threshold = BigInt(10) ** BigInt(token.decimals - 3);\n    const rewards = rewardsData?.totalUnclaimedAmountUni ?? \"0\";\n    return {\n      lpIncentiveRewards: formatTokenAmount(rewards, token.decimals),\n      userHasRewards: BigInt(rewards) >= threshold\n      // Returns true if rewards are at least 0.001 ABX\n    };\n  }, [effectivelyClaimed, rewardsData?.totalUnclaimedAmountUni, token.decimals]);\n  const isCollectButtonDisabled = useMemo(() => Boolean(!userHasRewards || error), [userHasRewards, error]);\n  useEffect(() => {\n    if (effectivelyClaimed) {\n      setTokenRewards(\"0\");\n      return;\n    }\n    const rewards = rewardsData?.totalUnclaimedAmountUni ?? \"0\";\n    setTokenRewards(rewards);\n  }, [rewardsData?.totalUnclaimedAmountUni, setTokenRewards, effectivelyClaimed]);\n  useEffect(() => {\n    if (lastClaimed && Date.now() - lastClaimed.timestamp > FIVE_MINUTES_MS) {\n      setLastClaimed(null);\n    }\n  }, [lastClaimed, setLastClaimed]);\n  const renderRewardsAmount = () => {\n    if (isLoading) {\n      return <Skeleton>\r\n          <FlexLoader\n        borderRadius=\"$rounded4\"\n        height={isSmallScreen ? 20 : 36}\n        opacity={0.4}\n        width={isSmallScreen ? 46 : 100}\n        marginBottom=\"$spacing4\"\n      />\r\n        </Skeleton>;\n    }\n    if (error) {\n      return <Text variant={isSmallScreen ? \"subheading1\" : \"heading2\"} color=\"$neutral1\">\r\n          -\r\n        </Text>;\n    }\n    return <Text variant={isSmallScreen ? \"subheading1\" : \"heading2\"} color={userHasRewards ? \"$accent1\" : \"$neutral1\"}>\r\n        {lpIncentiveRewards} {token.symbol}\r\n      </Text>;\n  };\n  return <TouchableArea group cursor=\"default\">\r\n      <Flex\n    height={isSmallScreen ? 142 : 192}\n    p={isSmallScreen ? \"$spacing16\" : \"$spacing24\"}\n    justifyContent=\"space-between\"\n    backgroundColor=\"$surface2\"\n    borderWidth={1}\n    borderColor=\"$surface3\"\n    borderRadius=\"$rounded20\"\n    overflow=\"hidden\"\n    transition=\"all 0.2s ease-out\"\n    $group-hover={shadowPropsMedium[\"$platform-web\"]}\n    {...shadowPropsShort}\n  >\r\n        <Flex\n    position=\"absolute\"\n    top={0}\n    left={0}\n    right={0}\n    bottom={0}\n    background={`url(${isDarkMode ? dottedBackground : dottedBackgroundDark})`}\n    backgroundPosition=\"center\"\n    backgroundSize=\"100% 100%\"\n    backgroundRepeat=\"no-repeat\"\n    transition=\"transform 0.2s ease-out\"\n    $group-hover={{ transform: \"scale(1.2)\" }}\n  />\r\n        <Flex row justifyContent=\"space-between\">\r\n          <Flex width=\"100%\" gap=\"$spacing2\">\r\n            <Flex row justifyContent=\"space-between\">\r\n              <Flex row gap=\"$spacing8\" alignItems=\"center\">\r\n                {renderRewardsAmount()}\r\n                {!error && <Image\n    src={tokenLogo}\n    width={isSmallScreen ? 24 : 28}\n    height={isSmallScreen ? 24 : 28}\n    objectFit=\"cover\"\n  />}\r\n              </Flex>\r\n              <Button\n    emphasis=\"primary\"\n    size={isSmallScreen ? \"xxsmall\" : \"small\"}\n    maxWidth=\"fit-content\"\n    onPress={onCollectRewards}\n    borderColor={isCollectButtonDisabled ? \"$neutral3\" : \"unset\"}\n    isDisabled={isCollectButtonDisabled}\n  >\r\n                {t(\"pool.incentives.collectRewards\")}\r\n              </Button>\r\n            </Flex>\r\n            <Flex row gap=\"$spacing6\">\r\n              <Text variant={isSmallScreen ? \"body4\" : \"body3\"} color=\"$neutral2\">\r\n                {error ? t(\"pool.incentives.yourRewards.error\") : t(\"pool.incentives.rewardsEarned\")}\r\n              </Text>\r\n              {!isMobileWeb && <InfoTooltip\n    placement=\"top\"\n    trigger={<TouchableArea>\r\n                      <InfoCircleFilled color=\"$neutral3\" size=\"$icon.16\" />\r\n                    </TouchableArea>}\n    text={<Flex gap=\"$spacing4\">\r\n                      <Text variant=\"body4\" color=\"$neutral1\">\r\n                        {error ? t(\"pool.incentives.yourRewards.error.description\") : t(\"pool.incentives.administeredRewards\")}\r\n                      </Text>\r\n                      {!error && <Trace logPress eventOnTrigger={UniswapEventName.LpIncentiveLearnMoreCtaClicked}>\r\n                          <LearnMoreLink textVariant=\"buttonLabel4\" url={uniswapUrls.helpArticleUrls.lpIncentiveInfo} />\r\n                        </Trace>}\r\n                    </Flex>}\n  />}\r\n            </Flex>\r\n          </Flex>\r\n        </Flex>\r\n        <Flex gap=\"$spacing2\">\r\n          <Trace logPress eventOnTrigger={UniswapEventName.LpIncentiveLearnMoreCtaClicked}>\r\n            <TouchableArea onPress={() => navigate(\"/explore/pools\")}>\r\n              <Flex group=\"item\" row gap=\"$spacing6\" alignItems=\"center\" hoverStyle={{ opacity: 0.8 }}>\r\n                <Text variant={isSmallScreen ? \"body4\" : \"body3\"} color=\"$neutral1\">\r\n                  {t(\"pool.incentives.uni.findMore\")}\r\n                </Text>\r\n                <Flex animation=\"simple\" enterStyle={{ x: 0 }} x={0} $group-item-hover={{ x: 4 }}>\r\n                  <ArrowRight color=\"$neutral1\" size={isSmallScreen ? iconSizes.icon12 : iconSizes.icon16} />\r\n                </Flex>\r\n              </Flex>\r\n            </TouchableArea>\r\n          </Trace>\r\n          <Text variant={isSmallScreen ? \"body4\" : \"body3\"} color=\"$neutral2\">\r\n            {t(\"pool.incentives.eligible\")}\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n    </TouchableArea>;\n}\nexport default LpIncentiveRewardsCard;\n","\"use strict\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Flex, Text } from \"ui/src\";\nimport { Plus } from \"ui/src/components/icons/Plus\";\nexport function PositionsHeader() {\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  return <Flex gap={16}>\r\n      <Text variant=\"heading3\">{t(\"pool.positions.title\")}</Text>\r\n      <Flex gap=\"$gap8\" row $sm={{ flexDirection: \"column\" }}>\r\n        <Flex gap=\"$spacing1\" row>\r\n          <Flex\n    row\n    gap=\"$gap8\"\n    py=\"$padding6\"\n    px=\"$padding16\"\n    cursor=\"pointer\"\n    backgroundColor=\"$neutral1\"\n    borderTopLeftRadius=\"$rounded16\"\n    borderRadius=\"$rounded16\"\n    alignItems=\"center\"\n    $sm={{ justifyContent: \"center\" }}\n    justifyContent=\"flex-start\"\n    flexGrow={1}\n    onPress={() => {\n      navigate(\"/positions/create/v4\");\n    }}\n  >\r\n            <Plus size={20} color=\"$surface1\" />\r\n            <Text color=\"$surface1\" variant=\"buttonLabel3\">\r\n              {t(\"common.new\")}\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { LiquidityPositionInfoBadges } from \"components/Liquidity/LiquidityPositionInfoBadges\";\nimport { LPIncentiveRewardsBadge } from \"components/Liquidity/LPIncentiveRewardsBadge\";\nimport { DoubleCurrencyLogo } from \"components/Logo/DoubleLogo\";\nimport { gqlToCurrency, supportedChainIdFromGQLChain, unwrapToken } from \"graphql/data/util\";\nimport { Trans } from \"react-i18next\";\nimport { useNavigate } from \"react-router-dom\";\nimport { Flex, Text } from \"ui/src\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nimport { toGraphQLChain } from \"uniswap/src/features/chains/utils\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nexport function TopPoolsCard({ pool }) {\n  const navigate = useNavigate();\n  const { defaultChainId } = useEnabledChains();\n  const { formatPercent } = useLocalizationContext();\n  const chainId = supportedChainIdFromGQLChain(pool.chain) ?? defaultChainId;\n  const token0 = pool.token0 ? gqlToCurrency(unwrapToken(chainId, pool.token0)) : void 0;\n  const token1 = pool.token1 ? gqlToCurrency(unwrapToken(chainId, pool.token1)) : void 0;\n  const formattedApr = pool.boostedApr ? formatPercent(pool.boostedApr) : null;\n  return <Flex\n    row\n    p=\"$padding16\"\n    borderRadius=\"$rounded20\"\n    borderColor=\"$surface3\"\n    borderWidth=\"$spacing1\"\n    justifyContent=\"space-between\"\n    cursor=\"pointer\"\n    hoverStyle={{ backgroundColor: \"$surface1Hovered\", borderColor: \"$surface3Hovered\" }}\n    onPress={() => navigate(`/explore/pools/${toGraphQLChain(chainId ?? defaultChainId).toLowerCase()}/${pool.id}`)}\n  >\r\n      <Flex row gap=\"$gap16\">\r\n        <DoubleCurrencyLogo currencies={[token0, token1]} size={44} />\r\n        <Flex gap=\"$gap4\">\r\n          <Text variant=\"subheading2\">\r\n            {token0?.symbol} / {token1?.symbol}\r\n          </Text>\r\n          <Flex row gap=\"$spacing2\" alignItems=\"center\">\r\n            <LiquidityPositionInfoBadges\n    size=\"small\"\n    versionLabel={pool.protocolVersion?.toLowerCase()}\n    feeTier={pool.feeTier}\n  />\r\n          </Flex>\r\n        </Flex>\r\n      </Flex>\r\n      <Flex alignItems=\"flex-end\" gap=\"$gap4\">\r\n        <Text variant=\"body2\" color=\"$neutral2\">\r\n          {formatPercent(pool.apr.toFixed(3))} <Trans i18nKey=\"pool.apr\" />\r\n        </Text>\r\n        {formattedApr && <LPIncentiveRewardsBadge formattedRewardApr={formattedApr} />}\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { LoadingRows } from \"components/Loader/styled\";\nimport { LoadingRow } from \"pages/Pool/Positions/shared\";\nimport { TopPoolsCard } from \"pages/Pool/Positions/TopPoolsCard\";\nimport { Flex, Text } from \"ui/src\";\nexport function TopPoolsSection({ pools, title, isLoading }) {\n  if (isLoading) {\n    return <LoadingRows>\r\n        <LoadingRow />\r\n        <LoadingRow />\r\n        <LoadingRow />\r\n        <LoadingRow />\r\n        <LoadingRow />\r\n        <LoadingRow />\r\n      </LoadingRows>;\n  }\n  return <Flex gap=\"$gap20\">\r\n      <Text variant=\"subheading1\">{title}</Text>\r\n      <Flex gap=\"$gap12\">\r\n        {pools.slice(0, 6).map((pool) => {\n    return <TopPoolsCard key={pool.id} pool={pool} />;\n  })}\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { PoolSortFields } from \"graphql/data/pools/useTopPools\";\nimport { OrderDirection } from \"graphql/data/util\";\nimport { ExternalArrowLink } from \"pages/Pool/Positions/shared\";\nimport { TopPoolsSection } from \"pages/Pool/Positions/TopPoolsSection\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTopPools } from \"state/explore/topPools\";\nimport { Flex, useMedia } from \"ui/src\";\nimport { ALL_NETWORKS_ARG } from \"uniswap/src/data/rest/base\";\nimport { useExploreStatsQuery } from \"uniswap/src/data/rest/exploreStats\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlag } from \"uniswap/src/features/gating/hooks\";\nimport { useAccount } from \"wagmi\";\nconst MAX_BOOSTED_POOLS = 3;\nexport function TopPools({ chainId }) {\n  const account = useAccount();\n  const { t } = useTranslation();\n  const isLPIncentivesEnabled = useFeatureFlag(FeatureFlags.LpIncentives);\n  const media = useMedia();\n  const isBelowXlScreen = !media.xl;\n  const {\n    data: exploreStatsData,\n    isLoading: exploreStatsLoading,\n    error: exploreStatsError\n  } = useExploreStatsQuery({\n    chainId: chainId ? chainId.toString() : ALL_NETWORKS_ARG\n  });\n  const { topPools, topBoostedPools } = useTopPools(\n    { data: exploreStatsData, isLoading: exploreStatsLoading, isError: !!exploreStatsError },\n    { sortDirection: OrderDirection.Desc, sortBy: PoolSortFields.TVL }\n  );\n  const displayBoostedPools = topBoostedPools && topBoostedPools.length > 0 && Boolean(account.address) && isLPIncentivesEnabled;\n  const displayTopPools = topPools && topPools.length > 0;\n  if (!isBelowXlScreen) {\n    return null;\n  }\n  return <Flex gap={48}>\r\n      {displayBoostedPools && <Flex gap=\"$gap20\">\r\n          <TopPoolsSection\n    title={t(\"pool.top.rewards\")}\n    pools={topBoostedPools.slice(0, MAX_BOOSTED_POOLS)}\n    isLoading={exploreStatsLoading}\n  />\r\n          <ExternalArrowLink href=\"/explore/pools\" openInNewTab={false}>\r\n            {t(\"explore.more.unichain\")}\r\n          </ExternalArrowLink>\r\n        </Flex>}\r\n      {displayTopPools && <Flex gap=\"$gap20\">\r\n          <TopPoolsSection title={t(\"pool.top.tvl\")} pools={topPools} isLoading={exploreStatsLoading} />\r\n          <ExternalArrowLink href=\"/liquidity\" openInNewTab={false}>\r\n            Liquidity\r\n          </ExternalArrowLink>\r\n        </Flex>}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { PositionStatus, ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport tokenLogo from \"assets/images/token-logo.png\";\nimport { ExpandoRow } from \"components/AccountDrawer/MiniPortfolio/ExpandoRow\";\nimport { useAccountDrawer } from \"components/AccountDrawer/MiniPortfolio/hooks\";\nimport { Pool as PoolIcon } from \"components/Icons/Pool\";\nimport { LiquidityPositionCard, LiquidityPositionCardLoader } from \"components/Liquidity/LiquidityPositionCard\";\nimport { LpIncentiveClaimModal } from \"components/Liquidity/LpIncentiveClaimModal\";\nimport LpIncentiveRewardsCard from \"components/Liquidity/LpIncentiveRewardsCard\";\nimport { getPositionUrl, parseRestPosition } from \"components/Liquidity/utils\";\nimport { TopPoolTable, sortAscendingAtom, sortMethodAtom } from \"components/Pools/PoolTable/PoolTable\";\nimport { OrderDirection } from \"graphql/data/util\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useLpIncentives } from \"hooks/useLpIncentives\";\nimport { atom, useAtom } from \"jotai\";\nimport { useAtomValue, useResetAtom } from \"jotai/utils\";\nimport { PositionsHeader } from \"pages/Pool/Positions/PositionsHeader\";\nimport { TopPools } from \"pages/Pool/Positions/TopPools\";\nimport { ExternalArrowLink } from \"pages/Pool/Positions/shared\";\nimport { useEffect, useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { Link, useNavigate } from \"react-router-dom\";\nimport { useTopPools } from \"state/explore/topPools\";\nimport { usePendingLPTransactionsChangeListener } from \"state/transactions/hooks\";\nimport { useRequestPositionsForSavedPairs } from \"state/user/hooks\";\nimport { Button, Flex, Text, useSporeColors } from \"ui/src\";\nimport { CloseIconWithHover } from \"ui/src/components/icons/CloseIconWithHover\";\nimport { InfoCircleFilled } from \"ui/src/components/icons/InfoCircleFilled\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { ALL_NETWORKS_ARG } from \"uniswap/src/data/rest/base\";\nimport { useExploreStatsQuery } from \"uniswap/src/data/rest/exploreStats\";\nimport { useGetPositionsInfiniteQuery } from \"uniswap/src/data/rest/getPositions\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nimport { FeatureFlags } from \"uniswap/src/features/gating/flags\";\nimport { useFeatureFlag } from \"uniswap/src/features/gating/hooks\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, UniswapEventName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { usePositionVisibilityCheck } from \"uniswap/src/features/visibility/hooks/usePositionVisibilityCheck\";\nconst PAGE_SIZE = 25;\nfunction EmptyPositionsView({ chainId, isConnected }) {\n  const colors = useSporeColors();\n  const { t } = useTranslation();\n  const navigate = useNavigate();\n  const accountDrawer = useAccountDrawer();\n  const sortMethod = useAtomValue(sortMethodAtom);\n  const sortAscending = useAtomValue(sortAscendingAtom);\n  const resetSortMethod = useResetAtom(sortMethodAtom);\n  const resetSortAscending = useResetAtom(sortAscendingAtom);\n  useEffect(() => {\n    resetSortMethod();\n    resetSortAscending();\n  }, [resetSortAscending, resetSortMethod]);\n  const {\n    data: exploreStatsData,\n    isLoading: exploreStatsLoading,\n    error: exploreStatsError\n  } = useExploreStatsQuery({\n    chainId: chainId ? chainId.toString() : ALL_NETWORKS_ARG\n  });\n  const { topPools } = useTopPools(\n    { data: exploreStatsData, isLoading: exploreStatsLoading, isError: !!exploreStatsError },\n    {\n      sortBy: sortMethod,\n      sortDirection: sortAscending ? OrderDirection.Asc : OrderDirection.Desc\n    }\n  );\n  return <Flex gap=\"$spacing32\">\r\n      <Flex\n    row\n    alignItems=\"center\"\n    justifyContent=\"space-between\"\n    borderRadius=\"$rounded20\"\n    borderColor=\"$surface3\"\n    borderWidth=\"$spacing1\"\n    borderStyle=\"solid\"\n    p=\"$padding16\"\n    overflow=\"hidden\"\n    cursor={isConnected ? \"auto\" : \"pointer\"}\n    onPress={isConnected ? void 0 : () => {\n      accountDrawer.toggle();\n    }}\n    $md={{ row: false, gap: \"$gap16\", alignItems: \"flex-start\" }}\n  >\r\n        <Flex alignItems=\"center\" row gap=\"$gap8\">\r\n          <Flex p=\"$padding8\" borderRadius=\"$rounded12\" backgroundColor=\"$accent2\">\r\n            <PoolIcon width={iconSizes.icon24} height={iconSizes.icon24} color={colors.accent1.val} />\r\n          </Flex>\r\n          <Flex shrink>\r\n            <Text variant=\"subheading2\">{isConnected ? t(\"pool.openPosition\") : t(\"positions.welcome\")}</Text>\r\n            <Text variant=\"body2\" color=\"$neutral2\">\r\n              {isConnected ? t(\"pool.openPosition.cta\") : t(\"positions.welcome.connect\")}\r\n            </Text>\r\n          </Flex>\r\n        </Flex>\r\n        {isConnected && <Flex centered row $md={{ width: \"100%\" }}>\r\n            <Button size=\"small\" emphasis=\"secondary\" onPress={() => navigate(\"/explore/pools\")}>\r\n              {t(\"pools.explore\")}\r\n            </Button>\r\n          </Flex>}\r\n      </Flex>\r\n      <Flex gap=\"$gap24\">\r\n        <Text variant=\"subheading1\">\r\n          <Trans i18nKey=\"pool.top.tvl\" />\r\n        </Text>\r\n        <TopPoolTable\n    topPoolData={{ topPools, isLoading: exploreStatsLoading, isError: !!exploreStatsError }}\n    pageSize={10}\n    staticSize\n    forcePinning\n  />\r\n        <ExternalArrowLink href=\"/liquidity\" openInNewTab={false}>\r\n          Liquidity\r\n        </ExternalArrowLink>\r\n      </Flex>\r\n    </Flex>;\n}\nconst chainFilterAtom = atom(null);\nconst versionFilterAtom = atom([ProtocolVersion.V4, ProtocolVersion.V3, ProtocolVersion.V2]);\nconst statusFilterAtom = atom([PositionStatus.IN_RANGE, PositionStatus.OUT_OF_RANGE]);\nexport default function Pool() {\n  const { t } = useTranslation();\n  const isLPIncentivesEnabled = useFeatureFlag(FeatureFlags.LpIncentives);\n  const [chainFilter, setChainFilter] = useAtom(chainFilterAtom);\n  const { chains: currentModeChains } = useEnabledChains();\n  const [versionFilter, setVersionFilter] = useAtom(versionFilterAtom);\n  const [statusFilter, setStatusFilter] = useAtom(statusFilterAtom);\n  const [closedCTADismissed, setClosedCTADismissed] = useState(false);\n  const account = useAccount();\n  const { address, isConnected } = account;\n  const isPositionVisible = usePositionVisibilityCheck();\n  const [showHiddenPositions, setShowHiddenPositions] = useState(false);\n  const {\n    isPendingTransaction,\n    isModalOpen,\n    tokenRewards,\n    openModal,\n    closeModal,\n    setTokenRewards,\n    onTransactionSuccess,\n    hasCollectedRewards\n  } = useLpIncentives();\n  const { data, isPlaceholderData, refetch, isLoading, fetchNextPage, hasNextPage, isFetching } = useGetPositionsInfiniteQuery(\n    {\n      address,\n      chainIds: chainFilter ? [chainFilter] : currentModeChains,\n      positionStatuses: statusFilter,\n      protocolVersions: versionFilter,\n      pageSize: PAGE_SIZE,\n      pageToken: \"\",\n      includeHidden: true\n    },\n    !isConnected\n  );\n  const loadedPositions = useMemo(() => {\n    return data?.pages.flatMap((positionsResponse) => positionsResponse.positions) || [];\n  }, [data]);\n  const savedPositions = useRequestPositionsForSavedPairs();\n  const isLoadingPositions = !!account.address && (isLoading || !data);\n  const combinedPositions = useMemo(() => {\n    return [\n      ...loadedPositions,\n      ...savedPositions.filter((position) => {\n        const matchesChain = !chainFilter || position.data?.position?.chainId === chainFilter;\n        const matchesStatus = position.data?.position?.status && statusFilter.includes(position.data?.position?.status);\n        const matchesVersion = position.data?.position?.protocolVersion && versionFilter.includes(position.data?.position?.protocolVersion);\n        return matchesChain && matchesStatus && matchesVersion;\n      }).map((p) => p.data?.position) ?? []\n    ].map(parseRestPosition).filter((position) => !!position).reduce((unique, position) => {\n      const positionId = `${position.poolId}-${position.tokenId}-${position.chainId}`;\n      const exists = unique.some((p) => `${p.poolId}-${p.tokenId}-${p.chainId}` === positionId);\n      if (!exists) {\n        unique.push(position);\n      }\n      return unique;\n    }, []);\n  }, [loadedPositions, savedPositions, chainFilter, statusFilter, versionFilter]);\n  const { visiblePositions, hiddenPositions } = useMemo(() => {\n    const visiblePositions2 = [];\n    const hiddenPositions2 = [];\n    combinedPositions.forEach((position) => {\n      const isVisible = isPositionVisible({\n        poolId: position.poolId,\n        tokenId: position.tokenId,\n        chainId: position.chainId,\n        isFlaggedSpam: position.isHidden\n      });\n      if (isVisible) {\n        visiblePositions2.push(position);\n      } else {\n        hiddenPositions2.push(position);\n      }\n    });\n    return { visiblePositions: visiblePositions2, hiddenPositions: hiddenPositions2 };\n  }, [combinedPositions, isPositionVisible]);\n  usePendingLPTransactionsChangeListener(refetch);\n  const loadMorePositions = () => {\n    if (hasNextPage && !isFetching) {\n      fetchNextPage();\n    }\n  };\n  return <Trace logImpression page={InterfacePageNameLocal.Positions}>\r\n      <Flex\n    row\n    justifyContent=\"space-between\"\n    $xl={{ flexDirection: \"column\", gap: \"$gap16\" }}\n    width=\"100%\"\n    gap={20}\n    py=\"$spacing24\"\n    px=\"$spacing40\"\n    $lg={{ px: \"$spacing20\" }}\n  >\r\n        <Flex grow shrink gap=\"$spacing24\" maxWidth={700} $xl={{ maxWidth: \"100%\" }}>\r\n          {isLPIncentivesEnabled && <LpIncentiveRewardsCard\n    walletAddress={account.address}\n    onCollectRewards={() => {\n      sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsButtonClicked);\n      openModal();\n    }}\n    setTokenRewards={setTokenRewards}\n    initialHasCollectedRewards={hasCollectedRewards}\n  />}\r\n          <Flex row justifyContent=\"space-between\" alignItems=\"center\" mt={isLPIncentivesEnabled ? \"$spacing28\" : 0}>\r\n            <PositionsHeader />\r\n          </Flex>\r\n          {!isLoadingPositions ? combinedPositions.length > 0 ? <Flex gap=\"$gap16\" mb=\"$spacing16\" opacity={isPlaceholderData ? 0.6 : 1}>\r\n                {visiblePositions.map((position) => <Link\n    key={`${position.poolId}-${position.tokenId}-${position.chainId}`}\n    style={{ textDecoration: \"none\" }}\n    to={getPositionUrl(position)}\n  >\r\n                    <LiquidityPositionCard showVisibilityOption liquidityPosition={position} showMigrateButton />\r\n                  </Link>)}\r\n                <HiddenPositions\n    showHiddenPositions={showHiddenPositions}\n    setShowHiddenPositions={setShowHiddenPositions}\n    hiddenPositions={hiddenPositions}\n  />\r\n              </Flex> : <EmptyPositionsView chainId={chainFilter} isConnected={isConnected} /> : <Flex gap=\"$gap16\">\r\n              {Array.from({ length: 5 }, (_, index) => <LiquidityPositionCardLoader key={index} />)}\r\n            </Flex>}\r\n          {hasNextPage && <Flex mx=\"auto\">\r\n              <Button emphasis=\"tertiary\" size=\"small\" onPress={loadMorePositions} isDisabled={isFetching}>\r\n                {t(\"common.loadMore\")}\r\n              </Button>\r\n            </Flex>}\r\n          {!statusFilter.includes(PositionStatus.CLOSED) && !closedCTADismissed && account.address && <Flex\n    borderWidth=\"$spacing1\"\n    borderColor=\"$surface3\"\n    borderRadius=\"$rounded12\"\n    mb=\"$spacing24\"\n    p=\"$padding12\"\n    gap=\"$gap12\"\n    row\n    centered\n  >\r\n              <Flex height=\"100%\">\r\n                <InfoCircleFilled color=\"$neutral2\" size=\"$icon.20\" />\r\n              </Flex>\r\n              <Flex grow flexBasis={0}>\r\n                <Text variant=\"body3\" color=\"$neutral1\">\r\n                  <Trans i18nKey=\"pool.closedCTA.title\" />\r\n                </Text>\r\n                <Text variant=\"body3\" color=\"$neutral2\">\r\n                  <Trans i18nKey=\"pool.closedCTA.description\" />\r\n                </Text>\r\n              </Flex>\r\n              <CloseIconWithHover onClose={() => setClosedCTADismissed(true)} size=\"$icon.20\" />\r\n            </Flex>}\r\n        </Flex>\r\n        <Flex gap=\"$gap32\">\r\n          <TopPools chainId={chainFilter} />\r\n        </Flex>\r\n      </Flex>\r\n      {isLPIncentivesEnabled && <LpIncentiveClaimModal\n    isOpen={isModalOpen}\n    onClose={() => closeModal()}\n    onSuccess={() => {\n      sendAnalyticsEvent(UniswapEventName.LpIncentiveCollectRewardsSuccess, {\n        token_rewards: tokenRewards\n      });\n      onTransactionSuccess();\n    }}\n    tokenRewards={tokenRewards}\n    isPendingTransaction={isPendingTransaction}\n    iconUrl={tokenLogo}\n  />}\r\n    </Trace>;\n}\nfunction HiddenPositions({ showHiddenPositions, setShowHiddenPositions, hiddenPositions }) {\n  const { t } = useTranslation();\n  return <ExpandoRow\n    isExpanded={showHiddenPositions}\n    toggle={() => setShowHiddenPositions(!showHiddenPositions)}\n    numItems={hiddenPositions.length}\n    title={t(\"common.hidden\")}\n    enableOverflow\n  >\r\n      <Flex gap=\"$gap16\">\r\n        {hiddenPositions.map((position) => <Link\n    key={`${position.poolId}-${position.tokenId}-${position.chainId}`}\n    style={{ textDecoration: \"none\" }}\n    to={getPositionUrl(position)}\n  >\r\n            <LiquidityPositionCard showVisibilityOption liquidityPosition={position} isVisible={false} />\r\n          </Link>)}\r\n      </Flex>\r\n    </ExpandoRow>;\n}\n"],"names":["positionVisibilities","useSelector","state","selectPositionsVisibility","_ref","poolId","tokenId","chainId","_ref$isFlaggedSpam","isFlaggedSpam","positionId","getUniquePositionId","positionState","undefined","isVisible","_reactRedux","require","_selectors","_utils","_cn","ExpandoRow","title","numItems","isExpanded","toggle","children","enableOverflow","t","useTranslation","titleWithFallback","allowOverflow","setAllowOverflow","useState","useTimeout","useEffect","div","className","Text","variant","color","Button","fill","icon","RotatableChevron","animation","direction","iconPosition","size","emphasis","onPress","HeightAnimator","open","overflow","useLpIncentivesClaim","dispatch","useDispatch","selectChain","useSelectChain","useCallback","params","wrappedSelectChain","lpIncentivesClaimSaga","actions","trigger","useLpIncentivesClaimData","walletAddress","tokens","distributor","data","fetchClaimLpIncentiveRewards","simulateTransaction","error","Error","_cn3","_cn2","LpIncentiveClaimModal","isOpen","onClose","onSuccess","token","LP_INCENTIVES_REWARD_TOKEN","tokenRewards","isPendingTransaction","iconUrl","setError","formattedTokenRewards","useMemo","formatTokenAmount","decimals","useFormattedTokenRewards","mutate","claim","isPending","onError","account","useAccount","address","lpIncentivesClaim","lpIncentivesClaimData","useMutation","mutationFn","Distributor","MERKL","sendAnalyticsEvent","UniswapEventName","LpIncentiveCollectRewardsErrorThrown","message","Promise","resolve","reject","type","AccountType","SignerMnemonic","claimData","tokenAddress","onFailure","error2","setCurrentStep","useLpIncentiveClaimMutation","didUserReject","logger","tags","file","function","handleClaim","useEvent","skipAnalytics","LpIncentiveCollectRewardsRetry","buttonConfig","isLoading","onClaim","onClick","DialogButtonType","Accent","useLpIncentiveClaimButtonConfig","DialogV2","Image","src","width","iconSizes","icon48","height","objectFit","subtext","symbol","InlineWarningCard","severity","WarningSeverity","Medium","description","hideCtaIcon","displayHelpCTA","primaryButtonOnClick","isPrimaryButtonLoading","modalName","ModalName","primaryButtonText","useGetPoolsRewards","input","enabled","useQuery","getRewards","transport","uniswapGetTransport","lpIncentivesLastClaimedAtom","atomWithStorage","useLpIncentives","setIsPendingTransaction","pendingTransactions","usePendingTransactions","hasPendingClaim","some","tx","info","TransactionType","LP_INCENTIVES_CLAIM_REWARDS","useLpIncentivesTransactionState","isModalOpen","setIsModalOpen","setTokenRewards","hasCollectedRewards","setHasCollectedRewards","setLastClaimed","useAtom","refetch","chainIds","UniverseChainId","Mainnet","reload","onTransactionSuccess","rewardsData","rewardsAmount","totalUnclaimedAmountUni","timestamp","Date","now","amount","openModal","closeModal","FIVE_MINUTES_MS","ms","onCollectRewards","initialHasCollectedRewards","navigate","useNavigate","shadowPropsShort","useShadowPropsShort","shadowPropsMedium","useShadowPropsMedium","isDarkMode","useIsDarkMode","isSmallScreen","useMedia","sm","Boolean","lastClaimed","effectivelyClaimed","lpIncentiveRewards","userHasRewards","threshold","BigInt","rewards","isCollectButtonDisabled","TouchableArea","group","cursor","Flex","p","justifyContent","backgroundColor","borderWidth","borderColor","borderRadius","transition","$group-hover","position","top","left","right","bottom","background","backgroundPosition","backgroundSize","backgroundRepeat","transform","Skeleton","FlexLoader","opacity","marginBottom","tokenLogo","maxWidth","isDisabled","isMobileWeb","InfoTooltip","placement","InfoCircleFilled","text","Trace","logPress","eventOnTrigger","LpIncentiveLearnMoreCtaClicked","LearnMoreLink","textVariant","url","uniswapUrls","helpArticleUrls","lpIncentiveInfo","row","gap","alignItems","hoverStyle","enterStyle","x","$group-item-hover","ArrowRight","icon12","icon16","_cn4","PositionsHeader","Plus","_cn5","TopPoolsCard","pool","token0","token1","defaultChainId","useEnabledChains","formatPercent","useLocalizationContext","supportedChainIdFromGQLChain","chain","gqlToCurrency","unwrapToken","formattedApr","boostedApr","toGraphQLChain","toLowerCase","id","DoubleCurrencyLogo","currencies","LiquidityPositionInfoBadges","versionLabel","protocolVersion","feeTier","apr","toFixed","Trans","i18nKey","LPIncentiveRewardsBadge","formattedRewardApr","TopPoolsSection","pools","LoadingRows","LoadingRow","slice","map","MAX_BOOSTED_POOLS","TopPools","isLPIncentivesEnabled","useFeatureFlag","FeatureFlags","LpIncentives","isBelowXlScreen","xl","exploreStatsData","exploreStatsLoading","exploreStatsError","useExploreStatsQuery","toString","ALL_NETWORKS_ARG","topPools","topBoostedPools","useTopPools","isError","sortDirection","OrderDirection","Desc","sortBy","PoolSortFields","TVL","displayBoostedPools","length","displayTopPools","ExternalArrowLink","href","openInNewTab","_cn24","_cn23","_cn22","_cn21","_cn20","_cn19","_cn18","_cn17","_cn16","_cn15","_cn14","_cn13","_cn12","_cn11","_cn10","_cn1","_cn0","_cn9","_cn8","_cn7","_cn6","PAGE_SIZE","EmptyPositionsView","isConnected","colors","useSporeColors","accountDrawer","useAccountDrawer","sortMethod","useAtomValue","sortMethodAtom","sortAscending","sortAscendingAtom","resetSortMethod","useResetAtom","resetSortAscending","Asc","concatClassName","PoolIcon","icon24","accent1","val","TopPoolTable","topPoolData","pageSize","staticSize","forcePinning","chainFilterAtom","atom","versionFilterAtom","ProtocolVersion","V4","V3","V2","statusFilterAtom","PositionStatus","IN_RANGE","OUT_OF_RANGE","Pool","chainFilter","setChainFilter","chains","currentModeChains","versionFilter","setVersionFilter","statusFilter","setStatusFilter","closedCTADismissed","setClosedCTADismissed","isPositionVisible","usePositionVisibilityCheck","showHiddenPositions","setShowHiddenPositions","isPlaceholderData","fetchNextPage","hasNextPage","isFetching","useGetPositionsInfiniteQuery","positionStatuses","protocolVersions","pageToken","includeHidden","loadedPositions","pages","flatMap","positionsResponse","positions","savedPositions","useRequestPositionsForSavedPairs","isLoadingPositions","combinedPositions","filter","matchesChain","matchesStatus","status","includes","matchesVersion","parseRestPosition","reduce","unique","push","visiblePositions","hiddenPositions","visiblePositions2","hiddenPositions2","forEach","isHidden","usePendingLPTransactionsChangeListener","logImpression","page","InterfacePageNameLocal","Positions","LpIncentiveRewardsCard","LpIncentiveCollectRewardsButtonClicked","Array","from","_","index","LiquidityPositionCardLoader","Link","style","textDecoration","to","getPositionUrl","LiquidityPositionCard","showVisibilityOption","liquidityPosition","showMigrateButton","HiddenPositions","loadMorePositions","CLOSED","CloseIconWithHover","LpIncentiveCollectRewardsSuccess","token_rewards"],"sourceRoot":""}