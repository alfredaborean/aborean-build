{"version":3,"file":"static/js/7221.03810fe3.chunk.js","mappings":"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","sources":["webpack://@uniswap/interface/./src/components/Liquidity/DepositInputForm.tsx?e717","webpack://@uniswap/interface/./src/pages/Pool/Positions/create/Deposit.tsx?0f00","webpack://@uniswap/interface/./src/pages/Pool/Positions/create/CreatePositionModal.tsx?a38f","webpack://@uniswap/interface/./src/pages/Pool/Positions/create/CreatePosition.tsx?bb6d","webpack://@uniswap/interface/./src/pages/Pool/Positions/create/ConfirmCreatePositionModal.tsx?ff99","webpack://@uniswap/interface/./src/pages/Pool/Positions/create/ResetCreatePositionsFormModal.tsx?0e8d","../packages/ui/src/components/icons/QuestionInCircle.tsx","components/Liquidity/DepositInputForm.tsx","components/Liquidity/LiquidityPositionInfoBadges.tsx","pages/Pool/Positions/create/ConfirmCreatePositionModal.tsx","pages/Pool/Positions/create/CreatePositionModal.tsx","pages/Pool/Positions/create/Deposit.tsx","pages/Pool/Positions/create/ResetCreatePositionsFormModal.tsx","pages/Pool/Positions/create/CreatePosition.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { Path, Svg } from \"react-native-svg\";\nimport { createIcon } from \"../factories/createIcon\";\nexport const [QuestionInCircle, AnimatedQuestionInCircle] = createIcon({\n  name: \"QuestionInCircle\",\n  getIcon: (props) => <Svg viewBox=\"0 0 24 24\" fill=\"none\" {...props}>\r\n      <Path\n    d=\"M12 22C17.5228 22 22 17.5228 22 12C22 6.47715 17.5228 2 12 2C6.47715 2 2 6.47715 2 12C2 17.5228 6.47715 22 12 22Z\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  />\r\n      <Path\n    d=\"M9.08997 9.00001C9.32507 8.33167 9.78912 7.76811 10.3999 7.40914C11.0107 7.05016 11.7289 6.91894 12.4271 7.03872C13.1254 7.15849 13.7588 7.52153 14.215 8.06353C14.6713 8.60554 14.921 9.29153 14.92 10C14.92 12 11.92 13 11.92 13\"\n    stroke=\"currentColor\"\n    strokeWidth=\"1.5\"\n    strokeLinecap=\"round\"\n    strokeLinejoin=\"round\"\n  />\r\n      <Path d=\"M12 17H12.01\" stroke=\"currentColor\" strokeWidth=\"1.5\" strokeLinecap=\"round\" strokeLinejoin=\"round\" />\r\n    </Svg>\n});\n","\"use strict\";\nimport { useCurrencyInfo } from \"hooks/Tokens\";\nimport { useTokenBalanceWithBuffer } from \"pages/Pool/Positions/create/hooks\";\nimport { useNativeTokenPercentageBufferExperiment } from \"pages/Pool/Positions/create/hooks/useNativeTokenPercentageBufferExperiment\";\nimport { useState } from \"react\";\nimport { PositionField } from \"types/position\";\nimport { Flex } from \"ui/src\";\nimport { CurrencyInputPanel } from \"uniswap/src/components/CurrencyInputPanel/CurrencyInputPanel\";\nimport { CurrencyField } from \"uniswap/src/types/currency\";\nfunction UnderCardComponent({ children }) {\n  return <Flex\n    backgroundColor=\"$surface2\"\n    borderBottomLeftRadius=\"$rounded20\"\n    borderBottomRightRadius=\"$rounded20\"\n    py=\"$spacing8\"\n    px=\"$spacing16\"\n  >\r\n      {children}\r\n    </Flex>;\n}\nexport function DepositInputForm({\n  token0,\n  token1,\n  currencyAmounts,\n  currencyBalances,\n  currencyAmountsUSDValue,\n  formattedAmounts,\n  onUserInput,\n  onSetMax,\n  deposit0Disabled,\n  deposit1Disabled,\n  token0UnderCardComponent,\n  token1UnderCardComponent,\n  amount0Loading,\n  amount1Loading,\n  autofocus = true\n}) {\n  const bufferPercentage = useNativeTokenPercentageBufferExperiment();\n  const [focusedInputField, setFocusedInputField] = useState(autofocus ? PositionField.TOKEN0 : void 0);\n  const token0BalanceWithBuffer = useTokenBalanceWithBuffer(currencyBalances?.[PositionField.TOKEN0], bufferPercentage);\n  const token1BalanceWithBuffer = useTokenBalanceWithBuffer(currencyBalances?.[PositionField.TOKEN1], bufferPercentage);\n  const token0CurrencyInfo = useCurrencyInfo(token0);\n  const token1CurrencyInfo = useCurrencyInfo(token1);\n  const handleUserInput = (field) => {\n    return (newValue) => {\n      onUserInput(field, newValue);\n    };\n  };\n  const handleOnSetMax = (field) => {\n    return (amount) => {\n      setFocusedInputField(field);\n      onSetMax(field, amount);\n    };\n  };\n  return <Flex gap=\"$gap4\">\r\n      {!deposit0Disabled && <Flex gap={2}>\r\n          <CurrencyInputPanel\n    focus={focusedInputField === PositionField.TOKEN0}\n    borderTopLeftRadius=\"$rounded20\"\n    borderTopRightRadius=\"$rounded20\"\n    borderBottomLeftRadius={token0UnderCardComponent ? \"$rounded0\" : \"$rounded20\"}\n    borderBottomRightRadius={token0UnderCardComponent ? \"$rounded0\" : \"$rounded20\"}\n    backgroundColor=\"$surface2\"\n    currencyInfo={token0CurrencyInfo}\n    currencyField={CurrencyField.INPUT}\n    currencyAmount={currencyAmounts?.[PositionField.TOKEN0]}\n    currencyBalance={token0BalanceWithBuffer}\n    onSetExactAmount={handleUserInput(PositionField.TOKEN0)}\n    onToggleIsFiatMode={() => void 0}\n    usdValue={currencyAmountsUSDValue?.[PositionField.TOKEN0]}\n    onSetPresetValue={handleOnSetMax(PositionField.TOKEN0)}\n    value={formattedAmounts?.[PositionField.TOKEN0]}\n    onPressIn={() => setFocusedInputField(PositionField.TOKEN0)}\n    isLoading={amount0Loading}\n  />\r\n          {token0UnderCardComponent && <UnderCardComponent>{token0UnderCardComponent}</UnderCardComponent>}\r\n        </Flex>}\r\n      {!deposit1Disabled && <Flex gap={2}>\r\n          <CurrencyInputPanel\n    focus={focusedInputField === PositionField.TOKEN1}\n    py=\"$spacing16\"\n    borderTopLeftRadius=\"$rounded20\"\n    borderTopRightRadius=\"$rounded20\"\n    borderBottomLeftRadius={token1UnderCardComponent ? \"$rounded0\" : \"$rounded20\"}\n    borderBottomRightRadius={token1UnderCardComponent ? \"$rounded0\" : \"$rounded20\"}\n    backgroundColor=\"$surface2\"\n    currencyInfo={token1CurrencyInfo}\n    currencyField={CurrencyField.INPUT}\n    currencyAmount={currencyAmounts?.[PositionField.TOKEN1]}\n    currencyBalance={token1BalanceWithBuffer}\n    onSetExactAmount={handleUserInput(PositionField.TOKEN1)}\n    onToggleIsFiatMode={() => void 0}\n    usdValue={currencyAmountsUSDValue?.[PositionField.TOKEN1]}\n    onSetPresetValue={handleOnSetMax(PositionField.TOKEN1)}\n    value={formattedAmounts?.[PositionField.TOKEN1]}\n    onPressIn={() => setFocusedInputField(PositionField.TOKEN1)}\n    isLoading={amount1Loading}\n  />\r\n          {token1UnderCardComponent && <UnderCardComponent>{token1UnderCardComponent}</UnderCardComponent>}\r\n        </Flex>}\r\n    </Flex>;\n}\n","\"use strict\";\nimport { isDynamicFeeTierAmount } from \"components/Liquidity/utils\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { CopyHelper } from \"theme/components/CopyHelper\";\nimport { styled, Text } from \"ui/src\";\nimport { DocumentList } from \"ui/src/components/icons/DocumentList\";\nimport { isAddress, shortenAddress } from \"utilities/src/addresses\";\nconst PositionInfoBadge = styled(Text, {\n  display: \"flex\",\n  flexDirection: \"row\",\n  alignItems: \"center\",\n  gap: \"$spacing2\",\n  variant: \"body3\",\n  color: \"$neutral2\",\n  backgroundColor: \"$surface3\",\n  py: \"$spacing2\",\n  px: \"$padding6\",\n  variants: {\n    size: {\n      default: {\n        variant: \"body3\"\n      },\n      small: {\n        variant: \"body4\"\n      }\n    },\n    placement: {\n      start: {\n        borderTopLeftRadius: \"$rounded4\",\n        borderBottomLeftRadius: \"$rounded4\",\n        display: \"none\"\n        // hide first badge\n      },\n      middle: {},\n      end: {\n        borderTopLeftRadius: \"$rounded4\",\n        borderBottomLeftRadius: \"$rounded4\",\n        borderTopRightRadius: \"$rounded4\",\n        borderBottomRightRadius: \"$rounded4\"\n      },\n      only: {\n        borderRadius: \"$rounded4\"\n      }\n    }\n  }\n});\nfunction getPlacement(index, length) {\n  return length === 1 ? \"only\" : index === 0 ? \"start\" : index === length - 1 ? \"end\" : \"middle\";\n}\nexport function LiquidityPositionInfoBadges({\n  versionLabel,\n  v4hook,\n  feeTier,\n  size = \"default\"\n}) {\n  const { t } = useTranslation();\n  const badges = useMemo(() => {\n    return [\n      // versionLabel ? { label: versionLabel } : undefined,\n      v4hook && v4hook !== ZERO_ADDRESS ? { label: v4hook, copyable: true, icon: <DocumentList color=\"$neutral2\" size={16} /> } : void 0,\n      feeTier !== void 0 && feeTier !== \"\" && (typeof feeTier === \"number\" || !isNaN(Number(feeTier))) ? isDynamicFeeTierAmount(feeTier) ? { label: t(\"common.dynamic\") } : { label: `${Number(feeTier) / 1e4}%` } : void 0\n    ].filter(Boolean);\n  }, [versionLabel, v4hook, feeTier, t]);\n  return <>\r\n      {badges.map(({ label, copyable, icon }, index) => {\n    const displayLabel = isAddress(label) ? shortenAddress(label) : label;\n    return <PositionInfoBadge\n      cursor={copyable ? \"pointer\" : \"unset\"}\n      key={label + index}\n      placement={getPlacement(index, badges.length)}\n      size={size}\n    >\r\n            {icon}\r\n            {copyable ? <CopyHelper toCopy={label} iconSize={12} iconPosition=\"right\">\r\n                {displayLabel}\r\n              </CopyHelper> : displayLabel}\r\n          </PositionInfoBadge>;\n  })}\r\n    </>;\n}\n","\"use strict\";\nimport { GetHelpHeader } from \"components/Modal/GetHelpHeader\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Flex, Text } from \"ui/src\";\nimport { AlertTriangleFilled } from \"ui/src/components/icons/AlertTriangleFilled\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { ModalName } from \"uniswap/src/features/telemetry/constants\";\nexport default function ConfirmCreatePositionModal({\n  isOpen,\n  onClose,\n  onContinue,\n  priceDifference\n}) {\n  const { t } = useTranslation();\n  return <Modal\n    name={ModalName.ConfirmCreatePosition}\n    onClose={onClose}\n    isDismissible\n    gap=\"$gap24\"\n    padding=\"$padding16\"\n    isModalOpen={isOpen}\n    maxWidth={420}\n  >\r\n      <Flex row justifyContent=\"flex-end\" alignItems=\"center\" gap=\"$spacing8\" width=\"100%\">\r\n        <GetHelpHeader closeModal={onClose} />\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" alignItems=\"center\" gap=\"$spacing16\">\r\n        <Flex gap=\"$gap16\" backgroundColor=\"$statusCritical2\" borderRadius=\"$rounded12\" p=\"$spacing12\">\r\n          <AlertTriangleFilled size={20} color=\"$statusCritical\" />\r\n        </Flex>\r\n        <Flex centered rowGap=\"$spacing8\">\r\n          <Text variant=\"subheading1\">{t(\"position.deposit.confirm.create.title\")}</Text>\r\n          <Text variant=\"body2\" color=\"$neutral2\" px=\"$spacing8\" textAlign=\"center\">\r\n            {priceDifference.value < 0 ? t(\"position.deposit.confirm.create.description.less\", {\n    value: priceDifference.absoluteValue\n  }) : t(\"position.deposit.confirm.create.description.more\", {\n    value: priceDifference.absoluteValue\n  })}\r\n          </Text>\r\n          <Button emphasis=\"text-only\">{t(\"common.button.learn\")}</Button>\r\n        </Flex>\r\n        <Flex row gap=\"$spacing8\" width=\"100%\" mt=\"$spacing8\">\r\n          <Button emphasis=\"secondary\" onPress={onClose}>\r\n            {t(\"common.button.cancel\")}\r\n          </Button>\r\n          <Button onPress={onContinue} variant=\"critical\">\r\n            {t(\"common.button.proceed\")}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport {\n  WrappedLiquidityPositionRangeChart,\n  getLiquidityRangeChartProps\n} from \"components/Charts/LiquidityPositionRangeChart/LiquidityPositionRangeChart\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { LiquidityPositionInfoBadges } from \"components/Liquidity/LiquidityPositionInfoBadges\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { useUpdatedAmountsFromDependentAmount } from \"components/Liquidity/hooks/useDependentAmountFallback\";\nimport { getProtocolVersionLabel } from \"components/Liquidity/utils\";\nimport { DoubleCurrencyLogo } from \"components/Logo/DoubleLogo\";\nimport { GetHelpHeader } from \"components/Modal/GetHelpHeader\";\nimport { DetailLineItem } from \"components/swap/DetailLineItem\";\nimport { useCurrencyInfo } from \"hooks/Tokens\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { BaseQuoteFiatAmount } from \"pages/Pool/Positions/create/BaseQuoteFiatAmount\";\nimport {\n  useCreatePositionContext,\n  useCreateTxContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { PoolOutOfSyncError } from \"pages/Pool/Positions/create/PoolOutOfSyncError\";\nimport { formatPrices } from \"pages/Pool/Positions/create/shared\";\nimport { getInvertedTuple, getPoolIdOrAddressFromCreatePositionInfo } from \"pages/Pool/Positions/create/utils\";\nimport { useCallback, useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useDispatch } from \"react-redux\";\nimport { useNavigate } from \"react-router-dom\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { Button, Flex, Separator, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { ProgressIndicator } from \"uniswap/src/components/ConfirmSwapModal/ProgressIndicator\";\nimport { NetworkLogo } from \"uniswap/src/components/CurrencyLogo/NetworkLogo\";\nimport { TokenLogo } from \"uniswap/src/components/CurrencyLogo/TokenLogo\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { UniverseChainId } from \"uniswap/src/features/chains/types\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { isValidLiquidityTxContext } from \"uniswap/src/features/transactions/liquidity/types\";\nimport { NumberType } from \"utilities/src/format/types\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nimport { useAccount } from \"wagmi\";\nexport function CreatePositionModal({ isOpen, onClose }) {\n  const {\n    positionState: { fee, hook },\n    derivedPositionInfo,\n    currentTransactionStep,\n    setCurrentTransactionStep\n  } = useCreatePositionContext();\n  const {\n    derivedPriceRangeInfo,\n    priceRangeState: { priceInverted }\n  } = usePriceRangeContext();\n  const {\n    derivedDepositInfo,\n    depositState: { exactField }\n  } = useDepositContext();\n  const { t } = useTranslation();\n  const { currencies, protocolVersion, creatingPoolOrPair } = derivedPositionInfo;\n  const { formattedAmounts, currencyAmounts, currencyAmountsUSDValue } = derivedDepositInfo;\n  const token0CurrencyInfo = useCurrencyInfo(currencyAmounts?.TOKEN0?.currency);\n  const token1CurrencyInfo = useCurrencyInfo(currencyAmounts?.TOKEN1?.currency);\n  const { formatNumberOrString, formatCurrencyAmount } = useLocalizationContext();\n  const [baseCurrency, quoteCurrency] = getInvertedTuple(currencies, priceInverted);\n  const { formattedPrices } = useMemo(() => {\n    return formatPrices(derivedPriceRangeInfo, formatNumberOrString);\n  }, [formatNumberOrString, derivedPriceRangeInfo]);\n  const versionLabel = getProtocolVersionLabel(protocolVersion);\n  const [steps, setSteps] = useState([]);\n  const dispatch = useDispatch();\n  const { txInfo, gasFeeEstimateUSD, error, refetch, dependentAmount } = useCreateTxContext();\n  const account = useAccountMeta();\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const navigate = useNavigate();\n  const trace = useTrace();\n  const onSuccess = useCallback(() => {\n    setSteps([]);\n    setCurrentTransactionStep(void 0);\n    onClose();\n    navigate(\"/positions\");\n  }, [setCurrentTransactionStep, onClose, navigate]);\n  const liquidityRangeChartProps = useMemo(\n    () => getLiquidityRangeChartProps({\n      positionInfo: derivedPositionInfo,\n      priceRangeInfo: derivedPriceRangeInfo,\n      pricesInverted: priceInverted\n    }),\n    [derivedPositionInfo, derivedPriceRangeInfo, priceInverted]\n  );\n  const handleCreate = useCallback(() => {\n    const isValidTx = isValidLiquidityTxContext(txInfo);\n    if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx || !currencyAmounts?.TOKEN0 || !currencyAmounts?.TOKEN1) {\n      return;\n    }\n    dispatch(\n      liquiditySaga.actions.trigger({\n        selectChain,\n        startChainId,\n        account,\n        liquidityTxContext: txInfo,\n        setCurrentStep: setCurrentTransactionStep,\n        setSteps,\n        onSuccess,\n        onFailure: () => {\n          setCurrentTransactionStep(void 0);\n        },\n        analytics: {\n          ...getLPBaseAnalyticsProperties({\n            trace,\n            version: protocolVersion,\n            fee: fee.feeAmount,\n            currency0: currencyAmounts.TOKEN0.currency,\n            currency1: currencyAmounts.TOKEN1.currency,\n            currency0AmountUsd: currencyAmountsUSDValue?.TOKEN0,\n            currency1AmountUsd: currencyAmountsUSDValue?.TOKEN1,\n            poolId: getPoolIdOrAddressFromCreatePositionInfo(derivedPositionInfo)\n          }),\n          expectedAmountBaseRaw: currencyAmounts.TOKEN0.quotient?.toString() ?? \"0\",\n          expectedAmountQuoteRaw: currencyAmounts.TOKEN1.quotient?.toString() ?? \"0\",\n          createPool: creatingPoolOrPair,\n          createPosition: true\n        }\n      })\n    );\n  }, [\n    txInfo,\n    account,\n    currencyAmounts?.TOKEN0,\n    currencyAmounts?.TOKEN1,\n    dispatch,\n    selectChain,\n    startChainId,\n    setCurrentTransactionStep,\n    onSuccess,\n    trace,\n    protocolVersion,\n    fee.feeAmount,\n    currencyAmountsUSDValue?.TOKEN0,\n    currencyAmountsUSDValue?.TOKEN1,\n    derivedPositionInfo,\n    creatingPoolOrPair\n  ]);\n  const [token0, token1] = currencies;\n  const { updatedFormattedAmounts, updatedUSDAmounts } = useUpdatedAmountsFromDependentAmount({\n    token0,\n    token1,\n    dependentAmount,\n    exactField,\n    currencyAmounts,\n    currencyAmountsUSDValue,\n    formattedAmounts,\n    deposit0Disabled: derivedPriceRangeInfo.deposit0Disabled,\n    deposit1Disabled: derivedPriceRangeInfo.deposit1Disabled\n  });\n  return <Modal name={ModalName.CreatePosition} padding=\"$none\" onClose={onClose} isDismissible isModalOpen={isOpen}>\r\n      <Flex px=\"$spacing8\" pt=\"$spacing12\" pb=\"$spacing8\" gap=\"$spacing24\">\r\n        <Flex px=\"$spacing12\">\r\n          <GetHelpHeader\n    title={<Text variant=\"subheading2\" color=\"$neutral2\">\r\n                <Trans i18nKey=\"position.create.modal.header\" />\r\n              </Text>}\n    closeModal={() => onClose()}\n  />\r\n          <Flex py=\"$spacing12\" gap=\"$spacing12\" mt=\"$spacing16\">\r\n            <Flex row alignItems=\"center\" justifyContent=\"space-between\">\r\n              <Flex>\r\n                <Flex row gap=\"$gap8\">\r\n                  <Text variant=\"heading3\">{currencyAmounts?.TOKEN0?.currency?.symbol}</Text>\r\n                  <Text variant=\"heading3\">/</Text>\r\n                  <Text variant=\"heading3\">{currencyAmounts?.TOKEN1?.currency?.symbol}</Text>\r\n                </Flex>\r\n                <Flex row gap={2} alignItems=\"center\">\r\n                  <LiquidityPositionInfoBadges\n    size=\"small\"\n    versionLabel={versionLabel}\n    v4hook={hook}\n    feeTier={fee.feeAmount}\n  />\r\n                </Flex>\r\n              </Flex>\r\n              <DoubleCurrencyLogo\n    currencies={[currencyAmounts?.TOKEN0?.currency, currencyAmounts?.TOKEN1?.currency]}\n    size={iconSizes.icon36}\n  />\r\n            </Flex>\r\n            {(protocolVersion === ProtocolVersion.V3 || protocolVersion === ProtocolVersion.V4) && <>\r\n                {!creatingPoolOrPair && !!liquidityRangeChartProps && <WrappedLiquidityPositionRangeChart width=\"100%\" {...liquidityRangeChartProps} />}\r\n                <Flex row>\r\n                  <Flex fill gap=\"$gap4\">\r\n                    <Text variant=\"body3\" color=\"$neutral2\">\r\n                      <Trans i18nKey=\"common.min\" />\r\n                    </Text>\r\n                    <Text variant=\"body3\">{`${formattedPrices[0]} ${quoteCurrency?.symbol + \"/\" + baseCurrency?.symbol}`}</Text>\r\n                  </Flex>\r\n                  <Flex fill gap=\"$gap4\">\r\n                    <Text variant=\"body3\" color=\"$neutral2\">\r\n                      <Trans i18nKey=\"common.max\" />\r\n                    </Text>\r\n                    <Text variant=\"body3\">{`${formattedPrices[1]} ${quoteCurrency?.symbol + \"/\" + baseCurrency?.symbol}`}</Text>\r\n                  </Flex>\r\n                </Flex>\r\n              </>}\r\n          </Flex>\r\n          {creatingPoolOrPair && <Flex gap=\"$spacing12\" mt=\"$spacing32\">\r\n              <Text variant=\"body3\" color=\"$neutral2\">\r\n                <Trans i18nKey=\"position.initialPrice\" />\r\n              </Text>\r\n              <BaseQuoteFiatAmount\n    variant=\"body1\"\n    price={derivedPriceRangeInfo.invertPrice ? derivedPriceRangeInfo.price?.invert() : derivedPriceRangeInfo.price}\n    base={baseCurrency}\n    quote={quoteCurrency}\n  />\r\n            </Flex>}\r\n          <Flex gap=\"$spacing12\" pb=\"$spacing8\" mt=\"$spacing32\">\r\n            <Text variant=\"body3\" color=\"$neutral2\">\r\n              <Trans i18nKey=\"common.depositing\" />\r\n            </Text>\r\n            <Flex row justifyContent=\"space-between\">\r\n              <Flex gap=\"$gap4\">\r\n                <Flex row gap=\"$gap8\">\r\n                  <Text variant=\"body1\">{updatedFormattedAmounts?.TOKEN0}</Text>\r\n                  <Text variant=\"body1\">{currencyAmounts?.TOKEN0?.currency.symbol}</Text>\r\n                </Flex>\r\n                <Text variant=\"body3\" color=\"$neutral2\">\r\n                  {formatCurrencyAmount({ value: updatedUSDAmounts?.TOKEN0, type: NumberType.FiatTokenPrice })}\r\n                </Text>\r\n              </Flex>\r\n              <TokenLogo\n    size={iconSizes.icon36}\n    chainId={currencyAmounts?.TOKEN0?.currency?.chainId}\n    name={currencyAmounts?.TOKEN0?.currency?.name}\n    symbol={currencyAmounts?.TOKEN0?.currency?.symbol}\n    url={token0CurrencyInfo?.logoUrl}\n  />\r\n            </Flex>\r\n            <Flex row justifyContent=\"space-between\">\r\n              <Flex gap=\"$gap4\">\r\n                <Flex row gap=\"$gap8\">\r\n                  <Text variant=\"body1\">{updatedFormattedAmounts?.TOKEN1}</Text>\r\n                  <Text variant=\"body1\">{currencyAmounts?.TOKEN1?.currency.symbol}</Text>\r\n                </Flex>\r\n                <Text variant=\"body3\" color=\"$neutral2\">\r\n                  {formatCurrencyAmount({ value: updatedUSDAmounts?.TOKEN1, type: NumberType.FiatTokenPrice })}\r\n                </Text>\r\n              </Flex>\r\n              <TokenLogo\n    size={iconSizes.icon36}\n    chainId={currencyAmounts?.TOKEN1?.currency?.chainId}\n    name={currencyAmounts?.TOKEN1?.currency?.name}\n    symbol={currencyAmounts?.TOKEN1?.currency?.symbol}\n    url={token1CurrencyInfo?.logoUrl}\n  />\r\n            </Flex>\r\n          </Flex>\r\n          <ErrorCallout errorMessage={error} onPress={refetch} />\r\n          <PoolOutOfSyncError />\r\n        </Flex>\r\n        {currentTransactionStep && steps.length > 1 ? <ProgressIndicator steps={steps} currentStep={currentTransactionStep} /> : <>\r\n            <Separator mx=\"$padding12\" />\r\n            <Flex mx=\"$padding12\">\r\n              <DetailLineItem\n    LineItem={{\n      Label: () => <Text variant=\"body3\" color=\"$neutral2\">\r\n                      <Trans i18nKey=\"common.networkCost\" />\r\n                    </Text>,\n      Value: () => <Flex row gap=\"$gap4\" alignItems=\"center\">\r\n                      <NetworkLogo\n        chainId={baseCurrency?.chainId || UniverseChainId.Mainnet}\n        size={iconSizes.icon16}\n        shape=\"square\"\n      />\r\n                      <Text variant=\"body3\">\r\n                        {formatCurrencyAmount({ value: gasFeeEstimateUSD, type: NumberType.FiatGasPrice })}\r\n                      </Text>\r\n                    </Flex>\n    }}\n  />\r\n            </Flex>\r\n            {currentTransactionStep ? <Button size=\"large\" variant=\"branded\" loading={true} key=\"create-position-confirm\" fill={false}>\r\n                {t(\"common.confirmWallet\")}\r\n              </Button> : <Button size=\"large\" variant=\"branded\" onPress={handleCreate} isDisabled={!txInfo?.action} fill={false}>\r\n                {t(\"common.button.create\")}\r\n              </Button>}\r\n          </>}\r\n      </Flex>\r\n    </Modal>;\n}\n","\"use strict\";\nimport { DepositInputForm } from \"components/Liquidity/DepositInputForm\";\nimport { useUpdatedAmountsFromDependentAmount } from \"components/Liquidity/hooks/useDependentAmountFallback\";\nimport ConfirmCreatePositionModal from \"pages/Pool/Positions/create/ConfirmCreatePositionModal\";\nimport {\n  useCreatePositionContext,\n  useCreateTxContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { CreatePositionModal } from \"pages/Pool/Positions/create/CreatePositionModal\";\nimport { useCallback, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { PositionField } from \"types/position\";\nimport { Button, Flex, Text } from \"ui/src\";\nimport { WarningSeverity } from \"uniswap/src/components/modals/WarningModal/types\";\nexport const DepositStep = () => {\n  const {\n    derivedPositionInfo: { currencies }\n  } = useCreatePositionContext();\n  const { t } = useTranslation();\n  const { derivedPriceRangeInfo } = usePriceRangeContext();\n  const {\n    depositState: { exactField },\n    setDepositState,\n    derivedDepositInfo: {\n      formattedAmounts,\n      currencyAmounts,\n      currencyAmountsUSDValue,\n      currencyBalances,\n      error: inputError\n    }\n  } = useDepositContext();\n  const { txInfo, error: dataFetchingError, dependentAmount } = useCreateTxContext();\n  const { deposit0Disabled, deposit1Disabled, priceDifference } = derivedPriceRangeInfo;\n  const [isReviewModalOpen, setIsReviewModalOpen] = useState(false);\n  const [isConfirmModalOpen, setIsConfirmModalOpen] = useState(false);\n  const handleUserInput = (field, newValue) => {\n    setDepositState((prev) => ({\n      exactField: field,\n      exactAmounts: {\n        ...prev.exactAmounts,\n        [field]: newValue\n      }\n    }));\n  };\n  const handleOnSetMax = (field, amount) => {\n    setDepositState((prev) => ({\n      exactField: field,\n      exactAmounts: {\n        ...prev.exactAmounts,\n        [field]: amount\n      }\n    }));\n  };\n  const handleReview = useCallback(() => {\n    if (priceDifference?.warning === WarningSeverity.High) {\n      setIsConfirmModalOpen(true);\n      return;\n    }\n    setIsReviewModalOpen(true);\n  }, [priceDifference?.warning]);\n  const [token0, token1] = currencies;\n  const { updatedFormattedAmounts, updatedUSDAmounts, updatedDeposit0Disabled, updatedDeposit1Disabled } = useUpdatedAmountsFromDependentAmount({\n    token0,\n    token1,\n    dependentAmount,\n    exactField,\n    currencyAmounts,\n    currencyAmountsUSDValue,\n    formattedAmounts,\n    deposit0Disabled,\n    deposit1Disabled\n  });\n  if (!token0 || !token1) {\n    return null;\n  }\n  const disabled = !!inputError || !txInfo?.txRequest;\n  const requestLoading = Boolean(\n    !dataFetchingError && !inputError && !txInfo?.txRequest && currencyAmounts?.TOKEN0 && currencyAmounts.TOKEN1\n  );\n  return <>\r\n      <Flex gap={32}>\r\n        <Flex gap=\"$spacing4\">\r\n          <Text variant=\"subheading1\">\r\n            <Trans i18nKey=\"common.depositTokens\" />\r\n          </Text>\r\n          <Text variant=\"body3\" color=\"$neutral2\">\r\n            <Trans i18nKey=\"position.deposit.description\" />\r\n          </Text>\r\n        </Flex>\r\n      </Flex>\r\n      <DepositInputForm\n    autofocus={false}\n    token0={token0}\n    token1={token1}\n    formattedAmounts={updatedFormattedAmounts}\n    currencyAmounts={currencyAmounts}\n    currencyAmountsUSDValue={updatedUSDAmounts}\n    currencyBalances={currencyBalances}\n    onUserInput={handleUserInput}\n    onSetMax={handleOnSetMax}\n    deposit0Disabled={updatedDeposit0Disabled}\n    deposit1Disabled={updatedDeposit1Disabled}\n    amount0Loading={requestLoading && exactField === PositionField.TOKEN1}\n    amount1Loading={requestLoading && exactField === PositionField.TOKEN0}\n  />\r\n      <Flex row>\r\n        <Button\n    size=\"large\"\n    variant=\"branded\"\n    onPress={handleReview}\n    isDisabled={disabled}\n    key=\"Position-Create-DepositButton\"\n    loading={requestLoading}\n  >\r\n          {inputError ? inputError : t(\"swap.button.review\")}\r\n        </Button>\r\n      </Flex>\r\n      <CreatePositionModal isOpen={isReviewModalOpen} onClose={() => setIsReviewModalOpen(false)} />\r\n      {priceDifference?.warning === WarningSeverity.High && <ConfirmCreatePositionModal\n    isOpen={isConfirmModalOpen}\n    onClose={() => setIsConfirmModalOpen(false)}\n    onContinue={() => {\n      setIsConfirmModalOpen(false);\n      setIsReviewModalOpen(true);\n    }}\n    priceDifference={priceDifference}\n  />}\r\n    </>;\n};\n","\"use strict\";\nimport { GetHelpHeader } from \"components/Modal/GetHelpHeader\";\nimport { useTranslation } from \"react-i18next\";\nimport { Button, Flex, Text } from \"ui/src\";\nimport { QuestionInCircle } from \"ui/src/components/icons/QuestionInCircle\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { ModalName } from \"uniswap/src/features/telemetry/constants\";\nexport default function ResetCreatePositionFormModal({\n  isOpen,\n  onClose,\n  onHandleReset\n}) {\n  const { t } = useTranslation();\n  const handleReset = () => {\n    onHandleReset();\n    onClose();\n  };\n  return <Modal\n    name={ModalName.ResetCreatePositionsForm}\n    onClose={onClose}\n    isDismissible\n    gap=\"$gap24\"\n    padding=\"$padding16\"\n    isModalOpen={isOpen}\n    maxWidth={420}\n  >\r\n      <Flex row justifyContent=\"flex-end\" alignItems=\"center\" gap=\"$spacing8\" width=\"100%\">\r\n        <GetHelpHeader closeModal={onClose} />\r\n      </Flex>\r\n      <Flex flexDirection=\"column\" alignItems=\"center\" gap=\"$spacing16\">\r\n        <Flex gap=\"$gap16\" backgroundColor=\"$surface3\" borderRadius=\"$rounded12\" p=\"$spacing12\">\r\n          <QuestionInCircle size={20} color=\"$neutral1\" />\r\n        </Flex>\r\n        <Flex centered rowGap=\"$spacing2\">\r\n          <Text variant=\"subheading1\">{t(\"common.areYouSure\")}</Text>\r\n          <Text variant=\"body2\" color=\"$neutral2\" px=\"$spacing8\" textAlign=\"center\">\r\n            {t(\"position.resetDescription\")}\r\n          </Text>\r\n        </Flex>\r\n        <Flex row gap=\"$spacing8\" width=\"100%\" mt=\"$spacing8\">\r\n          <Button size=\"small\" emphasis=\"secondary\" onPress={onClose}>\r\n            {t(\"common.button.cancel\")}\r\n          </Button>\r\n          <Button size=\"small\" onPress={handleReset}>\r\n            {t(\"common.button.reset\")}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>;\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { BreadcrumbNavContainer, BreadcrumbNavLink } from \"components/BreadcrumbNav\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { getProtocolVersionLabel, parseProtocolVersion } from \"components/Liquidity/utils\";\nimport { PoolProgressIndicator } from \"components/PoolProgressIndicator/PoolProgressIndicator\";\nimport {\n  CreatePositionContextProvider,\n  CreateTxContextProvider,\n  DepositContextProvider,\n  PriceRangeContextProvider\n} from \"pages/Pool/Positions/create/ContextProviders\";\nimport {\n  DEFAULT_DEPOSIT_STATE,\n  DEFAULT_PRICE_RANGE_STATE,\n  useCreatePositionContext,\n  useCreateTxContext,\n  useDepositContext,\n  usePriceRangeContext\n} from \"pages/Pool/Positions/create/CreatePositionContext\";\nimport { DepositStep } from \"pages/Pool/Positions/create/Deposit\";\nimport { EditSelectTokensStep } from \"pages/Pool/Positions/create/EditStep\";\nimport { SelectPriceRangeStep } from \"pages/Pool/Positions/create/RangeSelectionStep\";\nimport ResetCreatePositionFormModal from \"pages/Pool/Positions/create/ResetCreatePositionsFormModal\";\nimport { SelectTokensStep } from \"pages/Pool/Positions/create/SelectTokenStep\";\nimport { useInitialPoolInputs } from \"pages/Pool/Positions/create/hooks\";\nimport { useLPSlippageValue } from \"pages/Pool/Positions/create/hooks/useLPSlippageValues\";\nimport { Container } from \"pages/Pool/Positions/create/shared\";\nimport { DEFAULT_POSITION_STATE, PositionFlowStep } from \"pages/Pool/Positions/create/types\";\nimport { useCallback, useEffect, useMemo, useState } from \"react\";\nimport { ChevronRight } from \"react-feather\";\nimport { useTranslation } from \"react-i18next\";\nimport { useNavigate, useParams } from \"react-router-dom\";\nimport { MultichainContextProvider } from \"state/multichain/MultichainContext\";\nimport { useMultichainContext } from \"state/multichain/useMultichainContext\";\nimport { PositionField } from \"types/position\";\nimport { Button, Flex, Text, TouchableArea, styled, useMedia } from \"ui/src\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nimport { INTERFACE_NAV_HEIGHT } from \"ui/src/theme\";\nimport { useEnabledChains } from \"uniswap/src/features/chains/hooks/useEnabledChains\";\nimport Trace from \"uniswap/src/features/telemetry/Trace\";\nimport { InterfacePageNameLocal, SectionName } from \"uniswap/src/features/telemetry/constants\";\nimport {\n  TransactionSettingsContextProvider,\n  useTransactionSettingsContext\n} from \"uniswap/src/features/transactions/settings/contexts/TransactionSettingsContext\";\nimport { TransactionSettingKey } from \"uniswap/src/features/transactions/settings/slice\";\nimport { SwapFormSettings } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/SwapFormSettings\";\nimport { Deadline } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Deadline/Deadline\";\nimport { Slippage } from \"uniswap/src/features/transactions/swap/form/header/SwapFormSettings/settingsConfigurations/Slippage/Slippage\";\nimport { usePrevious } from \"utilities/src/react/hooks\";\nconst WIDTH = {\n  positionCard: 600,\n  sidebar: 360\n};\nfunction CreatePositionInner() {\n  const {\n    positionState: { protocolVersion },\n    derivedPositionInfo: { creatingPoolOrPair },\n    step,\n    setStep\n  } = useCreatePositionContext();\n  const v2Selected = protocolVersion === ProtocolVersion.V2;\n  const { error, refetch } = useCreateTxContext();\n  const handleContinue = useCallback(() => {\n    if (v2Selected) {\n      if (step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER && creatingPoolOrPair) {\n        setStep(PositionFlowStep.PRICE_RANGE);\n      } else {\n        setStep(PositionFlowStep.DEPOSIT);\n      }\n    } else {\n      setStep((prevStep) => prevStep + 1);\n    }\n  }, [creatingPoolOrPair, setStep, step, v2Selected]);\n  if (step === PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER) {\n    return <Trace logImpression section={SectionName.CreatePositionSelectTokensStep}>\r\n        <SelectTokensStep onContinue={handleContinue} />\r\n      </Trace>;\n  }\n  if (step === PositionFlowStep.PRICE_RANGE) {\n    return <Trace logImpression section={SectionName.CreatePositionPriceRangeStep}>\r\n        <EditSelectTokensStep />\r\n        <Container>\r\n          <SelectPriceRangeStep />\r\n          <DepositStep />\r\n          <ErrorCallout errorMessage={error} onPress={refetch} />\r\n        </Container>\r\n      </Trace>;\n  }\n  return <Trace logImpression section={SectionName.CreatePositionDepositStep}>\r\n      <EditSelectTokensStep />\r\n      <Container>\r\n        <DepositStep />\r\n      </Container>\r\n      <ErrorCallout errorMessage={error} onPress={refetch} />\r\n    </Trace>;\n}\nconst Sidebar = () => {\n  const { t } = useTranslation();\n  const {\n    positionState: { protocolVersion },\n    derivedPositionInfo: { creatingPoolOrPair },\n    step,\n    setStep\n  } = useCreatePositionContext();\n  const PoolProgressSteps = useMemo(() => {\n    const createStep = (label, stepEnum) => ({\n      label,\n      active: step === stepEnum,\n      // This relies on the ordering of PositionFlowStep enum values matching the actual order in the form.\n      onPress: stepEnum < step ? () => setStep(stepEnum) : void 0\n    });\n    if (protocolVersion === ProtocolVersion.V2) {\n      if (creatingPoolOrPair) {\n        return [\n          createStep(t(`position.step.select`), PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER),\n          createStep(t(\"position.step.price\"), PositionFlowStep.PRICE_RANGE)\n        ];\n      }\n      return [\n        createStep(t(\"position.step.select\"), PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER),\n        createStep(t(\"position.step.deposit\"), PositionFlowStep.DEPOSIT)\n      ];\n    }\n    return [\n      createStep(t(\"position.step.select\"), PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER),\n      createStep(t(\"position.step.range\"), PositionFlowStep.PRICE_RANGE)\n    ];\n  }, [creatingPoolOrPair, protocolVersion, setStep, step, t]);\n  return <Flex\n    width={WIDTH.sidebar}\n    alignSelf=\"flex-start\"\n    $platform-web={{ position: \"sticky\", top: INTERFACE_NAV_HEIGHT + 25 }}\n  >\r\n      <PoolProgressIndicator steps={PoolProgressSteps} />\r\n    </Flex>;\n};\nconst ResetButton = ({ onClickReset, isDisabled }) => {\n  const { t } = useTranslation();\n  return <Button size=\"small\" emphasis=\"tertiary\" onPress={onClickReset} isDisabled={isDisabled} icon={<RotateLeft />}>\r\n      {t(\"common.button.reset\")}\r\n    </Button>;\n};\nconst ToolbarContainer = styled(Flex, {\n  row: true,\n  centered: true,\n  gap: \"$gap12\",\n  $md: {\n    \"$platform-web\": {\n      display: \"grid\",\n      gridTemplateColumns: \"1fr 1fr auto\",\n      gridColumnGap: \"8px\"\n    }\n  }\n});\nconst Toolbar = ({ defaultInitialToken }) => {\n  const navigate = useNavigate();\n  const { t } = useTranslation();\n  const { positionState, setPositionState, setStep, reset: resetCreatePositionState } = useCreatePositionContext();\n  const { protocolVersion } = positionState;\n  const { setPriceRangeState } = usePriceRangeContext();\n  const { customSlippageTolerance } = useTransactionSettingsContext();\n  const [versionDropdownOpen, setVersionDropdownOpen] = useState(false);\n  const [showResetModal, setShowResetModal] = useState(false);\n  const { priceRangeState, reset: resetPriceRangeState } = usePriceRangeContext();\n  const { depositState, reset: resetDepositState } = useDepositContext();\n  const { reset: resetMultichainState } = useMultichainContext();\n  const { isTestnetModeEnabled } = useEnabledChains();\n  const prevIsTestnetModeEnabled = usePrevious(isTestnetModeEnabled) ?? false;\n  const isFormUnchanged = useMemo(() => {\n    return positionState.currencyInputs.TOKEN0 === defaultInitialToken && !positionState.currencyInputs.TOKEN1 && positionState.fee === DEFAULT_POSITION_STATE.fee && positionState.hook === DEFAULT_POSITION_STATE.hook && priceRangeState.initialPrice === DEFAULT_PRICE_RANGE_STATE.initialPrice && depositState === DEFAULT_DEPOSIT_STATE;\n  }, [\n    positionState.currencyInputs,\n    positionState.fee,\n    positionState.hook,\n    priceRangeState,\n    depositState,\n    defaultInitialToken\n  ]);\n  const handleReset = useCallback(() => {\n    resetCreatePositionState();\n    resetPriceRangeState();\n    resetMultichainState();\n    resetDepositState();\n  }, [resetDepositState, resetCreatePositionState, resetMultichainState, resetPriceRangeState]);\n  useEffect(() => {\n    if (isTestnetModeEnabled !== prevIsTestnetModeEnabled) {\n      handleReset();\n    }\n  }, [handleReset, isTestnetModeEnabled, prevIsTestnetModeEnabled]);\n  const handleVersionChange = useCallback(\n    (version) => {\n      const versionUrl = getProtocolVersionLabel(version);\n      if (versionUrl) {\n        navigate(`/positions/create/${versionUrl}`);\n      }\n      setPositionState((prevState) => ({\n        ...DEFAULT_POSITION_STATE,\n        currencyInputs: prevState.currencyInputs,\n        protocolVersion: version\n      }));\n      setPriceRangeState(DEFAULT_PRICE_RANGE_STATE);\n      setStep(PositionFlowStep.SELECT_TOKENS_AND_FEE_TIER);\n      setVersionDropdownOpen(false);\n    },\n    [setPositionState, setPriceRangeState, setStep, navigate, setVersionDropdownOpen]\n  );\n  const versionOptions = useMemo(\n    () => [ProtocolVersion.V4, ProtocolVersion.V3, ProtocolVersion.V2].filter((version) => version != protocolVersion).map((version) => <TouchableArea key={`version-${version}`} onPress={() => handleVersionChange(version)}>\r\n            <Flex p=\"$spacing8\" borderRadius=\"$rounded8\" hoverStyle={{ backgroundColor: \"$surface2\" }}>\r\n              <Text variant=\"body2\">{t(\"position.new.protocol\", { protocol: getProtocolVersionLabel(version) })}</Text>\r\n            </Flex>\r\n          </TouchableArea>),\n    [handleVersionChange, protocolVersion, t]\n  );\n  return <Flex>\r\n      <ResetCreatePositionFormModal\n    isOpen={showResetModal}\n    onClose={() => setShowResetModal(false)}\n    onHandleReset={handleReset}\n  />\r\n\r\n      <ToolbarContainer>\r\n        <ResetButton onClickReset={() => setShowResetModal(true)} isDisabled={isFormUnchanged} />\r\n\r\n        <Flex\n    borderRadius=\"$rounded12\"\n    borderWidth={!customSlippageTolerance ? \"$spacing1\" : \"$none\"}\n    borderColor=\"$surface3\"\n    height=\"38px\"\n    px={!customSlippageTolerance ? \"$gap8\" : \"$gap4\"}\n    alignItems=\"center\"\n    pt=\"$spacing2\"\n  >\r\n          <SwapFormSettings\n    position=\"relative\"\n    adjustRightAlignment={false}\n    adjustTopAlignment={false}\n    settings={[Slippage, Deadline]}\n    iconColor=\"$neutral1\"\n    iconSize=\"$icon.16\"\n  />\r\n        </Flex>\r\n      </ToolbarContainer>\r\n    </Flex>;\n};\nexport default function CreatePosition() {\n  const media = useMedia();\n  const { t } = useTranslation();\n  const { protocolVersion } = useParams();\n  const paramsProtocolVersion = parseProtocolVersion(protocolVersion);\n  const autoSlippageTolerance = useLPSlippageValue(paramsProtocolVersion);\n  const initialInputs = useInitialPoolInputs();\n  const initialProtocolVersion = paramsProtocolVersion ?? ProtocolVersion.V4;\n  return <Trace logImpression page={InterfacePageNameLocal.CreatePosition}>\r\n      <MultichainContextProvider initialChainId={initialInputs[PositionField.TOKEN0].chainId}>\r\n        <TransactionSettingsContextProvider\n    autoSlippageTolerance={autoSlippageTolerance}\n    settingKey={TransactionSettingKey.LP}\n  >\r\n          <CreatePositionContextProvider\n    initialState={{\n      currencyInputs: initialInputs,\n      protocolVersion: initialProtocolVersion\n    }}\n  >\r\n            <PriceRangeContextProvider>\r\n              <DepositContextProvider>\r\n                <CreateTxContextProvider>\r\n                  <Flex\n    mt=\"$spacing24\"\n    width=\"100%\"\n    px=\"$spacing40\"\n    maxWidth={WIDTH.positionCard + WIDTH.sidebar + 80}\n    $xl={{\n      px: \"$spacing12\",\n      maxWidth: WIDTH.positionCard,\n      mx: \"auto\"\n    }}\n  >\r\n                    <BreadcrumbNavContainer aria-label=\"breadcrumb-nav\">\r\n                      <BreadcrumbNavLink to=\"/positions\">\r\n                        {t(\"pool.positions.title\")} <ChevronRight size={14} />\r\n                      </BreadcrumbNavLink>\r\n                      <BreadcrumbNavLink to=\"/positions/create\">{t(\"pool.newPosition.title\")}</BreadcrumbNavLink>\r\n                    </BreadcrumbNavContainer>\r\n                    <Flex\n    row\n    alignSelf=\"flex-end\"\n    alignItems=\"center\"\n    gap=\"$gap20\"\n    width=\"100%\"\n    justifyContent=\"space-between\"\n    mr=\"auto\"\n    mb=\"$spacing32\"\n    $md={{ flexDirection: \"column\", alignItems: \"stretch\" }}\n  >\r\n                      <Text variant=\"heading2\">{t(\"position.new\")}</Text>\r\n                      <Toolbar defaultInitialToken={initialInputs[PositionField.TOKEN0]} />\r\n                    </Flex>\r\n                    <Flex row gap=\"$spacing20\" justifyContent=\"space-between\" width=\"100%\">\r\n                      {!media.xl && <Sidebar />}\r\n                      <Flex gap=\"$spacing24\" flex={1} maxWidth={WIDTH.positionCard} mb=\"$spacing28\">\r\n                        <CreatePositionInner />\r\n                      </Flex>\r\n                    </Flex>\r\n                  </Flex>\r\n                </CreateTxContextProvider>\r\n              </DepositContextProvider>\r\n            </PriceRangeContextProvider>\r\n          </CreatePositionContextProvider>\r\n        </TransactionSettingsContextProvider>\r\n      </MultichainContextProvider>\r\n    </Trace>;\n}\n"],"names":["QuestionInCircle","AnimatedQuestionInCircle","createIcon","name","getIcon","props","Svg","viewBox","fill","Path","d","stroke","strokeWidth","strokeLinecap","strokeLinejoin","_cn3","_cn2","_cn","UnderCardComponent","children","div","className","DepositInputForm","token0","token1","currencyAmounts","currencyBalances","currencyAmountsUSDValue","formattedAmounts","onUserInput","onSetMax","deposit0Disabled","deposit1Disabled","token0UnderCardComponent","token1UnderCardComponent","amount0Loading","amount1Loading","autofocus","bufferPercentage","useNativeTokenPercentageBufferExperiment","focusedInputField","setFocusedInputField","useState","PositionField","TOKEN0","token0BalanceWithBuffer","useTokenBalanceWithBuffer","token1BalanceWithBuffer","TOKEN1","token0CurrencyInfo","useCurrencyInfo","token1CurrencyInfo","handleUserInput","field","newValue","handleOnSetMax","amount","CurrencyInputPanel","focus","borderTopLeftRadius","borderTopRightRadius","borderBottomLeftRadius","borderBottomRightRadius","backgroundColor","currencyInfo","currencyField","CurrencyField","INPUT","currencyAmount","currencyBalance","onSetExactAmount","onToggleIsFiatMode","usdValue","onSetPresetValue","value","onPressIn","isLoading","py","PositionInfoBadge","styled","Text","display","flexDirection","alignItems","gap","variant","color","px","variants","size","default","small","placement","start","middle","end","only","borderRadius","getPlacement","index","length","LiquidityPositionInfoBadges","versionLabel","v4hook","feeTier","t","useTranslation","badges","useMemo","ZERO_ADDRESS","label","copyable","icon","DocumentList","isNaN","Number","isDynamicFeeTierAmount","filter","Boolean","map","displayLabel","isAddress","shortenAddress","cursor","CopyHelper","toCopy","iconSize","iconPosition","ConfirmCreatePositionModal","isOpen","onClose","onContinue","priceDifference","Modal","ModalName","ConfirmCreatePosition","isDismissible","padding","isModalOpen","maxWidth","GetHelpHeader","closeModal","AlertTriangleFilled","textAlign","absoluteValue","Button","emphasis","onPress","_cn11","_cn10","_cn9","_cn6","CreatePositionModal","quoteCurrency","baseCurrency","derivedPriceRangeInfo","updatedFormattedAmounts","updatedUSDAmounts","txInfo","positionState","fee","hook","derivedPositionInfo","currentTransactionStep","setCurrentTransactionStep","useCreatePositionContext","priceRangeState","priceInverted","usePriceRangeContext","derivedDepositInfo","depositState","exactField","useDepositContext","currencies","protocolVersion","creatingPoolOrPair","currency","formatNumberOrString","formatCurrencyAmount","useLocalizationContext","getInvertedTuple","formattedPrices","formatPrices","getProtocolVersionLabel","steps","setSteps","dispatch","useDispatch","gasFeeEstimateUSD","error","refetch","dependentAmount","useCreateTxContext","account","useAccountMeta","selectChain","useSelectChain","startChainId","useAccount","chainId","navigate","useNavigate","trace","useTrace","onSuccess","useCallback","liquidityRangeChartProps","getLiquidityRangeChartProps","positionInfo","priceRangeInfo","pricesInverted","handleCreate","isValidTx","isValidLiquidityTxContext","type","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","onFailure","analytics","getLPBaseAnalyticsProperties","version","feeAmount","currency0","currency1","currency0AmountUsd","currency1AmountUsd","poolId","getPoolIdOrAddressFromCreatePositionInfo","expectedAmountBaseRaw","quotient","toString","expectedAmountQuoteRaw","createPool","createPosition","useUpdatedAmountsFromDependentAmount","CreatePosition","title","Trans","i18nKey","symbol","DoubleCurrencyLogo","iconSizes","icon36","ProtocolVersion","V3","V4","WrappedLiquidityPositionRangeChart","width","BaseQuoteFiatAmount","price","invertPrice","invert","base","quote","NumberType","FiatTokenPrice","TokenLogo","url","logoUrl","ErrorCallout","errorMessage","PoolOutOfSyncError","ProgressIndicator","currentStep","DetailLineItem","LineItem","Label","Value","NetworkLogo","UniverseChainId","Mainnet","icon16","shape","FiatGasPrice","loading","isDisabled","action","DepositStep","setDepositState","inputError","dataFetchingError","isReviewModalOpen","setIsReviewModalOpen","isConfirmModalOpen","setIsConfirmModalOpen","handleReview","warning","WarningSeverity","High","updatedDeposit0Disabled","updatedDeposit1Disabled","disabled","txRequest","requestLoading","prev","exactAmounts","ResetCreatePositionFormModal","onHandleReset","ResetCreatePositionsForm","handleReset","_cn8","WIDTH","positionCard","sidebar","CreatePositionInner","step","setStep","v2Selected","V2","handleContinue","PositionFlowStep","SELECT_TOKENS_AND_FEE_TIER","PRICE_RANGE","DEPOSIT","prevStep","Trace","logImpression","section","SectionName","CreatePositionSelectTokensStep","SelectTokensStep","CreatePositionPriceRangeStep","EditSelectTokensStep","Container","SelectPriceRangeStep","CreatePositionDepositStep","Sidebar","PoolProgressSteps","createStep","stepEnum","active","Flex","alignSelf","$platform-web","position","top","INTERFACE_NAV_HEIGHT","PoolProgressIndicator","ResetButton","onClickReset","RotateLeft","ToolbarContainer","row","centered","$md","gridTemplateColumns","gridColumnGap","Toolbar","defaultInitialToken","setPositionState","reset","resetCreatePositionState","setPriceRangeState","customSlippageTolerance","useTransactionSettingsContext","versionDropdownOpen","setVersionDropdownOpen","showResetModal","setShowResetModal","resetPriceRangeState","resetDepositState","resetMultichainState","useMultichainContext","isTestnetModeEnabled","useEnabledChains","prevIsTestnetModeEnabled","usePrevious","isFormUnchanged","currencyInputs","DEFAULT_POSITION_STATE","initialPrice","DEFAULT_PRICE_RANGE_STATE","DEFAULT_DEPOSIT_STATE","useEffect","handleVersionChange","versionUrl","prevState","TouchableArea","protocol","concatClassName","SwapFormSettings","adjustRightAlignment","adjustTopAlignment","settings","Slippage","Deadline","iconColor","media","useMedia","useParams","paramsProtocolVersion","parseProtocolVersion","autoSlippageTolerance","useLPSlippageValue","initialInputs","useInitialPoolInputs","initialProtocolVersion","page","InterfacePageNameLocal","MultichainContextProvider","initialChainId","TransactionSettingsContextProvider","settingKey","TransactionSettingKey","LP","CreatePositionContextProvider","initialState","PriceRangeContextProvider","DepositContextProvider","CreateTxContextProvider","mt","$xl","mx","BreadcrumbNavContainer","aria-label","BreadcrumbNavLink","to","ChevronRight","xl","flex","mb"],"sourceRoot":""}