{"version":3,"file":"static/js/1072.46a6f42c.chunk.js","mappings":"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","sources":["../packages/uniswap/src/data/apiClients/tradingApi/useClaimLpFeesCalldataQuery.ts","webpack://@uniswap/interface/./src/components/ErrorCallout/index.tsx?5e87","webpack://@uniswap/interface/./src/pages/Pool/Positions/ClaimFeeModal.tsx?aa57","../packages/ui/src/components/icons/RotateLeft.tsx","../packages/uniswap/src/data/rest/getPools.ts","components/ErrorCallout/index.tsx","components/Liquidity/hooks.ts","hooks/useIsTickAtLimit.ts","pages/Pool/Positions/ClaimFeeModal.tsx"],"sourcesContent":["import { UseQueryResult, useQuery } from '@tanstack/react-query'\r\nimport { uniswapUrls } from 'uniswap/src/constants/urls'\r\nimport { claimLpFees } from 'uniswap/src/data/apiClients/tradingApi/TradingApiClient'\r\nimport { UseQueryApiHelperHookArgs } from 'uniswap/src/data/apiClients/types'\r\nimport { ClaimLPFeesRequest, ClaimLPFeesResponse } from 'uniswap/src/data/tradingApi/__generated__'\r\nimport { ReactQueryCacheKey } from 'utilities/src/reactQuery/cache'\r\n\r\nexport function useClaimLpFeesCalldataQuery({\r\n  params,\r\n  ...rest\r\n}: UseQueryApiHelperHookArgs<ClaimLPFeesRequest, ClaimLPFeesResponse>): UseQueryResult<ClaimLPFeesResponse> {\r\n  const queryKey = [ReactQueryCacheKey.TradingApi, uniswapUrls.tradingApiPaths.claimLpFees, params]\r\n\r\n  return useQuery<ClaimLPFeesResponse>({\r\n    queryKey,\r\n    queryFn: async () => {\r\n      if (!params) {\r\n        throw { name: 'Params are required' }\r\n      }\r\n      return await claimLpFees(params)\r\n    },\r\n    ...rest,\r\n  })\r\n}\r\n","// extracted by mini-css-extract-plugin\nexport default {};","// extracted by mini-css-extract-plugin\nexport default {};","\"use strict\";\nimport { Path, Svg } from \"react-native-svg\";\nimport { createIcon } from \"../factories/createIcon\";\nexport const [RotateLeft, AnimatedRotateLeft] = createIcon({\n  name: \"RotateLeft\",\n  getIcon: (props) => <Svg viewBox=\"0 0 16 16\" fill=\"none\" {...props}>\r\n      <Path\n    d=\"M14.6667 8C14.6667 11.676 11.676 14.6667 8.00004 14.6667C5.45204 14.6667 3.16399 13.248 2.02999 10.9634C1.86599 10.6334 2.00077 10.2333 2.33077 10.07C2.65944 9.90532 3.06067 10.0413 3.224 10.3706C4.13133 12.1986 5.96137 13.334 8.00004 13.334C10.9407 13.334 13.3334 10.9413 13.3334 8.00065C13.3334 5.05998 10.9407 2.66732 8.00004 2.66732C6.07537 2.66732 4.33143 3.71065 3.39343 5.33398H5.33337C5.70204 5.33398 6.00004 5.63265 6.00004 6.00065C6.00004 6.36865 5.70204 6.66732 5.33337 6.66732H2.00004C1.63137 6.66732 1.33337 6.36865 1.33337 6.00065V2.66732C1.33337 2.29932 1.63137 2.00065 2.00004 2.00065C2.36871 2.00065 2.66671 2.29932 2.66671 2.66732V4.00602C3.90204 2.35736 5.86471 1.33398 8.00004 1.33398C11.676 1.33332 14.6667 4.324 14.6667 8Z\"\n    fill=\"currentColor\"\n  />\r\n    </Svg>\n});\n","\"use strict\";\nimport { useQuery } from \"@connectrpc/connect-query\";\nimport { listPools } from \"@uniswap/client-pools/dist/pools/v1/api-PoolsService_connectquery\";\nimport { uniswapGetTransport } from \"uniswap/src/data/rest/base\";\nexport function useGetPoolsByTokens(input, enabled = true) {\n  return useQuery(listPools, input, { transport: uniswapGetTransport, enabled });\n}\n","\"use strict\";\nimport { useTranslation } from \"react-i18next\";\nimport { ClickableTamaguiStyle } from \"theme/components/styles\";\nimport { Flex, Text, TouchableArea } from \"ui/src\";\nimport { AlertTriangleFilled } from \"ui/src/components/icons/AlertTriangleFilled\";\nimport { RotateLeft } from \"ui/src/components/icons/RotateLeft\";\nexport function ErrorCallout({\n  errorMessage,\n  description,\n  title,\n  isWarning = false,\n  action,\n  pressIcon = <RotateLeft size=\"$icon.16\" color=\"$neutral1\" />,\n  onPress\n}) {\n  const { t } = useTranslation();\n  if (!errorMessage) {\n    return null;\n  }\n  return <Flex row gap=\"$spacing12\" backgroundColor=\"$surface2\" borderRadius=\"$rounded16\" p=\"$padding12\">\r\n      <Flex\n    backgroundColor={isWarning ? \"$statusWarning2\" : \"$statusCritical2\"}\n    p=\"$padding12\"\n    borderRadius=\"$rounded12\"\n    alignSelf=\"flex-start\"\n  >\r\n        <AlertTriangleFilled color={isWarning ? \"$statusWarning\" : \"$statusCritical\"} size=\"$icon.20\" />\r\n      </Flex>\r\n      <Flex alignItems=\"flex-start\" flexWrap=\"wrap\" flexShrink={1} gap=\"$gap4\">\r\n        <Text color={isWarning ? \"$statusWarning\" : \"$statusCritical\"} variant=\"body3\">\r\n          {title || t(\"common.card.error.description\")}\r\n        </Text>\r\n        <Text variant=\"body3\" color=\"$neutral2\">\r\n          {description || t(\"pool.liquidity.data.error.message\")}\r\n        </Text>\r\n        {\n    /* the error message will be of type true or a string. True means there was an error but the message is unknown. */\n  }\r\n        {errorMessage !== true && <Text variant=\"body3\" color=\"$neutral3\">\r\n            {t(\"common.error.label\")}: {errorMessage}\r\n          </Text>}\r\n        {Boolean(onPress) && <TouchableArea {...ClickableTamaguiStyle} onPress={onPress} mt=\"$spacing2\">\r\n            <Flex row gap=\"$gap4\">\r\n              {pressIcon}\r\n              <Text variant=\"buttonLabel3\">{action || t(\"common.button.tryAgain\")}</Text>\r\n            </Flex>\r\n          </TouchableArea>}\r\n      </Flex>\r\n    </Flex>;\n}\n","\"use strict\";\nimport { BigNumber } from \"@ethersproject/bignumber\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount, Percent } from \"@uniswap/sdk-core\";\nimport {\n  calculateInvertedValues,\n  getDefaultFeeTiersForChainWithDynamicFeeTier,\n  mergeFeeTiers\n} from \"components/Liquidity/utils\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport useIsTickAtLimit from \"hooks/useIsTickAtLimit\";\nimport JSBI from \"jsbi\";\nimport { getCurrencyAddressForTradingApi, getSortedCurrenciesTupleWithWrap } from \"pages/Pool/Positions/create/utils\";\nimport { useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useAppSelector } from \"state/hooks\";\nimport { Bound } from \"state/mint/v3/actions\";\nimport { PollingInterval } from \"uniswap/src/constants/misc\";\nimport { useGetPoolsByTokens } from \"uniswap/src/data/rest/getPools\";\nimport { useUSDCPrice } from \"uniswap/src/features/transactions/hooks/useUSDCPrice\";\nimport { NumberType, useFormatter } from \"utils/formatNumbers\";\nfunction getPriceOrderingFromPositionForUI(position) {\n  if (!position) {\n    return {};\n  }\n  const token0 = position.amount0.currency;\n  const token1 = position.amount1.currency;\n  return {\n    priceLower: position.token0PriceLower,\n    priceUpper: position.token0PriceUpper,\n    quote: token1,\n    base: token0\n  };\n}\nexport const MAX_FEE_TIER_DECIMALS = 4;\nexport function useAllFeeTierPoolData({\n  chainId,\n  protocolVersion,\n  currencies,\n  withDynamicFeeTier = false,\n  hook\n}) {\n  const { t } = useTranslation();\n  const { formatPercent } = useFormatter();\n  const sortedCurrencies = getSortedCurrenciesTupleWithWrap(currencies[0], currencies[1], protocolVersion);\n  const { data: poolData } = useGetPoolsByTokens(\n    {\n      chainId,\n      protocolVersions: [protocolVersion],\n      token0: getCurrencyAddressForTradingApi(sortedCurrencies[0]),\n      token1: getCurrencyAddressForTradingApi(sortedCurrencies[1]),\n      hooks: hook ?? ZERO_ADDRESS\n    },\n    Boolean(chainId && sortedCurrencies?.[0] && sortedCurrencies?.[1])\n  );\n  return useMemo(() => {\n    const liquiditySum = poolData?.pools.reduce(\n      (sum, pool) => BigNumber.from(pool.totalLiquidityUsd.split(\".\")?.[0] ?? \"0\").add(sum),\n      BigNumber.from(0)\n    );\n    const feeTierData = {};\n    if (poolData && liquiditySum && sortedCurrencies?.[0] && sortedCurrencies?.[1]) {\n      for (const pool of poolData.pools) {\n        const feeTier = pool.fee;\n        const totalLiquidityUsdTruncated = Number(pool.totalLiquidityUsd.split(\".\")?.[0] ?? \"0\");\n        const percentage = liquiditySum.isZero() ? new Percent(0, 100) : new Percent(totalLiquidityUsdTruncated, liquiditySum.toString());\n        if (feeTierData[feeTier]) {\n          feeTierData[feeTier].totalLiquidityUsd += totalLiquidityUsdTruncated;\n          feeTierData[feeTier].percentage = feeTierData[feeTier].percentage.add(percentage);\n        } else {\n          feeTierData[feeTier] = {\n            id: pool.poolId,\n            fee: {\n              feeAmount: pool.fee,\n              tickSpacing: pool.tickSpacing\n            },\n            formattedFee: formatPercent(new Percent(pool.fee, 1e6), MAX_FEE_TIER_DECIMALS),\n            totalLiquidityUsd: totalLiquidityUsdTruncated,\n            percentage,\n            tvl: pool.totalLiquidityUsd,\n            created: true,\n            boostedApr: pool.boostedApr\n          };\n        }\n      }\n    }\n    return {\n      feeTierData: mergeFeeTiers(\n        feeTierData,\n        Object.values(\n          getDefaultFeeTiersForChainWithDynamicFeeTier({\n            chainId,\n            dynamicFeeTierEnabled: withDynamicFeeTier,\n            protocolVersion\n          })\n        ),\n        formatPercent,\n        t(\"fee.dynamic\")\n      ),\n      hasExistingFeeTiers: Object.values(feeTierData).length > 0\n    };\n  }, [poolData, sortedCurrencies, chainId, withDynamicFeeTier, formatPercent, protocolVersion, t]);\n}\nexport function usePositionDerivedInfo(positionInfo) {\n  const {\n    token0UncollectedFees,\n    token1UncollectedFees,\n    currency0Amount,\n    currency1Amount,\n    liquidity,\n    tickLower,\n    tickUpper,\n    apr\n  } = positionInfo ?? {};\n  const { price: price0 } = useUSDCPrice(currency0Amount?.currency, PollingInterval.Normal);\n  const { price: price1 } = useUSDCPrice(currency1Amount?.currency, PollingInterval.Normal);\n  const { feeValue0, feeValue1 } = useMemo(() => {\n    if (!currency0Amount || !currency1Amount) {\n      return {};\n    }\n    return {\n      feeValue0: token0UncollectedFees ? CurrencyAmount.fromRawAmount(currency0Amount.currency, token0UncollectedFees) : void 0,\n      feeValue1: token1UncollectedFees ? CurrencyAmount.fromRawAmount(currency1Amount.currency, token1UncollectedFees) : void 0\n    };\n  }, [currency0Amount, currency1Amount, token0UncollectedFees, token1UncollectedFees]);\n  const { fiatFeeValue0, fiatFeeValue1 } = useMemo(() => {\n    const amount0 = feeValue0 ? price0?.quote(feeValue0) : void 0;\n    const amount1 = feeValue1 ? price1?.quote(feeValue1) : void 0;\n    return {\n      fiatFeeValue0: amount0,\n      fiatFeeValue1: amount1\n    };\n  }, [price0, price1, feeValue0, feeValue1]);\n  const { fiatValue0, fiatValue1 } = useMemo(() => {\n    if (!price0 || !price1 || !currency0Amount || !currency1Amount) {\n      return {};\n    }\n    const amount0 = price0.quote(currency0Amount);\n    const amount1 = price1.quote(currency1Amount);\n    return {\n      fiatValue0: amount0,\n      fiatValue1: amount1\n    };\n  }, [price0, price1, currency0Amount, currency1Amount]);\n  const priceOrdering = useMemo(() => {\n    if (positionInfo?.version !== ProtocolVersion.V3 && positionInfo?.version !== ProtocolVersion.V4 || !positionInfo.position || !liquidity || !tickLower || !tickUpper) {\n      return {};\n    }\n    return getPriceOrderingFromPositionForUI(positionInfo.position);\n  }, [liquidity, tickLower, tickUpper, positionInfo]);\n  return useMemo(() => {\n    const baseInfo = {\n      fiatFeeValue0,\n      fiatFeeValue1,\n      fiatValue0,\n      fiatValue1,\n      priceOrdering,\n      feeValue0,\n      feeValue1,\n      apr,\n      token0CurrentPrice: void 0,\n      token1CurrentPrice: void 0\n    };\n    if (!positionInfo) {\n      return baseInfo;\n    }\n    if (positionInfo.version === ProtocolVersion.V2) {\n      return {\n        ...baseInfo,\n        version: ProtocolVersion.V2,\n        token0CurrentPrice: void 0,\n        token1CurrentPrice: void 0\n      };\n    }\n    return {\n      ...baseInfo,\n      version: positionInfo.version,\n      token0CurrentPrice: positionInfo.pool?.token0Price,\n      token1CurrentPrice: positionInfo.pool?.token1Price\n    };\n  }, [fiatFeeValue0, fiatFeeValue1, fiatValue0, fiatValue1, priceOrdering, feeValue0, feeValue1, positionInfo, apr]);\n}\nexport function useGetRangeDisplay({\n  priceOrdering,\n  pricesInverted,\n  tickSpacing,\n  tickLower,\n  tickUpper\n}) {\n  const { formatTickPrice } = useFormatter();\n  const { priceLower, priceUpper, base, quote } = calculateInvertedValues({\n    ...priceOrdering,\n    invert: pricesInverted\n  });\n  const isTickAtLimit = useIsTickAtLimit(tickSpacing, Number(tickLower), Number(tickUpper));\n  const minPrice = formatTickPrice({\n    price: priceLower,\n    atLimit: isTickAtLimit,\n    direction: Bound.LOWER,\n    numberType: NumberType.TokenTx\n  });\n  const maxPrice = formatTickPrice({\n    price: priceUpper,\n    atLimit: isTickAtLimit,\n    direction: Bound.UPPER,\n    numberType: NumberType.TokenTx\n  });\n  const tokenASymbol = quote?.symbol;\n  const tokenBSymbol = base?.symbol;\n  return {\n    minPrice,\n    maxPrice,\n    tokenASymbol,\n    tokenBSymbol,\n    isFullRange: isTickAtLimit[Bound.LOWER] && isTickAtLimit[Bound.UPPER]\n  };\n}\nexport function usePositionCurrentPrice(positionInfo) {\n  return useMemo(() => {\n    if (positionInfo?.version === ProtocolVersion.V2) {\n      return positionInfo.pair?.token1Price;\n    }\n    return positionInfo?.pool?.token1Price;\n  }, [positionInfo]);\n}\nexport function useModalLiquidityInitialState() {\n  const modalState = useAppSelector((state) => state.application.openModal);\n  return modalState?.initialState;\n}\nexport function useGetPoolTokenPercentage(positionInfo) {\n  const { totalSupply, liquidityAmount } = positionInfo ?? {};\n  const poolTokenPercentage = useMemo(() => {\n    return !!liquidityAmount && !!totalSupply && JSBI.greaterThanOrEqual(totalSupply.quotient, liquidityAmount.quotient) ? new Percent(liquidityAmount.quotient, totalSupply.quotient) : void 0;\n  }, [liquidityAmount, totalSupply]);\n  return poolTokenPercentage;\n}\n","\"use strict\";\nimport { TickMath, nearestUsableTick } from \"@uniswap/v3-sdk\";\nimport { useMemo } from \"react\";\nimport { Bound } from \"state/mint/v3/actions\";\nexport default function useIsTickAtLimit(tickSpacing, tickLower, tickUpper) {\n  return useMemo(\n    () => ({\n      [Bound.LOWER]: tickSpacing && tickLower ? tickLower === nearestUsableTick(TickMath.MIN_TICK, tickSpacing) : void 0,\n      [Bound.UPPER]: tickSpacing && tickUpper ? tickUpper === nearestUsableTick(TickMath.MAX_TICK, tickSpacing) : void 0\n    }),\n    [tickSpacing, tickLower, tickUpper]\n  );\n}\n","\"use strict\";\nimport { ProtocolVersion } from \"@uniswap/client-pools/dist/pools/v1/types_pb\";\nimport { CurrencyAmount } from \"@uniswap/sdk-core\";\nimport { ErrorCallout } from \"components/ErrorCallout\";\nimport { getLPBaseAnalyticsProperties } from \"components/Liquidity/analytics\";\nimport { useModalLiquidityInitialState, usePositionDerivedInfo } from \"components/Liquidity/hooks\";\nimport { getProtocolItems } from \"components/Liquidity/utils\";\nimport { GetHelpHeader } from \"components/Modal/GetHelpHeader\";\nimport { ZERO_ADDRESS } from \"constants/misc\";\nimport { useAccount } from \"hooks/useAccount\";\nimport { useModalState } from \"hooks/useModalState\";\nimport useSelectChain from \"hooks/useSelectChain\";\nimport { canUnwrapCurrency, getCurrencyWithOptionalUnwrap } from \"pages/Pool/Positions/create/utils\";\nimport { useMemo, useState } from \"react\";\nimport { Trans, useTranslation } from \"react-i18next\";\nimport { useAppDispatch } from \"state/hooks\";\nimport { liquiditySaga } from \"state/sagas/liquidity/liquiditySaga\";\nimport { Button, Flex, Switch, Text } from \"ui/src\";\nimport { iconSizes } from \"ui/src/theme\";\nimport { CurrencyLogo } from \"uniswap/src/components/CurrencyLogo/CurrencyLogo\";\nimport { Modal } from \"uniswap/src/components/modals/Modal\";\nimport { nativeOnChain } from \"uniswap/src/constants/tokens\";\nimport { uniswapUrls } from \"uniswap/src/constants/urls\";\nimport { useAccountMeta } from \"uniswap/src/contexts/UniswapContext\";\nimport { useClaimLpFeesCalldataQuery } from \"uniswap/src/data/apiClients/tradingApi/useClaimLpFeesCalldataQuery\";\nimport { AccountType } from \"uniswap/src/features/accounts/types\";\nimport { useLocalizationContext } from \"uniswap/src/features/language/LocalizationContext\";\nimport { InterfaceEventNameLocal, ModalName } from \"uniswap/src/features/telemetry/constants\";\nimport { sendAnalyticsEvent } from \"uniswap/src/features/telemetry/send\";\nimport { useCurrencyInfo } from \"uniswap/src/features/tokens/useCurrencyInfo\";\nimport {\n  LiquidityTransactionType,\n  isValidLiquidityTxContext\n} from \"uniswap/src/features/transactions/liquidity/types\";\nimport { getErrorMessageToDisplay, parseErrorMessageTitle } from \"uniswap/src/features/transactions/liquidity/utils\";\nimport { validateTransactionRequest } from \"uniswap/src/features/transactions/swap/utils/trade\";\nimport { currencyId } from \"uniswap/src/utils/currencyId\";\nimport { NumberType } from \"utilities/src/format/types\";\nimport { logger } from \"utilities/src/logger/logger\";\nimport { useTrace } from \"utilities/src/telemetry/trace/TraceContext\";\nfunction UnwrapUnderCard({\n  unwrapNativeCurrency,\n  setUnwrapNativeCurrency,\n  chainId\n}) {\n  const nativeCurrency = chainId ? nativeOnChain(chainId) : void 0;\n  return <Flex\n    row\n    backgroundColor=\"$surface2\"\n    borderBottomLeftRadius=\"$rounded12\"\n    borderBottomRightRadius=\"$rounded12\"\n    justifyContent=\"space-between\"\n    alignItems=\"center\"\n    py=\"$padding8\"\n    px=\"$padding16\"\n  >\r\n      <Text variant=\"body3\" color=\"$neutral2\">\r\n        <Trans i18nKey=\"pool.collectAs\" values={{ nativeWrappedSymbol: nativeCurrency?.symbol }} />\r\n      </Text>\r\n      <Switch\n    id=\"collect-as-weth\"\n    checked={unwrapNativeCurrency}\n    onCheckedChange={() => setUnwrapNativeCurrency((unwrapNativeCurrency2) => !unwrapNativeCurrency2)}\n    variant=\"default\"\n  />\r\n    </Flex>;\n}\nexport function ClaimFeeModal() {\n  const { t } = useTranslation();\n  const trace = useTrace();\n  const { formatCurrencyAmount } = useLocalizationContext();\n  const positionInfo = useModalLiquidityInitialState();\n  const account = useAccountMeta();\n  const [currentTransactionStep, setCurrentTransactionStep] = useState();\n  const [unwrapNativeCurrency, setUnwrapNativeCurrency] = useState(true);\n  const { currency0Amount, currency1Amount, chainId } = positionInfo || {};\n  const canUnwrap0 = canUnwrapCurrency(currency0Amount?.currency, positionInfo?.version);\n  const canUnwrap1 = canUnwrapCurrency(currency1Amount?.currency, positionInfo?.version);\n  const canUnwrap = positionInfo && chainId && (canUnwrap0 || canUnwrap1);\n  const { closeModal } = useModalState(ModalName.ClaimFee);\n  const {\n    feeValue0: token0Fees,\n    feeValue1: token1Fees,\n    fiatFeeValue0: token0FeesUsd,\n    fiatFeeValue1: token1FeesUsd\n  } = usePositionDerivedInfo(positionInfo);\n  const currency0 = getCurrencyWithOptionalUnwrap({\n    currency: token0Fees?.currency,\n    shouldUnwrap: unwrapNativeCurrency && canUnwrap0\n  });\n  const currency1 = getCurrencyWithOptionalUnwrap({\n    currency: token1Fees?.currency,\n    shouldUnwrap: unwrapNativeCurrency && canUnwrap1\n  });\n  const currencyInfo0 = useCurrencyInfo(currencyId(currency0));\n  const currencyInfo1 = useCurrencyInfo(currencyId(currency1));\n  const dispatch = useAppDispatch();\n  const selectChain = useSelectChain();\n  const startChainId = useAccount().chainId;\n  const claimLpFeesParams = useMemo(() => {\n    if (!positionInfo || !currency0 || !currency1) {\n      return void 0;\n    }\n    return {\n      simulateTransaction: true,\n      protocol: getProtocolItems(positionInfo.version),\n      tokenId: positionInfo.tokenId ? Number(positionInfo.tokenId) : void 0,\n      walletAddress: account?.address,\n      chainId: positionInfo.currency0Amount.currency.chainId,\n      position: {\n        pool: {\n          token0: currency0.isNative ? ZERO_ADDRESS : currency0.address,\n          token1: currency1.isNative ? ZERO_ADDRESS : currency1.address,\n          fee: positionInfo.feeTier ? Number(positionInfo.feeTier) : void 0,\n          tickSpacing: positionInfo?.tickSpacing ? Number(positionInfo?.tickSpacing) : void 0,\n          hooks: positionInfo.v4hook\n        },\n        tickLower: positionInfo.tickLower ? Number(positionInfo.tickLower) : void 0,\n        tickUpper: positionInfo.tickUpper ? Number(positionInfo.tickUpper) : void 0\n      },\n      expectedTokenOwed0RawAmount: positionInfo.version !== ProtocolVersion.V4 ? token0Fees?.quotient.toString() : void 0,\n      expectedTokenOwed1RawAmount: positionInfo.version !== ProtocolVersion.V4 ? token1Fees?.quotient.toString() : void 0,\n      collectAsWETH: positionInfo.version !== ProtocolVersion.V4 ? !unwrapNativeCurrency : void 0\n    };\n  }, [\n    account?.address,\n    currency0,\n    currency1,\n    positionInfo,\n    token0Fees?.quotient,\n    token1Fees?.quotient,\n    unwrapNativeCurrency\n  ]);\n  const {\n    data,\n    isLoading: calldataLoading,\n    error,\n    refetch\n  } = useClaimLpFeesCalldataQuery({\n    params: claimLpFeesParams,\n    enabled: Boolean(claimLpFeesParams)\n  });\n  if (error && Object.keys(error).length > 0) {\n    const message = parseErrorMessageTitle(error, { defaultTitle: \"unknown ClaimLPFeesCalldataQuery\" });\n    logger.error(message, {\n      tags: {\n        file: \"ClaimFeeModal\",\n        function: \"useEffect\"\n      }\n    });\n    sendAnalyticsEvent(InterfaceEventNameLocal.CollectLiquidityFailed, {\n      message\n    });\n  }\n  const txInfo = useMemo(() => {\n    const validatedTxRequest = validateTransactionRequest(data?.claim);\n    if (!positionInfo || !validatedTxRequest) {\n      return void 0;\n    }\n    return {\n      type: LiquidityTransactionType.Collect,\n      protocolVersion: positionInfo?.version,\n      action: {\n        type: LiquidityTransactionType.Collect,\n        currency0Amount: token0Fees || CurrencyAmount.fromRawAmount(positionInfo.currency0Amount.currency, 0),\n        currency1Amount: token1Fees || CurrencyAmount.fromRawAmount(positionInfo.currency1Amount.currency, 0)\n      },\n      txRequest: validatedTxRequest\n    };\n  }, [data?.claim, token0Fees, token1Fees, positionInfo]);\n  const onPressConfirm = async () => {\n    const isValidTx = isValidLiquidityTxContext(txInfo);\n    if (!account || account?.type !== AccountType.SignerMnemonic || !isValidTx) {\n      return;\n    }\n    dispatch(\n      liquiditySaga.actions.trigger({\n        selectChain,\n        startChainId,\n        account,\n        liquidityTxContext: txInfo,\n        setCurrentStep: setCurrentTransactionStep,\n        setSteps: () => void 0,\n        onSuccess: () => {\n          closeModal();\n        },\n        onFailure: () => {\n          setCurrentTransactionStep(void 0);\n        },\n        analytics: positionInfo && token0Fees?.currency && token1Fees?.currency ? {\n          ...getLPBaseAnalyticsProperties({\n            trace,\n            poolId: positionInfo.poolId,\n            currency0: currencyInfo0?.currency ?? token0Fees.currency,\n            currency1: currencyInfo1?.currency ?? token1Fees.currency,\n            currency0AmountUsd: token0FeesUsd,\n            currency1AmountUsd: token1FeesUsd,\n            version: positionInfo?.version\n          })\n        } : void 0\n      })\n    );\n  };\n  return <Modal name={ModalName.ClaimFee} onClose={closeModal} isDismissible>\r\n      <Flex gap=\"$gap16\">\r\n        <GetHelpHeader\n    link={uniswapUrls.helpRequestUrl}\n    title={t(\"pool.collectFees\")}\n    closeModal={closeModal}\n    closeDataTestId=\"ClaimFeeModal-close-icon\"\n  />\r\n        {token0Fees && token1Fees && <Flex gap=\"$gap4\">\r\n            <Flex\n    backgroundColor=\"$surface2\"\n    borderTopLeftRadius=\"$rounded12\"\n    borderTopRightRadius=\"$rounded12\"\n    borderBottomLeftRadius={canUnwrap ? \"$rounded0\" : \"$rounded12\"}\n    borderBottomRightRadius={canUnwrap ? \"$rounded0\" : \"$rounded12\"}\n    p=\"$padding16\"\n    gap=\"$gap12\"\n  >\r\n              <Flex row alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                  <CurrencyLogo currencyInfo={currencyInfo0} size={iconSizes.icon24} />\r\n                  <Text variant=\"body1\" color=\"neutral1\">\r\n                    {currency0?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                  <Text variant=\"body1\" color=\"$neutral1\">\r\n                    {formatCurrencyAmount({ value: token0Fees })}\r\n                  </Text>\r\n                  {token0FeesUsd && <Text variant=\"body1\" color=\"$neutral2\">\r\n                      ({formatCurrencyAmount({ value: token0FeesUsd, type: NumberType.FiatTokenPrice })})\r\n                    </Text>}\r\n                </Flex>\r\n              </Flex>\r\n              <Flex row alignItems=\"center\" justifyContent=\"space-between\">\r\n                <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                  <CurrencyLogo currencyInfo={currencyInfo1} size={iconSizes.icon24} />\r\n                  <Text variant=\"body1\" color=\"neutral1\">\r\n                    {currency1?.symbol}\r\n                  </Text>\r\n                </Flex>\r\n                <Flex row gap=\"$gap8\" alignItems=\"center\">\r\n                  <Text variant=\"body1\" color=\"$neutral1\">\r\n                    {formatCurrencyAmount({ value: token1Fees })}\r\n                  </Text>\r\n                  {token1FeesUsd && <Text variant=\"body1\" color=\"$neutral2\">\r\n                      ({formatCurrencyAmount({ value: token1FeesUsd, type: NumberType.FiatTokenPrice })})\r\n                    </Text>}\r\n                </Flex>\r\n              </Flex>\r\n            </Flex>\r\n            {canUnwrap && <UnwrapUnderCard\n    unwrapNativeCurrency={unwrapNativeCurrency}\n    setUnwrapNativeCurrency={setUnwrapNativeCurrency}\n    chainId={chainId}\n  />}\r\n          </Flex>}\r\n        <ErrorCallout errorMessage={getErrorMessageToDisplay({ calldataError: error })} onPress={refetch} />\r\n        <Flex row>\r\n          <Button\n    key=\"LoaderButton-animation-ClaimFeeModal-button\"\n    isDisabled={!data?.claim || Boolean(currentTransactionStep)}\n    loading={calldataLoading || Boolean(currentTransactionStep)}\n    size=\"large\"\n    variant=\"branded\"\n    onPress={onPressConfirm}\n  >\r\n            {currentTransactionStep ? t(\"common.confirmWallet\") : t(\"common.collect.button\")}\r\n          </Button>\r\n        </Flex>\r\n      </Flex>\r\n    </Modal>;\n}\n"],"names":["_ref","params","rest","_objectWithoutProperties2","default","_excluded","queryKey","ReactQueryCacheKey","TradingApi","uniswapUrls","tradingApiPaths","claimLpFees","useQuery","Object","assign","queryFn","_queryFn","_asyncToGenerator2","name","apply","arguments","_reactQuery","require","_urls","_TradingApiClient","_cache","RotateLeft","AnimatedRotateLeft","createIcon","getIcon","props","Svg","viewBox","fill","Path","d","useGetPoolsByTokens","input","enabled","listPools","transport","uniswapGetTransport","_cn6","_cn5","_cn4","_cn3","_cn2","_cn","ErrorCallout","errorMessage","description","title","isWarning","action","pressIcon","size","color","onPress","t","useTranslation","div","className","concatClassName","AlertTriangleFilled","Text","variant","Boolean","TouchableArea","ClickableTamaguiStyle","mt","MAX_FEE_TIER_DECIMALS","useAllFeeTierPoolData","chainId","protocolVersion","currencies","withDynamicFeeTier","hook","sortedCurrencies","formatPercent","useFormatter","getSortedCurrenciesTupleWithWrap","data","poolData","protocolVersions","token0","getCurrencyAddressForTradingApi","token1","hooks","ZERO_ADDRESS","useMemo","liquiditySum","pools","reduce","sum","pool","BigNumber","from","totalLiquidityUsd","split","add","feeTierData","feeTier","fee","totalLiquidityUsdTruncated","Number","percentage","isZero","Percent","toString","id","poolId","feeAmount","tickSpacing","formattedFee","tvl","created","boostedApr","mergeFeeTiers","values","getDefaultFeeTiersForChainWithDynamicFeeTier","dynamicFeeTierEnabled","hasExistingFeeTiers","length","usePositionDerivedInfo","positionInfo","currency0Amount","currency1Amount","token0UncollectedFees","token1UncollectedFees","liquidity","tickLower","tickUpper","apr","price","price0","useUSDCPrice","currency","PollingInterval","Normal","price1","feeValue0","feeValue1","CurrencyAmount","fromRawAmount","fiatFeeValue0","fiatFeeValue1","quote","fiatValue0","fiatValue1","priceOrdering","version","ProtocolVersion","V3","V4","position","amount0","amount1","priceLower","token0PriceLower","priceUpper","token0PriceUpper","base","getPriceOrderingFromPositionForUI","baseInfo","token0CurrentPrice","token1CurrentPrice","V2","token0Price","token1Price","useGetRangeDisplay","pricesInverted","formatTickPrice","calculateInvertedValues","invert","isTickAtLimit","Bound","LOWER","nearestUsableTick","TickMath","MIN_TICK","UPPER","MAX_TICK","useIsTickAtLimit","minPrice","atLimit","direction","numberType","NumberType","TokenTx","maxPrice","tokenASymbol","symbol","tokenBSymbol","isFullRange","usePositionCurrentPrice","pair","useModalLiquidityInitialState","modalState","useAppSelector","state","application","openModal","initialState","useGetPoolTokenPercentage","totalSupply","liquidityAmount","JSBI","quotient","_cn8","_cn7","UnwrapUnderCard","unwrapNativeCurrency","setUnwrapNativeCurrency","nativeCurrency","nativeOnChain","Trans","i18nKey","nativeWrappedSymbol","Switch","checked","onCheckedChange","unwrapNativeCurrency2","ClaimFeeModal","token0Fees","token1Fees","account","currency0","currency1","trace","useTrace","formatCurrencyAmount","useLocalizationContext","useAccountMeta","currentTransactionStep","setCurrentTransactionStep","useState","canUnwrap0","canUnwrapCurrency","canUnwrap1","canUnwrap","closeModal","useModalState","ModalName","ClaimFee","token0FeesUsd","token1FeesUsd","getCurrencyWithOptionalUnwrap","shouldUnwrap","currencyInfo0","useCurrencyInfo","currencyId","currencyInfo1","dispatch","useAppDispatch","selectChain","useSelectChain","startChainId","useAccount","claimLpFeesParams","simulateTransaction","protocol","getProtocolItems","tokenId","walletAddress","address","isNative","v4hook","expectedTokenOwed0RawAmount","expectedTokenOwed1RawAmount","collectAsWETH","isLoading","calldataLoading","error","refetch","useClaimLpFeesCalldataQuery","keys","message","parseErrorMessageTitle","defaultTitle","logger","tags","file","function","sendAnalyticsEvent","InterfaceEventNameLocal","CollectLiquidityFailed","txInfo","validatedTxRequest","validateTransactionRequest","claim","type","LiquidityTransactionType","Collect","txRequest","onPressConfirm","isValidTx","isValidLiquidityTxContext","AccountType","SignerMnemonic","liquiditySaga","actions","trigger","liquidityTxContext","setCurrentStep","setSteps","onSuccess","onFailure","analytics","getLPBaseAnalyticsProperties","currency0AmountUsd","currency1AmountUsd","Modal","onClose","isDismissible","GetHelpHeader","link","helpRequestUrl","closeDataTestId","CurrencyLogo","currencyInfo","iconSizes","icon24","value","FiatTokenPrice","getErrorMessageToDisplay","calldataError","Button","isDisabled","loading"],"sourceRoot":""}